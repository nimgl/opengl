# Written by Leonardo Mariscal <leo@ldmd.mx>, 2019

## Modern OpenGL Bindings
## ====
## WARNING: This is a generated file. Do not edit
## Any edits will be overwritten by the generator.
##
## NimGL is completely unaffiliated with OpenGL and
## Khronos, each Doc is under individual copyright
## You can find it in their appropiate file in the
## official `repo<https://github.com/KhronosGroup/OpenGL-Refpages>`_
##
## NOTE: This bindings only support modern OpenGL (3.2 >=)
## so fixed pipelines are not supported.

import dynlib, strutils

var glGetProc: proc(procName: cstring): pointer {.cdecl.}

when not defined(glCustomLoader):
  # Thanks to ephja for this loading system
  when defined(windows):
    const glDLL = "opengl32.dll"
  elif defined(macosx):
    const glDLL = "/System/Library/Frameworks/OpenGL.framework/Versions/Current/Libraries/libGL.dylib"
  else:
    const glDLL = "libGL.so.1"

  let glHandle = loadLib(glDLL)
  if isNil(glHandle):
    quit("could not load: " & gldll)

  when defined(windows):
    var wglGetProcAddress = cast[proc (s: cstring): pointer {.stdcall.}](
      symAddr(glHandle, "wglGetProcAddress"))
  elif defined(linux):
    var glxGetProcAddress = cast[proc (s: cstring): pointer {.cdecl.}](
      symAddr(glHandle, "glXGetProcAddress"))
    var glxGetProcAddressArb = cast[proc (s: cstring): pointer {.cdecl.}](
      symAddr(glHandle, "glXGetProcAddressARB"))

  glGetProc = proc(procName: cstring): pointer {.cdecl.} =
    when defined(windows):
      result = symAddr(glHandle, procName)
      if result != nil:
        return
      if not isNil(wglGetProcAddress):
        result = wglGetProcAddress(procName)
    elif defined(linux):
      result = symAddr(glHandle, procname)
      if result != nil:
        return
      if not isNil(glxGetProcAddressArb):
        result = glxGetProcAddressArb(procName)
        if result != nil:
          return
      if not isNil(glxGetProcAddress):
        result = glxGetProcAddress(procName)
    else:
      result = symAddr(glHandle, procName)
    if result == nil: raiseInvalidLibrary(procName)

proc setGLGetProc*(getProc: proc(procName: cstring): pointer {.cdecl.}) =
  glGetProc = getProc

type
  GLenum* = distinct uint32
  GLboolean* = bool
  GLbitfield* = distinct uint32
  GLvoid* = pointer
  GLbyte* = int8
  GLshort* = int16
  GLint* = int32
  GLclampx* = int32
  GLubyte* = uint8
  GLushort* = uint16
  GLuint* = uint32
  GLhandle* = GLuint
  GLsizei* = int32
  GLfloat* = float32
  GLclampf* = float32
  GLdouble* = float64
  GLclampd* = float64
  GLeglImageOES* = distinct pointer
  GLchar* = char
  GLcharArb* = char
  GLfixed* = int32
  GLhalfNv* = uint16
  GLvdpauSurfaceNv* = uint
  GLintptr* = int
  GLintptrArb* = int
  GLint64EXT* = int64
  GLuint64EXT* = uint64
  GLint64* = int64
  GLsizeiptrArb* = int
  GLsizeiptr* = int
  GLsync* = distinct pointer
  GLuint64* = uint64
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}
  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}
  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}
  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}
  GLVULKANPROCNV* = proc(): void {.stdcall.}

when defined(macosx):
  type
    GLhandleArb = pointer
else:
  type
    GLhandleArb = uint32

var
  glVersionMajor*: int
  glVersionMinor*: int

proc `==`*(a, b: GLenum): bool {.borrow.}
proc `==`*(a, b: GLbitfield): bool {.borrow.}
proc `or`*(a, b: GLbitfield): GLbitfield {.borrow.}
proc hash*(x: GLenum): int = x.int

# Enums
const
  GL_CURRENT_BIT* = 0x00000001.GLbitfield
  GL_POINT_BIT* = 0x00000002.GLbitfield
  GL_LINE_BIT* = 0x00000004.GLbitfield
  GL_POLYGON_BIT* = 0x00000008.GLbitfield
  GL_POLYGON_STIPPLE_BIT* = 0x00000010.GLbitfield
  GL_PIXEL_MODE_BIT* = 0x00000020.GLbitfield
  GL_LIGHTING_BIT* = 0x00000040.GLbitfield
  GL_FOG_BIT* = 0x00000080.GLbitfield
  GL_DEPTH_BUFFER_BIT* = 0x00000100.GLbitfield
  GL_ACCUM_BUFFER_BIT* = 0x00000200.GLbitfield
  GL_STENCIL_BUFFER_BIT* = 0x00000400.GLbitfield
  GL_VIEWPORT_BIT* = 0x00000800.GLbitfield
  GL_TRANSFORM_BIT* = 0x00001000.GLbitfield
  GL_ENABLE_BIT* = 0x00002000.GLbitfield
  GL_COLOR_BUFFER_BIT* = 0x00004000.GLbitfield
  GL_HINT_BIT* = 0x00008000.GLbitfield
  GL_EVAL_BIT* = 0x00010000.GLbitfield
  GL_LIST_BIT* = 0x00020000.GLbitfield
  GL_TEXTURE_BIT* = 0x00040000.GLbitfield
  GL_SCISSOR_BIT* = 0x00080000.GLbitfield
  GL_MULTISAMPLE_BIT* = 0x20000000.GLbitfield
  GL_MULTISAMPLE_BIT_ARB* = 0x20000000.GLbitfield
  GL_MULTISAMPLE_BIT_EXT* = 0x20000000.GLbitfield
  GL_MULTISAMPLE_BIT_3DFX* = 0x20000000.GLbitfield
  GL_ALL_ATTRIB_BITS* = 0xFFFFFFFF.GLbitfield ## Guaranteed to mark all attribute groups at once
  GL_DYNAMIC_STORAGE_BIT* = 0x0100.GLbitfield
  GL_DYNAMIC_STORAGE_BIT_EXT* = 0x0100.GLbitfield
  GL_CLIENT_STORAGE_BIT* = 0x0200.GLbitfield
  GL_CLIENT_STORAGE_BIT_EXT* = 0x0200.GLbitfield
  GL_SPARSE_STORAGE_BIT_ARB* = 0x0400.GLbitfield
  GL_LGPU_SEPARATE_STORAGE_BIT_NVX* = 0x0800.GLbitfield
  GL_PER_GPU_STORAGE_BIT_NV* = 0x0800.GLbitfield
  GL_EXTERNAL_STORAGE_BIT_NVX* = 0x2000.GLbitfield
  GL_COVERAGE_BUFFER_BIT_NV* = 0x00008000.GLbitfield ## Collides with AttribMask bit GL_HINT_BIT. OK since this token is for OpenGL ES 2, which doesn't have attribute groups.
  GL_CLIENT_PIXEL_STORE_BIT* = 0x00000001.GLbitfield
  GL_CLIENT_VERTEX_ARRAY_BIT* = 0x00000002.GLbitfield
  GL_CLIENT_ALL_ATTRIB_BITS* = 0xFFFFFFFF.GLbitfield
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT* = 0x00000001.GLbitfield
  GL_CONTEXT_FLAG_DEBUG_BIT* = 0x00000002.GLbitfield
  GL_CONTEXT_FLAG_DEBUG_BIT_KHR* = 0x00000002.GLbitfield
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT* = 0x00000004.GLbitfield
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB* = 0x00000004.GLbitfield
  GL_CONTEXT_FLAG_NO_ERROR_BIT* = 0x00000008.GLbitfield
  GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR* = 0x00000008.GLbitfield
  GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT* = 0x00000010.GLbitfield
  GL_CONTEXT_CORE_PROFILE_BIT* = 0x00000001.GLbitfield
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT* = 0x00000002.GLbitfield
  GL_MAP_READ_BIT* = 0x0001.GLbitfield
  GL_MAP_READ_BIT_EXT* = 0x0001.GLbitfield
  GL_MAP_WRITE_BIT* = 0x0002.GLbitfield
  GL_MAP_WRITE_BIT_EXT* = 0x0002.GLbitfield
  GL_MAP_INVALIDATE_RANGE_BIT* = 0x0004.GLbitfield
  GL_MAP_INVALIDATE_RANGE_BIT_EXT* = 0x0004.GLbitfield
  GL_MAP_INVALIDATE_BUFFER_BIT* = 0x0008.GLbitfield
  GL_MAP_INVALIDATE_BUFFER_BIT_EXT* = 0x0008.GLbitfield
  GL_MAP_FLUSH_EXPLICIT_BIT* = 0x0010.GLbitfield
  GL_MAP_FLUSH_EXPLICIT_BIT_EXT* = 0x0010.GLbitfield
  GL_MAP_UNSYNCHRONIZED_BIT* = 0x0020.GLbitfield
  GL_MAP_UNSYNCHRONIZED_BIT_EXT* = 0x0020.GLbitfield
  GL_MAP_PERSISTENT_BIT* = 0x0040.GLbitfield
  GL_MAP_PERSISTENT_BIT_EXT* = 0x0040.GLbitfield
  GL_MAP_COHERENT_BIT* = 0x0080.GLbitfield
  GL_MAP_COHERENT_BIT_EXT* = 0x0080.GLbitfield
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT* = 0x00000001.GLbitfield
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT* = 0x00000001.GLbitfield
  GL_ELEMENT_ARRAY_BARRIER_BIT* = 0x00000002.GLbitfield
  GL_ELEMENT_ARRAY_BARRIER_BIT_EXT* = 0x00000002.GLbitfield
  GL_UNIFORM_BARRIER_BIT* = 0x00000004.GLbitfield
  GL_UNIFORM_BARRIER_BIT_EXT* = 0x00000004.GLbitfield
  GL_TEXTURE_FETCH_BARRIER_BIT* = 0x00000008.GLbitfield
  GL_TEXTURE_FETCH_BARRIER_BIT_EXT* = 0x00000008.GLbitfield
  GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV* = 0x00000010.GLbitfield
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT* = 0x00000020.GLbitfield
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT* = 0x00000020.GLbitfield
  GL_COMMAND_BARRIER_BIT* = 0x00000040.GLbitfield
  GL_COMMAND_BARRIER_BIT_EXT* = 0x00000040.GLbitfield
  GL_PIXEL_BUFFER_BARRIER_BIT* = 0x00000080.GLbitfield
  GL_PIXEL_BUFFER_BARRIER_BIT_EXT* = 0x00000080.GLbitfield
  GL_TEXTURE_UPDATE_BARRIER_BIT* = 0x00000100.GLbitfield
  GL_TEXTURE_UPDATE_BARRIER_BIT_EXT* = 0x00000100.GLbitfield
  GL_BUFFER_UPDATE_BARRIER_BIT* = 0x00000200.GLbitfield
  GL_BUFFER_UPDATE_BARRIER_BIT_EXT* = 0x00000200.GLbitfield
  GL_FRAMEBUFFER_BARRIER_BIT* = 0x00000400.GLbitfield
  GL_FRAMEBUFFER_BARRIER_BIT_EXT* = 0x00000400.GLbitfield
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT* = 0x00000800.GLbitfield
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT* = 0x00000800.GLbitfield
  GL_ATOMIC_COUNTER_BARRIER_BIT* = 0x00001000.GLbitfield
  GL_ATOMIC_COUNTER_BARRIER_BIT_EXT* = 0x00001000.GLbitfield
  GL_SHADER_STORAGE_BARRIER_BIT* = 0x00002000.GLbitfield
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT* = 0x00004000.GLbitfield
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT* = 0x00004000.GLbitfield
  GL_QUERY_BUFFER_BARRIER_BIT* = 0x00008000.GLbitfield
  GL_ALL_BARRIER_BITS* = 0xFFFFFFFF.GLbitfield
  GL_ALL_BARRIER_BITS_EXT* = 0xFFFFFFFF.GLbitfield
  GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD* = 0x00000001.GLbitfield
  GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD* = 0x00000002.GLbitfield
  GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD* = 0x00000004.GLbitfield
  GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD* = 0x00000008.GLbitfield
  GL_QUERY_ALL_EVENT_BITS_AMD* = 0xFFFFFFFF.GLbitfield
  GL_SYNC_FLUSH_COMMANDS_BIT* = 0x00000001.GLbitfield
  GL_SYNC_FLUSH_COMMANDS_BIT_APPLE* = 0x00000001.GLbitfield
  GL_VERTEX_SHADER_BIT* = 0x00000001.GLbitfield
  GL_VERTEX_SHADER_BIT_EXT* = 0x00000001.GLbitfield
  GL_FRAGMENT_SHADER_BIT* = 0x00000002.GLbitfield
  GL_FRAGMENT_SHADER_BIT_EXT* = 0x00000002.GLbitfield
  GL_GEOMETRY_SHADER_BIT* = 0x00000004.GLbitfield
  GL_GEOMETRY_SHADER_BIT_EXT* = 0x00000004.GLbitfield
  GL_GEOMETRY_SHADER_BIT_OES* = 0x00000004.GLbitfield
  GL_TESS_CONTROL_SHADER_BIT* = 0x00000008.GLbitfield
  GL_TESS_CONTROL_SHADER_BIT_EXT* = 0x00000008.GLbitfield
  GL_TESS_CONTROL_SHADER_BIT_OES* = 0x00000008.GLbitfield
  GL_TESS_EVALUATION_SHADER_BIT* = 0x00000010.GLbitfield
  GL_TESS_EVALUATION_SHADER_BIT_EXT* = 0x00000010.GLbitfield
  GL_TESS_EVALUATION_SHADER_BIT_OES* = 0x00000010.GLbitfield
  GL_COMPUTE_SHADER_BIT* = 0x00000020.GLbitfield
  GL_MESH_SHADER_BIT_NV* = 0x00000040.GLbitfield
  GL_TASK_SHADER_BIT_NV* = 0x00000080.GLbitfield
  GL_ALL_SHADER_BITS* = 0xFFFFFFFF.GLbitfield
  GL_ALL_SHADER_BITS_EXT* = 0xFFFFFFFF.GLbitfield
  GL_SUBGROUP_FEATURE_BASIC_BIT_KHR* = 0x00000001.GLbitfield
  GL_SUBGROUP_FEATURE_VOTE_BIT_KHR* = 0x00000002.GLbitfield
  GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR* = 0x00000004.GLbitfield
  GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR* = 0x00000008.GLbitfield
  GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR* = 0x00000010.GLbitfield
  GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR* = 0x00000020.GLbitfield
  GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR* = 0x00000040.GLbitfield
  GL_SUBGROUP_FEATURE_QUAD_BIT_KHR* = 0x00000080.GLbitfield
  GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV* = 0x00000100.GLbitfield
  GL_TEXTURE_STORAGE_SPARSE_BIT_AMD* = 0x00000001.GLbitfield
  GL_RED_BIT_ATI* = 0x00000001.GLbitfield
  GL_GREEN_BIT_ATI* = 0x00000002.GLbitfield
  GL_BLUE_BIT_ATI* = 0x00000004.GLbitfield
  GL_2X_BIT_ATI* = 0x00000001.GLbitfield
  GL_4X_BIT_ATI* = 0x00000002.GLbitfield
  GL_8X_BIT_ATI* = 0x00000004.GLbitfield
  GL_HALF_BIT_ATI* = 0x00000008.GLbitfield
  GL_QUARTER_BIT_ATI* = 0x00000010.GLbitfield
  GL_EIGHTH_BIT_ATI* = 0x00000020.GLbitfield
  GL_SATURATE_BIT_ATI* = 0x00000040.GLbitfield
  GL_COMP_BIT_ATI* = 0x00000002.GLbitfield
  GL_NEGATE_BIT_ATI* = 0x00000004.GLbitfield
  GL_BIAS_BIT_ATI* = 0x00000008.GLbitfield
  GL_TRACE_OPERATIONS_BIT_MESA* = 0x0001.GLbitfield
  GL_TRACE_PRIMITIVES_BIT_MESA* = 0x0002.GLbitfield
  GL_TRACE_ARRAYS_BIT_MESA* = 0x0004.GLbitfield
  GL_TRACE_TEXTURES_BIT_MESA* = 0x0008.GLbitfield
  GL_TRACE_PIXELS_BIT_MESA* = 0x0010.GLbitfield
  GL_TRACE_ERRORS_BIT_MESA* = 0x0020.GLbitfield
  GL_TRACE_ALL_BITS_MESA* = 0xFFFF.GLbitfield
  GL_BOLD_BIT_NV* = 0x01.GLbitfield
  GL_ITALIC_BIT_NV* = 0x02.GLbitfield
  GL_GLYPH_WIDTH_BIT_NV* = 0x01.GLbitfield
  GL_GLYPH_HEIGHT_BIT_NV* = 0x02.GLbitfield
  GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV* = 0x04.GLbitfield
  GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV* = 0x08.GLbitfield
  GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV* = 0x10.GLbitfield
  GL_GLYPH_VERTICAL_BEARING_X_BIT_NV* = 0x20.GLbitfield
  GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV* = 0x40.GLbitfield
  GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV* = 0x80.GLbitfield
  GL_GLYPH_HAS_KERNING_BIT_NV* = 0x100.GLbitfield
  GL_FONT_X_MIN_BOUNDS_BIT_NV* = 0x00010000.GLbitfield
  GL_FONT_Y_MIN_BOUNDS_BIT_NV* = 0x00020000.GLbitfield
  GL_FONT_X_MAX_BOUNDS_BIT_NV* = 0x00040000.GLbitfield
  GL_FONT_Y_MAX_BOUNDS_BIT_NV* = 0x00080000.GLbitfield
  GL_FONT_UNITS_PER_EM_BIT_NV* = 0x00100000.GLbitfield
  GL_FONT_ASCENDER_BIT_NV* = 0x00200000.GLbitfield
  GL_FONT_DESCENDER_BIT_NV* = 0x00400000.GLbitfield
  GL_FONT_HEIGHT_BIT_NV* = 0x00800000.GLbitfield
  GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV* = 0x01000000.GLbitfield
  GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV* = 0x02000000.GLbitfield
  GL_FONT_UNDERLINE_POSITION_BIT_NV* = 0x04000000.GLbitfield
  GL_FONT_UNDERLINE_THICKNESS_BIT_NV* = 0x08000000.GLbitfield
  GL_FONT_HAS_KERNING_BIT_NV* = 0x10000000.GLbitfield
  GL_FONT_NUM_GLYPH_INDICES_BIT_NV* = 0x20000000.GLbitfield
  GL_PERFQUERY_SINGLE_CONTEXT_INTEL* = 0x00000000.GLbitfield
  GL_PERFQUERY_GLOBAL_CONTEXT_INTEL* = 0x00000001.GLbitfield
  GL_VERTEX23_BIT_PGI* = 0x00000004.GLbitfield
  GL_VERTEX4_BIT_PGI* = 0x00000008.GLbitfield
  GL_COLOR3_BIT_PGI* = 0x00010000.GLbitfield
  GL_COLOR4_BIT_PGI* = 0x00020000.GLbitfield
  GL_EDGEFLAG_BIT_PGI* = 0x00040000.GLbitfield
  GL_INDEX_BIT_PGI* = 0x00080000.GLbitfield
  GL_MAT_AMBIENT_BIT_PGI* = 0x00100000.GLbitfield
  GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI* = 0x00200000.GLbitfield
  GL_MAT_DIFFUSE_BIT_PGI* = 0x00400000.GLbitfield
  GL_MAT_EMISSION_BIT_PGI* = 0x00800000.GLbitfield
  GL_MAT_COLOR_INDEXES_BIT_PGI* = 0x01000000.GLbitfield
  GL_MAT_SHININESS_BIT_PGI* = 0x02000000.GLbitfield
  GL_MAT_SPECULAR_BIT_PGI* = 0x04000000.GLbitfield
  GL_NORMAL_BIT_PGI* = 0x08000000.GLbitfield
  GL_TEXCOORD1_BIT_PGI* = 0x10000000.GLbitfield
  GL_TEXCOORD2_BIT_PGI* = 0x20000000.GLbitfield
  GL_TEXCOORD3_BIT_PGI* = 0x40000000.GLbitfield
  GL_TEXCOORD4_BIT_PGI* = 0x80000000.GLbitfield
  GL_COLOR_BUFFER_BIT0_QCOM* = 0x00000001.GLbitfield
  GL_COLOR_BUFFER_BIT1_QCOM* = 0x00000002.GLbitfield
  GL_COLOR_BUFFER_BIT2_QCOM* = 0x00000004.GLbitfield
  GL_COLOR_BUFFER_BIT3_QCOM* = 0x00000008.GLbitfield
  GL_COLOR_BUFFER_BIT4_QCOM* = 0x00000010.GLbitfield
  GL_COLOR_BUFFER_BIT5_QCOM* = 0x00000020.GLbitfield
  GL_COLOR_BUFFER_BIT6_QCOM* = 0x00000040.GLbitfield
  GL_COLOR_BUFFER_BIT7_QCOM* = 0x00000080.GLbitfield
  GL_DEPTH_BUFFER_BIT0_QCOM* = 0x00000100.GLbitfield
  GL_DEPTH_BUFFER_BIT1_QCOM* = 0x00000200.GLbitfield
  GL_DEPTH_BUFFER_BIT2_QCOM* = 0x00000400.GLbitfield
  GL_DEPTH_BUFFER_BIT3_QCOM* = 0x00000800.GLbitfield
  GL_DEPTH_BUFFER_BIT4_QCOM* = 0x00001000.GLbitfield
  GL_DEPTH_BUFFER_BIT5_QCOM* = 0x00002000.GLbitfield
  GL_DEPTH_BUFFER_BIT6_QCOM* = 0x00004000.GLbitfield
  GL_DEPTH_BUFFER_BIT7_QCOM* = 0x00008000.GLbitfield
  GL_STENCIL_BUFFER_BIT0_QCOM* = 0x00010000.GLbitfield
  GL_STENCIL_BUFFER_BIT1_QCOM* = 0x00020000.GLbitfield
  GL_STENCIL_BUFFER_BIT2_QCOM* = 0x00040000.GLbitfield
  GL_STENCIL_BUFFER_BIT3_QCOM* = 0x00080000.GLbitfield
  GL_STENCIL_BUFFER_BIT4_QCOM* = 0x00100000.GLbitfield
  GL_STENCIL_BUFFER_BIT5_QCOM* = 0x00200000.GLbitfield
  GL_STENCIL_BUFFER_BIT6_QCOM* = 0x00400000.GLbitfield
  GL_STENCIL_BUFFER_BIT7_QCOM* = 0x00800000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT0_QCOM* = 0x01000000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT1_QCOM* = 0x02000000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT2_QCOM* = 0x04000000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT3_QCOM* = 0x08000000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT4_QCOM* = 0x10000000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT5_QCOM* = 0x20000000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT6_QCOM* = 0x40000000.GLbitfield
  GL_MULTISAMPLE_BUFFER_BIT7_QCOM* = 0x80000000.GLbitfield
  GL_FOVEATION_ENABLE_BIT_QCOM* = 0x00000001.GLbitfield
  GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM* = 0x00000002.GLbitfield
  GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM* = 0x00000004.GLbitfield
  GL_TEXTURE_DEFORMATION_BIT_SGIX* = 0x00000001.GLbitfield
  GL_GEOMETRY_DEFORMATION_BIT_SGIX* = 0x00000002.GLbitfield
  GL_TERMINATE_SEQUENCE_COMMAND_NV* = 0x0000.GLenum
  GL_NOP_COMMAND_NV* = 0x0001.GLenum
  GL_DRAW_ELEMENTS_COMMAND_NV* = 0x0002.GLenum
  GL_DRAW_ARRAYS_COMMAND_NV* = 0x0003.GLenum
  GL_DRAW_ELEMENTS_STRIP_COMMAND_NV* = 0x0004.GLenum
  GL_DRAW_ARRAYS_STRIP_COMMAND_NV* = 0x0005.GLenum
  GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV* = 0x0006.GLenum
  GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV* = 0x0007.GLenum
  GL_ELEMENT_ADDRESS_COMMAND_NV* = 0x0008.GLenum
  GL_ATTRIBUTE_ADDRESS_COMMAND_NV* = 0x0009.GLenum
  GL_UNIFORM_ADDRESS_COMMAND_NV* = 0x000A.GLenum
  GL_BLEND_COLOR_COMMAND_NV* = 0x000B.GLenum
  GL_STENCIL_REF_COMMAND_NV* = 0x000C.GLenum
  GL_LINE_WIDTH_COMMAND_NV* = 0x000D.GLenum
  GL_POLYGON_OFFSET_COMMAND_NV* = 0x000E.GLenum
  GL_ALPHA_REF_COMMAND_NV* = 0x000F.GLenum
  GL_VIEWPORT_COMMAND_NV* = 0x0010.GLenum
  GL_SCISSOR_COMMAND_NV* = 0x0011.GLenum
  GL_FRONT_FACE_COMMAND_NV* = 0x0012.GLenum
  GL_LAYOUT_DEFAULT_INTEL* = 0.GLenum
  GL_LAYOUT_LINEAR_INTEL* = 1.GLenum
  GL_LAYOUT_LINEAR_CPU_CACHED_INTEL* = 2.GLenum
  GL_CLOSE_PATH_NV* = 0x00.GLenum
  GL_MOVE_TO_NV* = 0x02.GLenum
  GL_RELATIVE_MOVE_TO_NV* = 0x03.GLenum
  GL_LINE_TO_NV* = 0x04.GLenum
  GL_RELATIVE_LINE_TO_NV* = 0x05.GLenum
  GL_HORIZONTAL_LINE_TO_NV* = 0x06.GLenum
  GL_RELATIVE_HORIZONTAL_LINE_TO_NV* = 0x07.GLenum
  GL_VERTICAL_LINE_TO_NV* = 0x08.GLenum
  GL_RELATIVE_VERTICAL_LINE_TO_NV* = 0x09.GLenum
  GL_QUADRATIC_CURVE_TO_NV* = 0x0A.GLenum
  GL_RELATIVE_QUADRATIC_CURVE_TO_NV* = 0x0B.GLenum
  GL_CUBIC_CURVE_TO_NV* = 0x0C.GLenum
  GL_RELATIVE_CUBIC_CURVE_TO_NV* = 0x0D.GLenum
  GL_SMOOTH_QUADRATIC_CURVE_TO_NV* = 0x0E.GLenum
  GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV* = 0x0F.GLenum
  GL_SMOOTH_CUBIC_CURVE_TO_NV* = 0x10.GLenum
  GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV* = 0x11.GLenum
  GL_SMALL_CCW_ARC_TO_NV* = 0x12.GLenum
  GL_RELATIVE_SMALL_CCW_ARC_TO_NV* = 0x13.GLenum
  GL_SMALL_CW_ARC_TO_NV* = 0x14.GLenum
  GL_RELATIVE_SMALL_CW_ARC_TO_NV* = 0x15.GLenum
  GL_LARGE_CCW_ARC_TO_NV* = 0x16.GLenum
  GL_RELATIVE_LARGE_CCW_ARC_TO_NV* = 0x17.GLenum
  GL_LARGE_CW_ARC_TO_NV* = 0x18.GLenum
  GL_RELATIVE_LARGE_CW_ARC_TO_NV* = 0x19.GLenum
  GL_CONIC_CURVE_TO_NV* = 0x1A.GLenum
  GL_RELATIVE_CONIC_CURVE_TO_NV* = 0x1B.GLenum
  GL_SHARED_EDGE_NV* = 0xC0.GLenum
  GL_ROUNDED_RECT_NV* = 0xE8.GLenum
  GL_RELATIVE_ROUNDED_RECT_NV* = 0xE9.GLenum
  GL_ROUNDED_RECT2_NV* = 0xEA.GLenum
  GL_RELATIVE_ROUNDED_RECT2_NV* = 0xEB.GLenum
  GL_ROUNDED_RECT4_NV* = 0xEC.GLenum
  GL_RELATIVE_ROUNDED_RECT4_NV* = 0xED.GLenum
  GL_ROUNDED_RECT8_NV* = 0xEE.GLenum
  GL_RELATIVE_ROUNDED_RECT8_NV* = 0xEF.GLenum
  GL_RESTART_PATH_NV* = 0xF0.GLenum
  GL_DUP_FIRST_CUBIC_CURVE_TO_NV* = 0xF2.GLenum
  GL_DUP_LAST_CUBIC_CURVE_TO_NV* = 0xF4.GLenum
  GL_RECT_NV* = 0xF6.GLenum
  GL_RELATIVE_RECT_NV* = 0xF7.GLenum
  GL_CIRCULAR_CCW_ARC_TO_NV* = 0xF8.GLenum
  GL_CIRCULAR_CW_ARC_TO_NV* = 0xFA.GLenum
  GL_CIRCULAR_TANGENT_ARC_TO_NV* = 0xFC.GLenum
  GL_ARC_TO_NV* = 0xFE.GLenum
  GL_RELATIVE_ARC_TO_NV* = 0xFF.GLenum
  GL_NEXT_BUFFER_NV* = -2
  GL_SKIP_COMPONENTS4_NV* = -3
  GL_SKIP_COMPONENTS3_NV* = -4
  GL_SKIP_COMPONENTS2_NV* = -5
  GL_SKIP_COMPONENTS1_NV* = -6
  GL_RESTART_SUN* = 0x0001.GLenum
  GL_REPLACE_MIDDLE_SUN* = 0x0002.GLenum
  GL_REPLACE_OLDEST_SUN* = 0x0003.GLenum
  GL_FALSE* = 0.GLenum
  GL_NO_ERROR* = 0.GLenum
  GL_ZERO* = 0.GLenum
  GL_NONE* = 0.GLenum
  GL_NONE_OES* = 0.GLenum
  GL_TRUE* = 1.GLenum
  GL_ONE* = 1.GLenum
  GL_INVALID_INDEX* = 0xFFFFFFFF'u32 ## Tagged as uint
  GL_ALL_PIXELS_AMD* = 0xFFFFFFFF.GLenum
  GL_TIMEOUT_IGNORED* = 0xFFFFFFFFFFFFFFFF'u64 ## Tagged as uint64
  GL_TIMEOUT_IGNORED_APPLE* = 0xFFFFFFFFFFFFFFFF'u64 ## Tagged as uint64
  GL_VERSION_ES_CL_1_0* = 1.GLenum ## Not an API enum. API definition macro for ES 1.0/1.1 headers
  GL_VERSION_ES_CM_1_1* = 1.GLenum ## Not an API enum. API definition macro for ES 1.0/1.1 headers
  GL_VERSION_ES_CL_1_1* = 1.GLenum ## Not an API enum. API definition macro for ES 1.0/1.1 headers
  GL_UUID_SIZE_EXT* = 16.GLenum
  GL_LUID_SIZE_EXT* = 8.GLenum
  GL_POINTS* = 0x0000.GLenum
  GL_LINES* = 0x0001.GLenum
  GL_LINE_LOOP* = 0x0002.GLenum
  GL_LINE_STRIP* = 0x0003.GLenum
  GL_TRIANGLES* = 0x0004.GLenum
  GL_TRIANGLE_STRIP* = 0x0005.GLenum
  GL_TRIANGLE_FAN* = 0x0006.GLenum
  GL_QUADS* = 0x0007.GLenum
  GL_QUADS_EXT* = 0x0007.GLenum
  GL_QUADS_OES* = 0x0007.GLenum
  GL_QUAD_STRIP* = 0x0008.GLenum
  GL_POLYGON* = 0x0009.GLenum
  GL_LINES_ADJACENCY* = 0x000A.GLenum
  GL_LINES_ADJACENCY_ARB* = 0x000A.GLenum
  GL_LINES_ADJACENCY_EXT* = 0x000A.GLenum
  GL_LINES_ADJACENCY_OES* = 0x000A.GLenum
  GL_LINE_STRIP_ADJACENCY* = 0x000B.GLenum
  GL_LINE_STRIP_ADJACENCY_ARB* = 0x000B.GLenum
  GL_LINE_STRIP_ADJACENCY_EXT* = 0x000B.GLenum
  GL_LINE_STRIP_ADJACENCY_OES* = 0x000B.GLenum
  GL_TRIANGLES_ADJACENCY* = 0x000C.GLenum
  GL_TRIANGLES_ADJACENCY_ARB* = 0x000C.GLenum
  GL_TRIANGLES_ADJACENCY_EXT* = 0x000C.GLenum
  GL_TRIANGLES_ADJACENCY_OES* = 0x000C.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY* = 0x000D.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY_ARB* = 0x000D.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY_EXT* = 0x000D.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY_OES* = 0x000D.GLenum
  GL_PATCHES* = 0x000E.GLenum
  GL_PATCHES_EXT* = 0x000E.GLenum
  GL_PATCHES_OES* = 0x000E.GLenum
  GL_ACCUM* = 0x0100.GLenum
  GL_LOAD* = 0x0101.GLenum
  GL_RETURN* = 0x0102.GLenum
  GL_MULT* = 0x0103.GLenum
  GL_ADD* = 0x0104.GLenum
  GL_NEVER* = 0x0200.GLenum
  GL_LESS* = 0x0201.GLenum
  GL_EQUAL* = 0x0202.GLenum
  GL_LEQUAL* = 0x0203.GLenum
  GL_GREATER* = 0x0204.GLenum
  GL_NOTEQUAL* = 0x0205.GLenum
  GL_GEQUAL* = 0x0206.GLenum
  GL_ALWAYS* = 0x0207.GLenum
  GL_SRC_COLOR* = 0x0300.GLenum
  GL_ONE_MINUS_SRC_COLOR* = 0x0301.GLenum
  GL_SRC_ALPHA* = 0x0302.GLenum
  GL_ONE_MINUS_SRC_ALPHA* = 0x0303.GLenum
  GL_DST_ALPHA* = 0x0304.GLenum
  GL_ONE_MINUS_DST_ALPHA* = 0x0305.GLenum
  GL_DST_COLOR* = 0x0306.GLenum
  GL_ONE_MINUS_DST_COLOR* = 0x0307.GLenum
  GL_SRC_ALPHA_SATURATE* = 0x0308.GLenum
  GL_SRC_ALPHA_SATURATE_EXT* = 0x0308.GLenum
  GL_FRONT_LEFT* = 0x0400.GLenum
  GL_FRONT_RIGHT* = 0x0401.GLenum
  GL_BACK_LEFT* = 0x0402.GLenum
  GL_BACK_RIGHT* = 0x0403.GLenum
  GL_FRONT* = 0x0404.GLenum
  GL_BACK* = 0x0405.GLenum
  GL_LEFT* = 0x0406.GLenum
  GL_RIGHT* = 0x0407.GLenum
  GL_FRONT_AND_BACK* = 0x0408.GLenum
  GL_AUX0* = 0x0409.GLenum
  GL_AUX1* = 0x040A.GLenum
  GL_AUX2* = 0x040B.GLenum
  GL_AUX3* = 0x040C.GLenum
  GL_INVALID_ENUM* = 0x0500.GLenum
  GL_INVALID_VALUE* = 0x0501.GLenum
  GL_INVALID_OPERATION* = 0x0502.GLenum
  GL_STACK_OVERFLOW* = 0x0503.GLenum
  GL_STACK_OVERFLOW_KHR* = 0x0503.GLenum
  GL_STACK_UNDERFLOW* = 0x0504.GLenum
  GL_STACK_UNDERFLOW_KHR* = 0x0504.GLenum
  GL_OUT_OF_MEMORY* = 0x0505.GLenum
  GL_INVALID_FRAMEBUFFER_OPERATION* = 0x0506.GLenum
  GL_INVALID_FRAMEBUFFER_OPERATION_EXT* = 0x0506.GLenum
  GL_INVALID_FRAMEBUFFER_OPERATION_OES* = 0x0506.GLenum
  GL_CONTEXT_LOST* = 0x0507.GLenum
  GL_CONTEXT_LOST_KHR* = 0x0507.GLenum
  GL_2D* = 0x0600.GLenum
  GL_3D* = 0x0601.GLenum
  GL_3D_COLOR* = 0x0602.GLenum
  GL_3D_COLOR_TEXTURE* = 0x0603.GLenum
  GL_4D_COLOR_TEXTURE* = 0x0604.GLenum
  GL_PASS_THROUGH_TOKEN* = 0x0700.GLenum
  GL_POINT_TOKEN* = 0x0701.GLenum
  GL_LINE_TOKEN* = 0x0702.GLenum
  GL_POLYGON_TOKEN* = 0x0703.GLenum
  GL_BITMAP_TOKEN* = 0x0704.GLenum
  GL_DRAW_PIXEL_TOKEN* = 0x0705.GLenum
  GL_COPY_PIXEL_TOKEN* = 0x0706.GLenum
  GL_LINE_RESET_TOKEN* = 0x0707.GLenum
  GL_EXP* = 0x0800.GLenum
  GL_EXP2* = 0x0801.GLenum
  GL_CW* = 0x0900.GLenum
  GL_CCW* = 0x0901.GLenum
  GL_COEFF* = 0x0A00.GLenum
  GL_ORDER* = 0x0A01.GLenum
  GL_DOMAIN* = 0x0A02.GLenum
  GL_CURRENT_COLOR* = 0x0B00.GLenum
  GL_CURRENT_INDEX* = 0x0B01.GLenum
  GL_CURRENT_NORMAL* = 0x0B02.GLenum
  GL_CURRENT_TEXTURE_COORDS* = 0x0B03.GLenum
  GL_CURRENT_RASTER_COLOR* = 0x0B04.GLenum
  GL_CURRENT_RASTER_INDEX* = 0x0B05.GLenum
  GL_CURRENT_RASTER_TEXTURE_COORDS* = 0x0B06.GLenum
  GL_CURRENT_RASTER_POSITION* = 0x0B07.GLenum
  GL_CURRENT_RASTER_POSITION_VALID* = 0x0B08.GLenum
  GL_CURRENT_RASTER_DISTANCE* = 0x0B09.GLenum
  GL_POINT_SMOOTH* = 0x0B10.GLenum
  GL_POINT_SIZE* = 0x0B11.GLenum
  GL_POINT_SIZE_RANGE* = 0x0B12.GLenum
  GL_SMOOTH_POINT_SIZE_RANGE* = 0x0B12.GLenum
  GL_POINT_SIZE_GRANULARITY* = 0x0B13.GLenum
  GL_SMOOTH_POINT_SIZE_GRANULARITY* = 0x0B13.GLenum
  GL_LINE_SMOOTH* = 0x0B20.GLenum
  GL_LINE_WIDTH* = 0x0B21.GLenum
  GL_LINE_WIDTH_RANGE* = 0x0B22.GLenum
  GL_SMOOTH_LINE_WIDTH_RANGE* = 0x0B22.GLenum
  GL_LINE_WIDTH_GRANULARITY* = 0x0B23.GLenum
  GL_SMOOTH_LINE_WIDTH_GRANULARITY* = 0x0B23.GLenum
  GL_LINE_STIPPLE* = 0x0B24.GLenum
  GL_LINE_STIPPLE_PATTERN* = 0x0B25.GLenum
  GL_LINE_STIPPLE_REPEAT* = 0x0B26.GLenum
  GL_LIST_MODE* = 0x0B30.GLenum
  GL_MAX_LIST_NESTING* = 0x0B31.GLenum
  GL_LIST_BASE* = 0x0B32.GLenum
  GL_LIST_INDEX* = 0x0B33.GLenum
  GL_POLYGON_MODE* = 0x0B40.GLenum
  GL_POLYGON_MODE_NV* = 0x0B40.GLenum
  GL_POLYGON_SMOOTH* = 0x0B41.GLenum
  GL_POLYGON_STIPPLE* = 0x0B42.GLenum
  GL_EDGE_FLAG* = 0x0B43.GLenum
  GL_CULL_FACE* = 0x0B44.GLenum
  GL_CULL_FACE_MODE* = 0x0B45.GLenum
  GL_FRONT_FACE* = 0x0B46.GLenum
  GL_LIGHTING* = 0x0B50.GLenum
  GL_LIGHT_MODEL_LOCAL_VIEWER* = 0x0B51.GLenum
  GL_LIGHT_MODEL_TWO_SIDE* = 0x0B52.GLenum
  GL_LIGHT_MODEL_AMBIENT* = 0x0B53.GLenum
  GL_SHADE_MODEL* = 0x0B54.GLenum
  GL_COLOR_MATERIAL_FACE* = 0x0B55.GLenum
  GL_COLOR_MATERIAL_PARAMETER* = 0x0B56.GLenum
  GL_COLOR_MATERIAL* = 0x0B57.GLenum
  GL_FOG* = 0x0B60.GLenum
  GL_FOG_INDEX* = 0x0B61.GLenum
  GL_FOG_DENSITY* = 0x0B62.GLenum
  GL_FOG_START* = 0x0B63.GLenum
  GL_FOG_END* = 0x0B64.GLenum
  GL_FOG_MODE* = 0x0B65.GLenum
  GL_FOG_COLOR* = 0x0B66.GLenum
  GL_DEPTH_RANGE* = 0x0B70.GLenum
  GL_DEPTH_TEST* = 0x0B71.GLenum
  GL_DEPTH_WRITEMASK* = 0x0B72.GLenum
  GL_DEPTH_CLEAR_VALUE* = 0x0B73.GLenum
  GL_DEPTH_FUNC* = 0x0B74.GLenum
  GL_ACCUM_CLEAR_VALUE* = 0x0B80.GLenum
  GL_STENCIL_TEST* = 0x0B90.GLenum
  GL_STENCIL_CLEAR_VALUE* = 0x0B91.GLenum
  GL_STENCIL_FUNC* = 0x0B92.GLenum
  GL_STENCIL_VALUE_MASK* = 0x0B93.GLenum
  GL_STENCIL_FAIL* = 0x0B94.GLenum
  GL_STENCIL_PASS_DEPTH_FAIL* = 0x0B95.GLenum
  GL_STENCIL_PASS_DEPTH_PASS* = 0x0B96.GLenum
  GL_STENCIL_REF* = 0x0B97.GLenum
  GL_STENCIL_WRITEMASK* = 0x0B98.GLenum
  GL_MATRIX_MODE* = 0x0BA0.GLenum
  GL_NORMALIZE* = 0x0BA1.GLenum
  GL_VIEWPORT* = 0x0BA2.GLenum
  GL_MODELVIEW_STACK_DEPTH* = 0x0BA3.GLenum
  GL_MODELVIEW0_STACK_DEPTH_EXT* = 0x0BA3.GLenum
  GL_PATH_MODELVIEW_STACK_DEPTH_NV* = 0x0BA3.GLenum
  GL_PROJECTION_STACK_DEPTH* = 0x0BA4.GLenum
  GL_PATH_PROJECTION_STACK_DEPTH_NV* = 0x0BA4.GLenum
  GL_TEXTURE_STACK_DEPTH* = 0x0BA5.GLenum
  GL_MODELVIEW_MATRIX* = 0x0BA6.GLenum
  GL_MODELVIEW0_MATRIX_EXT* = 0x0BA6.GLenum
  GL_PATH_MODELVIEW_MATRIX_NV* = 0x0BA6.GLenum
  GL_PROJECTION_MATRIX* = 0x0BA7.GLenum
  GL_PATH_PROJECTION_MATRIX_NV* = 0x0BA7.GLenum
  GL_TEXTURE_MATRIX* = 0x0BA8.GLenum
  GL_ATTRIB_STACK_DEPTH* = 0x0BB0.GLenum
  GL_CLIENT_ATTRIB_STACK_DEPTH* = 0x0BB1.GLenum
  GL_ALPHA_TEST* = 0x0BC0.GLenum
  GL_ALPHA_TEST_QCOM* = 0x0BC0.GLenum
  GL_ALPHA_TEST_FUNC* = 0x0BC1.GLenum
  GL_ALPHA_TEST_FUNC_QCOM* = 0x0BC1.GLenum
  GL_ALPHA_TEST_REF* = 0x0BC2.GLenum
  GL_ALPHA_TEST_REF_QCOM* = 0x0BC2.GLenum
  GL_DITHER* = 0x0BD0.GLenum
  GL_BLEND_DST* = 0x0BE0.GLenum
  GL_BLEND_SRC* = 0x0BE1.GLenum
  GL_BLEND* = 0x0BE2.GLenum
  GL_LOGIC_OP_MODE* = 0x0BF0.GLenum
  GL_INDEX_LOGIC_OP* = 0x0BF1.GLenum
  GL_LOGIC_OP* = 0x0BF1.GLenum
  GL_COLOR_LOGIC_OP* = 0x0BF2.GLenum
  GL_AUX_BUFFERS* = 0x0C00.GLenum
  GL_DRAW_BUFFER* = 0x0C01.GLenum
  GL_DRAW_BUFFER_EXT* = 0x0C01.GLenum
  GL_READ_BUFFER* = 0x0C02.GLenum
  GL_READ_BUFFER_EXT* = 0x0C02.GLenum
  GL_READ_BUFFER_NV* = 0x0C02.GLenum
  GL_SCISSOR_BOX* = 0x0C10.GLenum
  GL_SCISSOR_TEST* = 0x0C11.GLenum
  GL_INDEX_CLEAR_VALUE* = 0x0C20.GLenum
  GL_INDEX_WRITEMASK* = 0x0C21.GLenum
  GL_COLOR_CLEAR_VALUE* = 0x0C22.GLenum
  GL_COLOR_WRITEMASK* = 0x0C23.GLenum
  GL_INDEX_MODE* = 0x0C30.GLenum
  GL_RGBA_MODE* = 0x0C31.GLenum
  GL_DOUBLEBUFFER* = 0x0C32.GLenum
  GL_STEREO* = 0x0C33.GLenum
  GL_RENDER_MODE* = 0x0C40.GLenum
  GL_PERSPECTIVE_CORRECTION_HINT* = 0x0C50.GLenum
  GL_POINT_SMOOTH_HINT* = 0x0C51.GLenum
  GL_LINE_SMOOTH_HINT* = 0x0C52.GLenum
  GL_POLYGON_SMOOTH_HINT* = 0x0C53.GLenum
  GL_FOG_HINT* = 0x0C54.GLenum
  GL_TEXTURE_GEN_S* = 0x0C60.GLenum
  GL_TEXTURE_GEN_T* = 0x0C61.GLenum
  GL_TEXTURE_GEN_R* = 0x0C62.GLenum
  GL_TEXTURE_GEN_Q* = 0x0C63.GLenum
  GL_PIXEL_MAP_I_TO_I* = 0x0C70.GLenum
  GL_PIXEL_MAP_S_TO_S* = 0x0C71.GLenum
  GL_PIXEL_MAP_I_TO_R* = 0x0C72.GLenum
  GL_PIXEL_MAP_I_TO_G* = 0x0C73.GLenum
  GL_PIXEL_MAP_I_TO_B* = 0x0C74.GLenum
  GL_PIXEL_MAP_I_TO_A* = 0x0C75.GLenum
  GL_PIXEL_MAP_R_TO_R* = 0x0C76.GLenum
  GL_PIXEL_MAP_G_TO_G* = 0x0C77.GLenum
  GL_PIXEL_MAP_B_TO_B* = 0x0C78.GLenum
  GL_PIXEL_MAP_A_TO_A* = 0x0C79.GLenum
  GL_PIXEL_MAP_I_TO_I_SIZE* = 0x0CB0.GLenum
  GL_PIXEL_MAP_S_TO_S_SIZE* = 0x0CB1.GLenum
  GL_PIXEL_MAP_I_TO_R_SIZE* = 0x0CB2.GLenum
  GL_PIXEL_MAP_I_TO_G_SIZE* = 0x0CB3.GLenum
  GL_PIXEL_MAP_I_TO_B_SIZE* = 0x0CB4.GLenum
  GL_PIXEL_MAP_I_TO_A_SIZE* = 0x0CB5.GLenum
  GL_PIXEL_MAP_R_TO_R_SIZE* = 0x0CB6.GLenum
  GL_PIXEL_MAP_G_TO_G_SIZE* = 0x0CB7.GLenum
  GL_PIXEL_MAP_B_TO_B_SIZE* = 0x0CB8.GLenum
  GL_PIXEL_MAP_A_TO_A_SIZE* = 0x0CB9.GLenum
  GL_UNPACK_SWAP_BYTES* = 0x0CF0.GLenum
  GL_UNPACK_LSB_FIRST* = 0x0CF1.GLenum
  GL_UNPACK_ROW_LENGTH* = 0x0CF2.GLenum
  GL_UNPACK_ROW_LENGTH_EXT* = 0x0CF2.GLenum
  GL_UNPACK_SKIP_ROWS* = 0x0CF3.GLenum
  GL_UNPACK_SKIP_ROWS_EXT* = 0x0CF3.GLenum
  GL_UNPACK_SKIP_PIXELS* = 0x0CF4.GLenum
  GL_UNPACK_SKIP_PIXELS_EXT* = 0x0CF4.GLenum
  GL_UNPACK_ALIGNMENT* = 0x0CF5.GLenum
  GL_PACK_SWAP_BYTES* = 0x0D00.GLenum
  GL_PACK_LSB_FIRST* = 0x0D01.GLenum
  GL_PACK_ROW_LENGTH* = 0x0D02.GLenum
  GL_PACK_SKIP_ROWS* = 0x0D03.GLenum
  GL_PACK_SKIP_PIXELS* = 0x0D04.GLenum
  GL_PACK_ALIGNMENT* = 0x0D05.GLenum
  GL_MAP_COLOR* = 0x0D10.GLenum
  GL_MAP_STENCIL* = 0x0D11.GLenum
  GL_INDEX_SHIFT* = 0x0D12.GLenum
  GL_INDEX_OFFSET* = 0x0D13.GLenum
  GL_RED_SCALE* = 0x0D14.GLenum
  GL_RED_BIAS* = 0x0D15.GLenum
  GL_ZOOM_X* = 0x0D16.GLenum
  GL_ZOOM_Y* = 0x0D17.GLenum
  GL_GREEN_SCALE* = 0x0D18.GLenum
  GL_GREEN_BIAS* = 0x0D19.GLenum
  GL_BLUE_SCALE* = 0x0D1A.GLenum
  GL_BLUE_BIAS* = 0x0D1B.GLenum
  GL_ALPHA_SCALE* = 0x0D1C.GLenum
  GL_ALPHA_BIAS* = 0x0D1D.GLenum
  GL_DEPTH_SCALE* = 0x0D1E.GLenum
  GL_DEPTH_BIAS* = 0x0D1F.GLenum
  GL_MAX_EVAL_ORDER* = 0x0D30.GLenum
  GL_MAX_LIGHTS* = 0x0D31.GLenum
  GL_MAX_CLIP_PLANES* = 0x0D32.GLenum
  GL_MAX_CLIP_PLANES_IMG* = 0x0D32.GLenum
  GL_MAX_CLIP_DISTANCES* = 0x0D32.GLenum
  GL_MAX_CLIP_DISTANCES_EXT* = 0x0D32.GLenum
  GL_MAX_CLIP_DISTANCES_APPLE* = 0x0D32.GLenum
  GL_MAX_TEXTURE_SIZE* = 0x0D33.GLenum
  GL_MAX_PIXEL_MAP_TABLE* = 0x0D34.GLenum
  GL_MAX_ATTRIB_STACK_DEPTH* = 0x0D35.GLenum
  GL_MAX_MODELVIEW_STACK_DEPTH* = 0x0D36.GLenum
  GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV* = 0x0D36.GLenum
  GL_MAX_NAME_STACK_DEPTH* = 0x0D37.GLenum
  GL_MAX_PROJECTION_STACK_DEPTH* = 0x0D38.GLenum
  GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV* = 0x0D38.GLenum
  GL_MAX_TEXTURE_STACK_DEPTH* = 0x0D39.GLenum
  GL_MAX_VIEWPORT_DIMS* = 0x0D3A.GLenum
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH* = 0x0D3B.GLenum
  GL_SUBPIXEL_BITS* = 0x0D50.GLenum
  GL_INDEX_BITS* = 0x0D51.GLenum
  GL_RED_BITS* = 0x0D52.GLenum
  GL_GREEN_BITS* = 0x0D53.GLenum
  GL_BLUE_BITS* = 0x0D54.GLenum
  GL_ALPHA_BITS* = 0x0D55.GLenum
  GL_DEPTH_BITS* = 0x0D56.GLenum
  GL_STENCIL_BITS* = 0x0D57.GLenum
  GL_ACCUM_RED_BITS* = 0x0D58.GLenum
  GL_ACCUM_GREEN_BITS* = 0x0D59.GLenum
  GL_ACCUM_BLUE_BITS* = 0x0D5A.GLenum
  GL_ACCUM_ALPHA_BITS* = 0x0D5B.GLenum
  GL_NAME_STACK_DEPTH* = 0x0D70.GLenum
  GL_AUTO_NORMAL* = 0x0D80.GLenum
  GL_MAP1_COLOR_4* = 0x0D90.GLenum
  GL_MAP1_INDEX* = 0x0D91.GLenum
  GL_MAP1_NORMAL* = 0x0D92.GLenum
  GL_MAP1_TEXTURE_COORD_1* = 0x0D93.GLenum
  GL_MAP1_TEXTURE_COORD_2* = 0x0D94.GLenum
  GL_MAP1_TEXTURE_COORD_3* = 0x0D95.GLenum
  GL_MAP1_TEXTURE_COORD_4* = 0x0D96.GLenum
  GL_MAP1_VERTEX_3* = 0x0D97.GLenum
  GL_MAP1_VERTEX_4* = 0x0D98.GLenum
  GL_MAP2_COLOR_4* = 0x0DB0.GLenum
  GL_MAP2_INDEX* = 0x0DB1.GLenum
  GL_MAP2_NORMAL* = 0x0DB2.GLenum
  GL_MAP2_TEXTURE_COORD_1* = 0x0DB3.GLenum
  GL_MAP2_TEXTURE_COORD_2* = 0x0DB4.GLenum
  GL_MAP2_TEXTURE_COORD_3* = 0x0DB5.GLenum
  GL_MAP2_TEXTURE_COORD_4* = 0x0DB6.GLenum
  GL_MAP2_VERTEX_3* = 0x0DB7.GLenum
  GL_MAP2_VERTEX_4* = 0x0DB8.GLenum
  GL_MAP1_GRID_DOMAIN* = 0x0DD0.GLenum
  GL_MAP1_GRID_SEGMENTS* = 0x0DD1.GLenum
  GL_MAP2_GRID_DOMAIN* = 0x0DD2.GLenum
  GL_MAP2_GRID_SEGMENTS* = 0x0DD3.GLenum
  GL_TEXTURE_1D* = 0x0DE0.GLenum
  GL_TEXTURE_2D* = 0x0DE1.GLenum
  GL_FEEDBACK_BUFFER_POINTER* = 0x0DF0.GLenum
  GL_FEEDBACK_BUFFER_SIZE* = 0x0DF1.GLenum
  GL_FEEDBACK_BUFFER_TYPE* = 0x0DF2.GLenum
  GL_SELECTION_BUFFER_POINTER* = 0x0DF3.GLenum
  GL_SELECTION_BUFFER_SIZE* = 0x0DF4.GLenum
  GL_TEXTURE_WIDTH* = 0x1000.GLenum
  GL_TEXTURE_HEIGHT* = 0x1001.GLenum
  GL_TEXTURE_INTERNAL_FORMAT* = 0x1003.GLenum
  GL_TEXTURE_COMPONENTS* = 0x1003.GLenum
  GL_TEXTURE_BORDER_COLOR* = 0x1004.GLenum
  GL_TEXTURE_BORDER_COLOR_EXT* = 0x1004.GLenum
  GL_TEXTURE_BORDER_COLOR_NV* = 0x1004.GLenum
  GL_TEXTURE_BORDER_COLOR_OES* = 0x1004.GLenum
  GL_TEXTURE_BORDER* = 0x1005.GLenum
  GL_TEXTURE_TARGET* = 0x1006.GLenum
  GL_DONT_CARE* = 0x1100.GLenum
  GL_FASTEST* = 0x1101.GLenum
  GL_NICEST* = 0x1102.GLenum
  GL_AMBIENT* = 0x1200.GLenum
  GL_DIFFUSE* = 0x1201.GLenum
  GL_SPECULAR* = 0x1202.GLenum
  GL_POSITION* = 0x1203.GLenum
  GL_SPOT_DIRECTION* = 0x1204.GLenum
  GL_SPOT_EXPONENT* = 0x1205.GLenum
  GL_SPOT_CUTOFF* = 0x1206.GLenum
  GL_CONSTANT_ATTENUATION* = 0x1207.GLenum
  GL_LINEAR_ATTENUATION* = 0x1208.GLenum
  GL_QUADRATIC_ATTENUATION* = 0x1209.GLenum
  GL_COMPILE* = 0x1300.GLenum
  GL_COMPILE_AND_EXECUTE* = 0x1301.GLenum
  EGL_BYTE* = 0x1400.GLenum
  GL_UNSIGNED_BYTE* = 0x1401.GLenum
  EGL_SHORT* = 0x1402.GLenum
  GL_UNSIGNED_SHORT* = 0x1403.GLenum
  EGL_INT* = 0x1404.GLenum
  GL_UNSIGNED_INT* = 0x1405.GLenum
  EGL_FLOAT* = 0x1406.GLenum
  GL_2_BYTES* = 0x1407.GLenum
  GL_2_BYTES_NV* = 0x1407.GLenum
  GL_3_BYTES* = 0x1408.GLenum
  GL_3_BYTES_NV* = 0x1408.GLenum
  GL_4_BYTES* = 0x1409.GLenum
  GL_4_BYTES_NV* = 0x1409.GLenum
  EGL_DOUBLE* = 0x140A.GLenum
  GL_DOUBLE_EXT* = 0x140A.GLenum
  GL_HALF_FLOAT* = 0x140B.GLenum
  GL_HALF_FLOAT_ARB* = 0x140B.GLenum
  GL_HALF_FLOAT_NV* = 0x140B.GLenum
  GL_HALF_APPLE* = 0x140B.GLenum
  EGL_FIXED* = 0x140C.GLenum
  GL_FIXED_OES* = 0x140C.GLenum
  GL_INT64_ARB* = 0x140E.GLenum
  GL_INT64_NV* = 0x140E.GLenum
  GL_UNSIGNED_INT64_ARB* = 0x140F.GLenum
  GL_UNSIGNED_INT64_NV* = 0x140F.GLenum
  GL_CLEAR* = 0x1500.GLenum
  GL_AND* = 0x1501.GLenum
  GL_AND_REVERSE* = 0x1502.GLenum
  GL_COPY* = 0x1503.GLenum
  GL_AND_INVERTED* = 0x1504.GLenum
  GL_NOOP* = 0x1505.GLenum
  GL_XOR* = 0x1506.GLenum
  GL_XOR_NV* = 0x1506.GLenum
  GL_OR* = 0x1507.GLenum
  GL_NOR* = 0x1508.GLenum
  GL_EQUIV* = 0x1509.GLenum
  GL_INVERT* = 0x150A.GLenum
  GL_OR_REVERSE* = 0x150B.GLenum
  GL_COPY_INVERTED* = 0x150C.GLenum
  GL_OR_INVERTED* = 0x150D.GLenum
  GL_NAND* = 0x150E.GLenum
  GL_SET* = 0x150F.GLenum
  GL_EMISSION* = 0x1600.GLenum
  GL_SHININESS* = 0x1601.GLenum
  GL_AMBIENT_AND_DIFFUSE* = 0x1602.GLenum
  GL_COLOR_INDEXES* = 0x1603.GLenum
  GL_MODELVIEW* = 0x1700.GLenum
  GL_MODELVIEW0_ARB* = 0x1700.GLenum
  GL_MODELVIEW0_EXT* = 0x1700.GLenum
  GL_PATH_MODELVIEW_NV* = 0x1700.GLenum
  GL_PROJECTION* = 0x1701.GLenum
  GL_PATH_PROJECTION_NV* = 0x1701.GLenum
  GL_TEXTURE* = 0x1702.GLenum
  GL_COLOR* = 0x1800.GLenum
  GL_COLOR_EXT* = 0x1800.GLenum
  GL_DEPTH* = 0x1801.GLenum
  GL_DEPTH_EXT* = 0x1801.GLenum
  GL_STENCIL* = 0x1802.GLenum
  GL_STENCIL_EXT* = 0x1802.GLenum
  GL_COLOR_INDEX* = 0x1900.GLenum
  GL_STENCIL_INDEX* = 0x1901.GLenum
  GL_STENCIL_INDEX_OES* = 0x1901.GLenum
  GL_DEPTH_COMPONENT* = 0x1902.GLenum
  GL_RED* = 0x1903.GLenum
  GL_RED_EXT* = 0x1903.GLenum
  GL_RED_NV* = 0x1903.GLenum
  GL_GREEN* = 0x1904.GLenum
  GL_GREEN_NV* = 0x1904.GLenum
  GL_BLUE* = 0x1905.GLenum
  GL_BLUE_NV* = 0x1905.GLenum
  GL_ALPHA* = 0x1906.GLenum
  GL_RGB* = 0x1907.GLenum
  GL_RGBA* = 0x1908.GLenum
  GL_LUMINANCE* = 0x1909.GLenum
  GL_LUMINANCE_ALPHA* = 0x190A.GLenum
  GL_BITMAP* = 0x1A00.GLenum
  GL_POINT* = 0x1B00.GLenum
  GL_POINT_NV* = 0x1B00.GLenum
  GL_LINE* = 0x1B01.GLenum
  GL_LINE_NV* = 0x1B01.GLenum
  GL_FILL* = 0x1B02.GLenum
  GL_FILL_NV* = 0x1B02.GLenum
  GL_RENDER* = 0x1C00.GLenum
  GL_FEEDBACK* = 0x1C01.GLenum
  GL_SELECT* = 0x1C02.GLenum
  GL_FLAT* = 0x1D00.GLenum
  GL_SMOOTH* = 0x1D01.GLenum
  GL_KEEP* = 0x1E00.GLenum
  GL_REPLACE* = 0x1E01.GLenum
  GL_INCR* = 0x1E02.GLenum
  GL_DECR* = 0x1E03.GLenum
  GL_VENDOR* = 0x1F00.GLenum
  GL_RENDERER* = 0x1F01.GLenum
  GL_VERSION* = 0x1F02.GLenum
  GL_EXTENSIONS* = 0x1F03.GLenum
  GL_S* = 0x2000.GLenum
  GL_T* = 0x2001.GLenum
  GL_R* = 0x2002.GLenum
  GL_Q* = 0x2003.GLenum
  GL_MODULATE* = 0x2100.GLenum
  GL_DECAL* = 0x2101.GLenum
  GL_TEXTURE_ENV_MODE* = 0x2200.GLenum
  GL_TEXTURE_ENV_COLOR* = 0x2201.GLenum
  GL_TEXTURE_ENV* = 0x2300.GLenum
  GL_EYE_LINEAR* = 0x2400.GLenum
  GL_EYE_LINEAR_NV* = 0x2400.GLenum
  GL_OBJECT_LINEAR* = 0x2401.GLenum
  GL_OBJECT_LINEAR_NV* = 0x2401.GLenum
  GL_SPHERE_MAP* = 0x2402.GLenum
  GL_TEXTURE_GEN_MODE* = 0x2500.GLenum
  GL_TEXTURE_GEN_MODE_OES* = 0x2500.GLenum
  GL_OBJECT_PLANE* = 0x2501.GLenum
  GL_EYE_PLANE* = 0x2502.GLenum
  GL_NEAREST* = 0x2600.GLenum
  GL_LINEAR* = 0x2601.GLenum
  GL_NEAREST_MIPMAP_NEAREST* = 0x2700.GLenum
  GL_LINEAR_MIPMAP_NEAREST* = 0x2701.GLenum
  GL_NEAREST_MIPMAP_LINEAR* = 0x2702.GLenum
  GL_LINEAR_MIPMAP_LINEAR* = 0x2703.GLenum
  GL_TEXTURE_MAG_FILTER* = 0x2800.GLenum
  GL_TEXTURE_MIN_FILTER* = 0x2801.GLenum
  GL_TEXTURE_WRAP_S* = 0x2802.GLenum
  GL_TEXTURE_WRAP_T* = 0x2803.GLenum
  GL_CLAMP* = 0x2900.GLenum
  GL_REPEAT* = 0x2901.GLenum
  GL_POLYGON_OFFSET_UNITS* = 0x2A00.GLenum
  GL_POLYGON_OFFSET_POINT* = 0x2A01.GLenum
  GL_POLYGON_OFFSET_POINT_NV* = 0x2A01.GLenum
  GL_POLYGON_OFFSET_LINE* = 0x2A02.GLenum
  GL_POLYGON_OFFSET_LINE_NV* = 0x2A02.GLenum
  GL_R3_G3_B2* = 0x2A10.GLenum
  GL_V2F* = 0x2A20.GLenum
  GL_V3F* = 0x2A21.GLenum
  GL_C4UB_V2F* = 0x2A22.GLenum
  GL_C4UB_V3F* = 0x2A23.GLenum
  GL_C3F_V3F* = 0x2A24.GLenum
  GL_N3F_V3F* = 0x2A25.GLenum
  GL_C4F_N3F_V3F* = 0x2A26.GLenum
  GL_T2F_V3F* = 0x2A27.GLenum
  GL_T4F_V4F* = 0x2A28.GLenum
  GL_T2F_C4UB_V3F* = 0x2A29.GLenum
  GL_T2F_C3F_V3F* = 0x2A2A.GLenum
  GL_T2F_N3F_V3F* = 0x2A2B.GLenum
  GL_T2F_C4F_N3F_V3F* = 0x2A2C.GLenum
  GL_T4F_C4F_N3F_V4F* = 0x2A2D.GLenum
  GL_CLIP_PLANE0* = 0x3000.GLenum
  GL_CLIP_PLANE0_IMG* = 0x3000.GLenum
  GL_CLIP_DISTANCE0* = 0x3000.GLenum
  GL_CLIP_DISTANCE0_EXT* = 0x3000.GLenum
  GL_CLIP_DISTANCE0_APPLE* = 0x3000.GLenum
  GL_CLIP_PLANE1* = 0x3001.GLenum
  GL_CLIP_PLANE1_IMG* = 0x3001.GLenum
  GL_CLIP_DISTANCE1* = 0x3001.GLenum
  GL_CLIP_DISTANCE1_EXT* = 0x3001.GLenum
  GL_CLIP_DISTANCE1_APPLE* = 0x3001.GLenum
  GL_CLIP_PLANE2* = 0x3002.GLenum
  GL_CLIP_PLANE2_IMG* = 0x3002.GLenum
  GL_CLIP_DISTANCE2* = 0x3002.GLenum
  GL_CLIP_DISTANCE2_EXT* = 0x3002.GLenum
  GL_CLIP_DISTANCE2_APPLE* = 0x3002.GLenum
  GL_CLIP_PLANE3* = 0x3003.GLenum
  GL_CLIP_PLANE3_IMG* = 0x3003.GLenum
  GL_CLIP_DISTANCE3* = 0x3003.GLenum
  GL_CLIP_DISTANCE3_EXT* = 0x3003.GLenum
  GL_CLIP_DISTANCE3_APPLE* = 0x3003.GLenum
  GL_CLIP_PLANE4* = 0x3004.GLenum
  GL_CLIP_PLANE4_IMG* = 0x3004.GLenum
  GL_CLIP_DISTANCE4* = 0x3004.GLenum
  GL_CLIP_DISTANCE4_EXT* = 0x3004.GLenum
  GL_CLIP_DISTANCE4_APPLE* = 0x3004.GLenum
  GL_CLIP_PLANE5* = 0x3005.GLenum
  GL_CLIP_PLANE5_IMG* = 0x3005.GLenum
  GL_CLIP_DISTANCE5* = 0x3005.GLenum
  GL_CLIP_DISTANCE5_EXT* = 0x3005.GLenum
  GL_CLIP_DISTANCE5_APPLE* = 0x3005.GLenum
  GL_CLIP_DISTANCE6* = 0x3006.GLenum
  GL_CLIP_DISTANCE6_EXT* = 0x3006.GLenum
  GL_CLIP_DISTANCE6_APPLE* = 0x3006.GLenum
  GL_CLIP_DISTANCE7* = 0x3007.GLenum
  GL_CLIP_DISTANCE7_EXT* = 0x3007.GLenum
  GL_CLIP_DISTANCE7_APPLE* = 0x3007.GLenum
  GL_LIGHT0* = 0x4000.GLenum
  GL_LIGHT1* = 0x4001.GLenum
  GL_LIGHT2* = 0x4002.GLenum
  GL_LIGHT3* = 0x4003.GLenum
  GL_LIGHT4* = 0x4004.GLenum
  GL_LIGHT5* = 0x4005.GLenum
  GL_LIGHT6* = 0x4006.GLenum
  GL_LIGHT7* = 0x4007.GLenum
  GL_ABGR_EXT* = 0x8000.GLenum
  GL_CONSTANT_COLOR* = 0x8001.GLenum
  GL_CONSTANT_COLOR_EXT* = 0x8001.GLenum
  GL_ONE_MINUS_CONSTANT_COLOR* = 0x8002.GLenum
  GL_ONE_MINUS_CONSTANT_COLOR_EXT* = 0x8002.GLenum
  GL_CONSTANT_ALPHA* = 0x8003.GLenum
  GL_CONSTANT_ALPHA_EXT* = 0x8003.GLenum
  GL_ONE_MINUS_CONSTANT_ALPHA* = 0x8004.GLenum
  GL_ONE_MINUS_CONSTANT_ALPHA_EXT* = 0x8004.GLenum
  GL_BLEND_COLOR* = 0x8005.GLenum
  GL_BLEND_COLOR_EXT* = 0x8005.GLenum
  GL_FUNC_ADD* = 0x8006.GLenum
  GL_FUNC_ADD_EXT* = 0x8006.GLenum
  GL_FUNC_ADD_OES* = 0x8006.GLenum
  GL_MIN* = 0x8007.GLenum
  GL_MIN_EXT* = 0x8007.GLenum
  GL_MAX* = 0x8008.GLenum
  GL_MAX_EXT* = 0x8008.GLenum
  GL_BLEND_EQUATION* = 0x8009.GLenum
  GL_BLEND_EQUATION_EXT* = 0x8009.GLenum
  GL_BLEND_EQUATION_OES* = 0x8009.GLenum
  GL_BLEND_EQUATION_RGB* = 0x8009.GLenum
  GL_BLEND_EQUATION_RGB_EXT* = 0x8009.GLenum
  GL_BLEND_EQUATION_RGB_OES* = 0x8009.GLenum
  GL_FUNC_SUBTRACT* = 0x800A.GLenum
  GL_FUNC_SUBTRACT_EXT* = 0x800A.GLenum
  GL_FUNC_SUBTRACT_OES* = 0x800A.GLenum
  GL_FUNC_REVERSE_SUBTRACT* = 0x800B.GLenum
  GL_FUNC_REVERSE_SUBTRACT_EXT* = 0x800B.GLenum
  GL_FUNC_REVERSE_SUBTRACT_OES* = 0x800B.GLenum
  GL_CMYK_EXT* = 0x800C.GLenum
  GL_CMYKA_EXT* = 0x800D.GLenum
  GL_PACK_CMYK_HINT_EXT* = 0x800E.GLenum
  GL_UNPACK_CMYK_HINT_EXT* = 0x800F.GLenum
  GL_CONVOLUTION_1D* = 0x8010.GLenum
  GL_CONVOLUTION_1D_EXT* = 0x8010.GLenum
  GL_CONVOLUTION_2D* = 0x8011.GLenum
  GL_CONVOLUTION_2D_EXT* = 0x8011.GLenum
  GL_SEPARABLE_2D* = 0x8012.GLenum
  GL_SEPARABLE_2D_EXT* = 0x8012.GLenum
  GL_CONVOLUTION_BORDER_MODE* = 0x8013.GLenum
  GL_CONVOLUTION_BORDER_MODE_EXT* = 0x8013.GLenum
  GL_CONVOLUTION_FILTER_SCALE* = 0x8014.GLenum
  GL_CONVOLUTION_FILTER_SCALE_EXT* = 0x8014.GLenum
  GL_CONVOLUTION_FILTER_BIAS* = 0x8015.GLenum
  GL_CONVOLUTION_FILTER_BIAS_EXT* = 0x8015.GLenum
  GL_REDUCE* = 0x8016.GLenum
  GL_REDUCE_EXT* = 0x8016.GLenum
  GL_CONVOLUTION_FORMAT* = 0x8017.GLenum
  GL_CONVOLUTION_FORMAT_EXT* = 0x8017.GLenum
  GL_CONVOLUTION_WIDTH* = 0x8018.GLenum
  GL_CONVOLUTION_WIDTH_EXT* = 0x8018.GLenum
  GL_CONVOLUTION_HEIGHT* = 0x8019.GLenum
  GL_CONVOLUTION_HEIGHT_EXT* = 0x8019.GLenum
  GL_MAX_CONVOLUTION_WIDTH* = 0x801A.GLenum
  GL_MAX_CONVOLUTION_WIDTH_EXT* = 0x801A.GLenum
  GL_MAX_CONVOLUTION_HEIGHT* = 0x801B.GLenum
  GL_MAX_CONVOLUTION_HEIGHT_EXT* = 0x801B.GLenum
  GL_POST_CONVOLUTION_RED_SCALE* = 0x801C.GLenum
  GL_POST_CONVOLUTION_RED_SCALE_EXT* = 0x801C.GLenum
  GL_POST_CONVOLUTION_GREEN_SCALE* = 0x801D.GLenum
  GL_POST_CONVOLUTION_GREEN_SCALE_EXT* = 0x801D.GLenum
  GL_POST_CONVOLUTION_BLUE_SCALE* = 0x801E.GLenum
  GL_POST_CONVOLUTION_BLUE_SCALE_EXT* = 0x801E.GLenum
  GL_POST_CONVOLUTION_ALPHA_SCALE* = 0x801F.GLenum
  GL_POST_CONVOLUTION_ALPHA_SCALE_EXT* = 0x801F.GLenum
  GL_POST_CONVOLUTION_RED_BIAS* = 0x8020.GLenum
  GL_POST_CONVOLUTION_RED_BIAS_EXT* = 0x8020.GLenum
  GL_POST_CONVOLUTION_GREEN_BIAS* = 0x8021.GLenum
  GL_POST_CONVOLUTION_GREEN_BIAS_EXT* = 0x8021.GLenum
  GL_POST_CONVOLUTION_BLUE_BIAS* = 0x8022.GLenum
  GL_POST_CONVOLUTION_BLUE_BIAS_EXT* = 0x8022.GLenum
  GL_POST_CONVOLUTION_ALPHA_BIAS* = 0x8023.GLenum
  GL_POST_CONVOLUTION_ALPHA_BIAS_EXT* = 0x8023.GLenum
  GL_HISTOGRAM* = 0x8024.GLenum
  GL_HISTOGRAM_EXT* = 0x8024.GLenum
  GL_PROXY_HISTOGRAM* = 0x8025.GLenum
  GL_PROXY_HISTOGRAM_EXT* = 0x8025.GLenum
  GL_HISTOGRAM_WIDTH* = 0x8026.GLenum
  GL_HISTOGRAM_WIDTH_EXT* = 0x8026.GLenum
  GL_HISTOGRAM_FORMAT* = 0x8027.GLenum
  GL_HISTOGRAM_FORMAT_EXT* = 0x8027.GLenum
  GL_HISTOGRAM_RED_SIZE* = 0x8028.GLenum
  GL_HISTOGRAM_RED_SIZE_EXT* = 0x8028.GLenum
  GL_HISTOGRAM_GREEN_SIZE* = 0x8029.GLenum
  GL_HISTOGRAM_GREEN_SIZE_EXT* = 0x8029.GLenum
  GL_HISTOGRAM_BLUE_SIZE* = 0x802A.GLenum
  GL_HISTOGRAM_BLUE_SIZE_EXT* = 0x802A.GLenum
  GL_HISTOGRAM_ALPHA_SIZE* = 0x802B.GLenum
  GL_HISTOGRAM_ALPHA_SIZE_EXT* = 0x802B.GLenum
  GL_HISTOGRAM_LUMINANCE_SIZE* = 0x802C.GLenum
  GL_HISTOGRAM_LUMINANCE_SIZE_EXT* = 0x802C.GLenum
  GL_HISTOGRAM_SINK* = 0x802D.GLenum
  GL_HISTOGRAM_SINK_EXT* = 0x802D.GLenum
  GL_MINMAX* = 0x802E.GLenum
  GL_MINMAX_EXT* = 0x802E.GLenum
  GL_MINMAX_FORMAT* = 0x802F.GLenum
  GL_MINMAX_FORMAT_EXT* = 0x802F.GLenum
  GL_MINMAX_SINK* = 0x8030.GLenum
  GL_MINMAX_SINK_EXT* = 0x8030.GLenum
  GL_TABLE_TOO_LARGE_EXT* = 0x8031.GLenum
  GL_TABLE_TOO_LARGE* = 0x8031.GLenum
  GL_UNSIGNED_BYTE_3_3_2* = 0x8032.GLenum
  GL_UNSIGNED_BYTE_3_3_2_EXT* = 0x8032.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4* = 0x8033.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4_EXT* = 0x8033.GLenum
  GL_UNSIGNED_SHORT_5_5_5_1* = 0x8034.GLenum
  GL_UNSIGNED_SHORT_5_5_5_1_EXT* = 0x8034.GLenum
  GL_UNSIGNED_INT_8_8_8_8* = 0x8035.GLenum
  GL_UNSIGNED_INT_8_8_8_8_EXT* = 0x8035.GLenum
  GL_UNSIGNED_INT_10_10_10_2* = 0x8036.GLenum
  GL_UNSIGNED_INT_10_10_10_2_EXT* = 0x8036.GLenum
  GL_POLYGON_OFFSET_EXT* = 0x8037.GLenum
  GL_POLYGON_OFFSET_FILL* = 0x8037.GLenum
  GL_POLYGON_OFFSET_FACTOR* = 0x8038.GLenum
  GL_POLYGON_OFFSET_FACTOR_EXT* = 0x8038.GLenum
  GL_POLYGON_OFFSET_BIAS_EXT* = 0x8039.GLenum
  GL_RESCALE_NORMAL* = 0x803A.GLenum
  GL_RESCALE_NORMAL_EXT* = 0x803A.GLenum
  GL_ALPHA4* = 0x803B.GLenum
  GL_ALPHA4_EXT* = 0x803B.GLenum
  GL_ALPHA8* = 0x803C.GLenum
  GL_ALPHA8_EXT* = 0x803C.GLenum
  GL_ALPHA8_OES* = 0x803C.GLenum
  GL_ALPHA12* = 0x803D.GLenum
  GL_ALPHA12_EXT* = 0x803D.GLenum
  GL_ALPHA16* = 0x803E.GLenum
  GL_ALPHA16_EXT* = 0x803E.GLenum
  GL_LUMINANCE4* = 0x803F.GLenum
  GL_LUMINANCE4_EXT* = 0x803F.GLenum
  GL_LUMINANCE8* = 0x8040.GLenum
  GL_LUMINANCE8_EXT* = 0x8040.GLenum
  GL_LUMINANCE8_OES* = 0x8040.GLenum
  GL_LUMINANCE12* = 0x8041.GLenum
  GL_LUMINANCE12_EXT* = 0x8041.GLenum
  GL_LUMINANCE16* = 0x8042.GLenum
  GL_LUMINANCE16_EXT* = 0x8042.GLenum
  GL_LUMINANCE4_ALPHA4* = 0x8043.GLenum
  GL_LUMINANCE4_ALPHA4_EXT* = 0x8043.GLenum
  GL_LUMINANCE4_ALPHA4_OES* = 0x8043.GLenum
  GL_LUMINANCE6_ALPHA2* = 0x8044.GLenum
  GL_LUMINANCE6_ALPHA2_EXT* = 0x8044.GLenum
  GL_LUMINANCE8_ALPHA8* = 0x8045.GLenum
  GL_LUMINANCE8_ALPHA8_EXT* = 0x8045.GLenum
  GL_LUMINANCE8_ALPHA8_OES* = 0x8045.GLenum
  GL_LUMINANCE12_ALPHA4* = 0x8046.GLenum
  GL_LUMINANCE12_ALPHA4_EXT* = 0x8046.GLenum
  GL_LUMINANCE12_ALPHA12* = 0x8047.GLenum
  GL_LUMINANCE12_ALPHA12_EXT* = 0x8047.GLenum
  GL_LUMINANCE16_ALPHA16* = 0x8048.GLenum
  GL_LUMINANCE16_ALPHA16_EXT* = 0x8048.GLenum
  GL_INTENSITY* = 0x8049.GLenum
  GL_INTENSITY_EXT* = 0x8049.GLenum
  GL_INTENSITY4* = 0x804A.GLenum
  GL_INTENSITY4_EXT* = 0x804A.GLenum
  GL_INTENSITY8* = 0x804B.GLenum
  GL_INTENSITY8_EXT* = 0x804B.GLenum
  GL_INTENSITY12* = 0x804C.GLenum
  GL_INTENSITY12_EXT* = 0x804C.GLenum
  GL_INTENSITY16* = 0x804D.GLenum
  GL_INTENSITY16_EXT* = 0x804D.GLenum
  GL_RGB2_EXT* = 0x804E.GLenum
  GL_RGB4* = 0x804F.GLenum
  GL_RGB4_EXT* = 0x804F.GLenum
  GL_RGB5* = 0x8050.GLenum
  GL_RGB5_EXT* = 0x8050.GLenum
  GL_RGB8* = 0x8051.GLenum
  GL_RGB8_EXT* = 0x8051.GLenum
  GL_RGB8_OES* = 0x8051.GLenum
  GL_RGB10* = 0x8052.GLenum
  GL_RGB10_EXT* = 0x8052.GLenum
  GL_RGB12* = 0x8053.GLenum
  GL_RGB12_EXT* = 0x8053.GLenum
  GL_RGB16* = 0x8054.GLenum
  GL_RGB16_EXT* = 0x8054.GLenum
  GL_RGBA2* = 0x8055.GLenum
  GL_RGBA2_EXT* = 0x8055.GLenum
  GL_RGBA4* = 0x8056.GLenum
  GL_RGBA4_EXT* = 0x8056.GLenum
  GL_RGBA4_OES* = 0x8056.GLenum
  GL_RGB5_A1* = 0x8057.GLenum
  GL_RGB5_A1_EXT* = 0x8057.GLenum
  GL_RGB5_A1_OES* = 0x8057.GLenum
  GL_RGBA8* = 0x8058.GLenum
  GL_RGBA8_EXT* = 0x8058.GLenum
  GL_RGBA8_OES* = 0x8058.GLenum
  GL_RGB10_A2* = 0x8059.GLenum
  GL_RGB10_A2_EXT* = 0x8059.GLenum
  GL_RGBA12* = 0x805A.GLenum
  GL_RGBA12_EXT* = 0x805A.GLenum
  GL_RGBA16* = 0x805B.GLenum
  GL_RGBA16_EXT* = 0x805B.GLenum
  GL_TEXTURE_RED_SIZE* = 0x805C.GLenum
  GL_TEXTURE_RED_SIZE_EXT* = 0x805C.GLenum
  GL_TEXTURE_GREEN_SIZE* = 0x805D.GLenum
  GL_TEXTURE_GREEN_SIZE_EXT* = 0x805D.GLenum
  GL_TEXTURE_BLUE_SIZE* = 0x805E.GLenum
  GL_TEXTURE_BLUE_SIZE_EXT* = 0x805E.GLenum
  GL_TEXTURE_ALPHA_SIZE* = 0x805F.GLenum
  GL_TEXTURE_ALPHA_SIZE_EXT* = 0x805F.GLenum
  GL_TEXTURE_LUMINANCE_SIZE* = 0x8060.GLenum
  GL_TEXTURE_LUMINANCE_SIZE_EXT* = 0x8060.GLenum
  GL_TEXTURE_INTENSITY_SIZE* = 0x8061.GLenum
  GL_TEXTURE_INTENSITY_SIZE_EXT* = 0x8061.GLenum
  GL_REPLACE_EXT* = 0x8062.GLenum
  GL_PROXY_TEXTURE_1D* = 0x8063.GLenum
  GL_PROXY_TEXTURE_1D_EXT* = 0x8063.GLenum
  GL_PROXY_TEXTURE_2D* = 0x8064.GLenum
  GL_PROXY_TEXTURE_2D_EXT* = 0x8064.GLenum
  GL_TEXTURE_TOO_LARGE_EXT* = 0x8065.GLenum
  GL_TEXTURE_PRIORITY* = 0x8066.GLenum
  GL_TEXTURE_PRIORITY_EXT* = 0x8066.GLenum
  GL_TEXTURE_RESIDENT* = 0x8067.GLenum
  GL_TEXTURE_RESIDENT_EXT* = 0x8067.GLenum
  GL_TEXTURE_1D_BINDING_EXT* = 0x8068.GLenum
  GL_TEXTURE_BINDING_1D* = 0x8068.GLenum
  GL_TEXTURE_2D_BINDING_EXT* = 0x8069.GLenum
  GL_TEXTURE_BINDING_2D* = 0x8069.GLenum
  GL_TEXTURE_3D_BINDING_EXT* = 0x806A.GLenum
  GL_TEXTURE_3D_BINDING_OES* = 0x806A.GLenum
  GL_TEXTURE_BINDING_3D* = 0x806A.GLenum
  GL_TEXTURE_BINDING_3D_OES* = 0x806A.GLenum
  GL_PACK_SKIP_IMAGES* = 0x806B.GLenum
  GL_PACK_SKIP_IMAGES_EXT* = 0x806B.GLenum
  GL_PACK_IMAGE_HEIGHT* = 0x806C.GLenum
  GL_PACK_IMAGE_HEIGHT_EXT* = 0x806C.GLenum
  GL_UNPACK_SKIP_IMAGES* = 0x806D.GLenum
  GL_UNPACK_SKIP_IMAGES_EXT* = 0x806D.GLenum
  GL_UNPACK_IMAGE_HEIGHT* = 0x806E.GLenum
  GL_UNPACK_IMAGE_HEIGHT_EXT* = 0x806E.GLenum
  GL_TEXTURE_3D* = 0x806F.GLenum
  GL_TEXTURE_3D_EXT* = 0x806F.GLenum
  GL_TEXTURE_3D_OES* = 0x806F.GLenum
  GL_PROXY_TEXTURE_3D* = 0x8070.GLenum
  GL_PROXY_TEXTURE_3D_EXT* = 0x8070.GLenum
  GL_TEXTURE_DEPTH* = 0x8071.GLenum
  GL_TEXTURE_DEPTH_EXT* = 0x8071.GLenum
  GL_TEXTURE_WRAP_R* = 0x8072.GLenum
  GL_TEXTURE_WRAP_R_EXT* = 0x8072.GLenum
  GL_TEXTURE_WRAP_R_OES* = 0x8072.GLenum
  GL_MAX_3D_TEXTURE_SIZE* = 0x8073.GLenum
  GL_MAX_3D_TEXTURE_SIZE_EXT* = 0x8073.GLenum
  GL_MAX_3D_TEXTURE_SIZE_OES* = 0x8073.GLenum
  GL_VERTEX_ARRAY* = 0x8074.GLenum
  GL_VERTEX_ARRAY_EXT* = 0x8074.GLenum
  GL_VERTEX_ARRAY_KHR* = 0x8074.GLenum
  GL_NORMAL_ARRAY* = 0x8075.GLenum
  GL_NORMAL_ARRAY_EXT* = 0x8075.GLenum
  GL_COLOR_ARRAY* = 0x8076.GLenum
  GL_COLOR_ARRAY_EXT* = 0x8076.GLenum
  GL_INDEX_ARRAY* = 0x8077.GLenum
  GL_INDEX_ARRAY_EXT* = 0x8077.GLenum
  GL_TEXTURE_COORD_ARRAY* = 0x8078.GLenum
  GL_TEXTURE_COORD_ARRAY_EXT* = 0x8078.GLenum
  GL_EDGE_FLAG_ARRAY* = 0x8079.GLenum
  GL_EDGE_FLAG_ARRAY_EXT* = 0x8079.GLenum
  GL_VERTEX_ARRAY_SIZE* = 0x807A.GLenum
  GL_VERTEX_ARRAY_SIZE_EXT* = 0x807A.GLenum
  GL_VERTEX_ARRAY_TYPE* = 0x807B.GLenum
  GL_VERTEX_ARRAY_TYPE_EXT* = 0x807B.GLenum
  GL_VERTEX_ARRAY_STRIDE* = 0x807C.GLenum
  GL_VERTEX_ARRAY_STRIDE_EXT* = 0x807C.GLenum
  GL_VERTEX_ARRAY_COUNT_EXT* = 0x807D.GLenum
  GL_NORMAL_ARRAY_TYPE* = 0x807E.GLenum
  GL_NORMAL_ARRAY_TYPE_EXT* = 0x807E.GLenum
  GL_NORMAL_ARRAY_STRIDE* = 0x807F.GLenum
  GL_NORMAL_ARRAY_STRIDE_EXT* = 0x807F.GLenum
  GL_NORMAL_ARRAY_COUNT_EXT* = 0x8080.GLenum
  GL_COLOR_ARRAY_SIZE* = 0x8081.GLenum
  GL_COLOR_ARRAY_SIZE_EXT* = 0x8081.GLenum
  GL_COLOR_ARRAY_TYPE* = 0x8082.GLenum
  GL_COLOR_ARRAY_TYPE_EXT* = 0x8082.GLenum
  GL_COLOR_ARRAY_STRIDE* = 0x8083.GLenum
  GL_COLOR_ARRAY_STRIDE_EXT* = 0x8083.GLenum
  GL_COLOR_ARRAY_COUNT_EXT* = 0x8084.GLenum
  GL_INDEX_ARRAY_TYPE* = 0x8085.GLenum
  GL_INDEX_ARRAY_TYPE_EXT* = 0x8085.GLenum
  GL_INDEX_ARRAY_STRIDE* = 0x8086.GLenum
  GL_INDEX_ARRAY_STRIDE_EXT* = 0x8086.GLenum
  GL_INDEX_ARRAY_COUNT_EXT* = 0x8087.GLenum
  GL_TEXTURE_COORD_ARRAY_SIZE* = 0x8088.GLenum
  GL_TEXTURE_COORD_ARRAY_SIZE_EXT* = 0x8088.GLenum
  GL_TEXTURE_COORD_ARRAY_TYPE* = 0x8089.GLenum
  GL_TEXTURE_COORD_ARRAY_TYPE_EXT* = 0x8089.GLenum
  GL_TEXTURE_COORD_ARRAY_STRIDE* = 0x808A.GLenum
  GL_TEXTURE_COORD_ARRAY_STRIDE_EXT* = 0x808A.GLenum
  GL_TEXTURE_COORD_ARRAY_COUNT_EXT* = 0x808B.GLenum
  GL_EDGE_FLAG_ARRAY_STRIDE* = 0x808C.GLenum
  GL_EDGE_FLAG_ARRAY_STRIDE_EXT* = 0x808C.GLenum
  GL_EDGE_FLAG_ARRAY_COUNT_EXT* = 0x808D.GLenum
  GL_VERTEX_ARRAY_POINTER* = 0x808E.GLenum
  GL_VERTEX_ARRAY_POINTER_EXT* = 0x808E.GLenum
  GL_NORMAL_ARRAY_POINTER* = 0x808F.GLenum
  GL_NORMAL_ARRAY_POINTER_EXT* = 0x808F.GLenum
  GL_COLOR_ARRAY_POINTER* = 0x8090.GLenum
  GL_COLOR_ARRAY_POINTER_EXT* = 0x8090.GLenum
  GL_INDEX_ARRAY_POINTER* = 0x8091.GLenum
  GL_INDEX_ARRAY_POINTER_EXT* = 0x8091.GLenum
  GL_TEXTURE_COORD_ARRAY_POINTER* = 0x8092.GLenum
  GL_TEXTURE_COORD_ARRAY_POINTER_EXT* = 0x8092.GLenum
  GL_EDGE_FLAG_ARRAY_POINTER* = 0x8093.GLenum
  GL_EDGE_FLAG_ARRAY_POINTER_EXT* = 0x8093.GLenum
  GL_INTERLACE_SGIX* = 0x8094.GLenum
  GL_DETAIL_TEXTURE_2D_SGIS* = 0x8095.GLenum
  GL_DETAIL_TEXTURE_2D_BINDING_SGIS* = 0x8096.GLenum
  GL_LINEAR_DETAIL_SGIS* = 0x8097.GLenum
  GL_LINEAR_DETAIL_ALPHA_SGIS* = 0x8098.GLenum
  GL_LINEAR_DETAIL_COLOR_SGIS* = 0x8099.GLenum
  GL_DETAIL_TEXTURE_LEVEL_SGIS* = 0x809A.GLenum
  GL_DETAIL_TEXTURE_MODE_SGIS* = 0x809B.GLenum
  GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS* = 0x809C.GLenum
  GL_MULTISAMPLE* = 0x809D.GLenum
  GL_MULTISAMPLE_ARB* = 0x809D.GLenum
  GL_MULTISAMPLE_EXT* = 0x809D.GLenum
  GL_MULTISAMPLE_SGIS* = 0x809D.GLenum
  GL_SAMPLE_ALPHA_TO_COVERAGE* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_COVERAGE_ARB* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_MASK_EXT* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_MASK_SGIS* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_ONE* = 0x809F.GLenum
  GL_SAMPLE_ALPHA_TO_ONE_ARB* = 0x809F.GLenum
  GL_SAMPLE_ALPHA_TO_ONE_EXT* = 0x809F.GLenum
  GL_SAMPLE_ALPHA_TO_ONE_SGIS* = 0x809F.GLenum
  GL_SAMPLE_COVERAGE* = 0x80A0.GLenum
  GL_SAMPLE_COVERAGE_ARB* = 0x80A0.GLenum
  GL_SAMPLE_MASK_EXT* = 0x80A0.GLenum
  GL_SAMPLE_MASK_SGIS* = 0x80A0.GLenum
  GL_1PASS_EXT* = 0x80A1.GLenum
  GL_1PASS_SGIS* = 0x80A1.GLenum
  GL_2PASS_0_EXT* = 0x80A2.GLenum
  GL_2PASS_0_SGIS* = 0x80A2.GLenum
  GL_2PASS_1_EXT* = 0x80A3.GLenum
  GL_2PASS_1_SGIS* = 0x80A3.GLenum
  GL_4PASS_0_EXT* = 0x80A4.GLenum
  GL_4PASS_0_SGIS* = 0x80A4.GLenum
  GL_4PASS_1_EXT* = 0x80A5.GLenum
  GL_4PASS_1_SGIS* = 0x80A5.GLenum
  GL_4PASS_2_EXT* = 0x80A6.GLenum
  GL_4PASS_2_SGIS* = 0x80A6.GLenum
  GL_4PASS_3_EXT* = 0x80A7.GLenum
  GL_4PASS_3_SGIS* = 0x80A7.GLenum
  GL_SAMPLE_BUFFERS* = 0x80A8.GLenum
  GL_SAMPLE_BUFFERS_ARB* = 0x80A8.GLenum
  GL_SAMPLE_BUFFERS_EXT* = 0x80A8.GLenum
  GL_SAMPLE_BUFFERS_SGIS* = 0x80A8.GLenum
  GL_SAMPLES* = 0x80A9.GLenum
  GL_SAMPLES_ARB* = 0x80A9.GLenum
  GL_SAMPLES_EXT* = 0x80A9.GLenum
  GL_SAMPLES_SGIS* = 0x80A9.GLenum
  GL_SAMPLE_COVERAGE_VALUE* = 0x80AA.GLenum
  GL_SAMPLE_COVERAGE_VALUE_ARB* = 0x80AA.GLenum
  GL_SAMPLE_MASK_VALUE_EXT* = 0x80AA.GLenum
  GL_SAMPLE_MASK_VALUE_SGIS* = 0x80AA.GLenum
  GL_SAMPLE_COVERAGE_INVERT* = 0x80AB.GLenum
  GL_SAMPLE_COVERAGE_INVERT_ARB* = 0x80AB.GLenum
  GL_SAMPLE_MASK_INVERT_EXT* = 0x80AB.GLenum
  GL_SAMPLE_MASK_INVERT_SGIS* = 0x80AB.GLenum
  GL_SAMPLE_PATTERN_EXT* = 0x80AC.GLenum
  GL_SAMPLE_PATTERN_SGIS* = 0x80AC.GLenum
  GL_LINEAR_SHARPEN_SGIS* = 0x80AD.GLenum
  GL_LINEAR_SHARPEN_ALPHA_SGIS* = 0x80AE.GLenum
  GL_LINEAR_SHARPEN_COLOR_SGIS* = 0x80AF.GLenum
  GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS* = 0x80B0.GLenum
  GL_COLOR_MATRIX* = 0x80B1.GLenum
  GL_COLOR_MATRIX_SGI* = 0x80B1.GLenum
  GL_COLOR_MATRIX_STACK_DEPTH* = 0x80B2.GLenum
  GL_COLOR_MATRIX_STACK_DEPTH_SGI* = 0x80B2.GLenum
  GL_MAX_COLOR_MATRIX_STACK_DEPTH* = 0x80B3.GLenum
  GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI* = 0x80B3.GLenum
  GL_POST_COLOR_MATRIX_RED_SCALE* = 0x80B4.GLenum
  GL_POST_COLOR_MATRIX_RED_SCALE_SGI* = 0x80B4.GLenum
  GL_POST_COLOR_MATRIX_GREEN_SCALE* = 0x80B5.GLenum
  GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI* = 0x80B5.GLenum
  GL_POST_COLOR_MATRIX_BLUE_SCALE* = 0x80B6.GLenum
  GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI* = 0x80B6.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_SCALE* = 0x80B7.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI* = 0x80B7.GLenum
  GL_POST_COLOR_MATRIX_RED_BIAS* = 0x80B8.GLenum
  GL_POST_COLOR_MATRIX_RED_BIAS_SGI* = 0x80B8.GLenum
  GL_POST_COLOR_MATRIX_GREEN_BIAS* = 0x80B9.GLenum
  GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI* = 0x80B9.GLenum
  GL_POST_COLOR_MATRIX_BLUE_BIAS* = 0x80BA.GLenum
  GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI* = 0x80BA.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_BIAS* = 0x80BB.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI* = 0x80BB.GLenum
  GL_TEXTURE_COLOR_TABLE_SGI* = 0x80BC.GLenum
  GL_PROXY_TEXTURE_COLOR_TABLE_SGI* = 0x80BD.GLenum
  GL_TEXTURE_ENV_BIAS_SGIX* = 0x80BE.GLenum
  GL_SHADOW_AMBIENT_SGIX* = 0x80BF.GLenum
  GL_TEXTURE_COMPARE_FAIL_VALUE_ARB* = 0x80BF.GLenum
  GL_BLEND_DST_RGB* = 0x80C8.GLenum
  GL_BLEND_DST_RGB_EXT* = 0x80C8.GLenum
  GL_BLEND_DST_RGB_OES* = 0x80C8.GLenum
  GL_BLEND_SRC_RGB* = 0x80C9.GLenum
  GL_BLEND_SRC_RGB_EXT* = 0x80C9.GLenum
  GL_BLEND_SRC_RGB_OES* = 0x80C9.GLenum
  GL_BLEND_DST_ALPHA* = 0x80CA.GLenum
  GL_BLEND_DST_ALPHA_EXT* = 0x80CA.GLenum
  GL_BLEND_DST_ALPHA_OES* = 0x80CA.GLenum
  GL_BLEND_SRC_ALPHA* = 0x80CB.GLenum
  GL_BLEND_SRC_ALPHA_EXT* = 0x80CB.GLenum
  GL_BLEND_SRC_ALPHA_OES* = 0x80CB.GLenum
  GL_422_EXT* = 0x80CC.GLenum
  GL_422_REV_EXT* = 0x80CD.GLenum
  GL_422_AVERAGE_EXT* = 0x80CE.GLenum
  GL_422_REV_AVERAGE_EXT* = 0x80CF.GLenum
  GL_COLOR_TABLE* = 0x80D0.GLenum
  GL_COLOR_TABLE_SGI* = 0x80D0.GLenum
  GL_POST_CONVOLUTION_COLOR_TABLE* = 0x80D1.GLenum
  GL_POST_CONVOLUTION_COLOR_TABLE_SGI* = 0x80D1.GLenum
  GL_POST_COLOR_MATRIX_COLOR_TABLE* = 0x80D2.GLenum
  GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI* = 0x80D2.GLenum
  GL_PROXY_COLOR_TABLE* = 0x80D3.GLenum
  GL_PROXY_COLOR_TABLE_SGI* = 0x80D3.GLenum
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE* = 0x80D4.GLenum
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI* = 0x80D4.GLenum
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE* = 0x80D5.GLenum
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI* = 0x80D5.GLenum
  GL_COLOR_TABLE_SCALE* = 0x80D6.GLenum
  GL_COLOR_TABLE_SCALE_SGI* = 0x80D6.GLenum
  GL_COLOR_TABLE_BIAS* = 0x80D7.GLenum
  GL_COLOR_TABLE_BIAS_SGI* = 0x80D7.GLenum
  GL_COLOR_TABLE_FORMAT* = 0x80D8.GLenum
  GL_COLOR_TABLE_FORMAT_SGI* = 0x80D8.GLenum
  GL_COLOR_TABLE_WIDTH* = 0x80D9.GLenum
  GL_COLOR_TABLE_WIDTH_SGI* = 0x80D9.GLenum
  GL_COLOR_TABLE_RED_SIZE* = 0x80DA.GLenum
  GL_COLOR_TABLE_RED_SIZE_SGI* = 0x80DA.GLenum
  GL_COLOR_TABLE_GREEN_SIZE* = 0x80DB.GLenum
  GL_COLOR_TABLE_GREEN_SIZE_SGI* = 0x80DB.GLenum
  GL_COLOR_TABLE_BLUE_SIZE* = 0x80DC.GLenum
  GL_COLOR_TABLE_BLUE_SIZE_SGI* = 0x80DC.GLenum
  GL_COLOR_TABLE_ALPHA_SIZE* = 0x80DD.GLenum
  GL_COLOR_TABLE_ALPHA_SIZE_SGI* = 0x80DD.GLenum
  GL_COLOR_TABLE_LUMINANCE_SIZE* = 0x80DE.GLenum
  GL_COLOR_TABLE_LUMINANCE_SIZE_SGI* = 0x80DE.GLenum
  GL_COLOR_TABLE_INTENSITY_SIZE* = 0x80DF.GLenum
  GL_COLOR_TABLE_INTENSITY_SIZE_SGI* = 0x80DF.GLenum
  GL_BGR* = 0x80E0.GLenum
  GL_BGR_EXT* = 0x80E0.GLenum
  GL_BGRA* = 0x80E1.GLenum
  GL_BGRA_EXT* = 0x80E1.GLenum
  GL_BGRA_IMG* = 0x80E1.GLenum
  GL_COLOR_INDEX1_EXT* = 0x80E2.GLenum
  GL_COLOR_INDEX2_EXT* = 0x80E3.GLenum
  GL_COLOR_INDEX4_EXT* = 0x80E4.GLenum
  GL_COLOR_INDEX8_EXT* = 0x80E5.GLenum
  GL_COLOR_INDEX12_EXT* = 0x80E6.GLenum
  GL_COLOR_INDEX16_EXT* = 0x80E7.GLenum
  GL_MAX_ELEMENTS_VERTICES* = 0x80E8.GLenum
  GL_MAX_ELEMENTS_VERTICES_EXT* = 0x80E8.GLenum
  GL_MAX_ELEMENTS_INDICES* = 0x80E9.GLenum
  GL_MAX_ELEMENTS_INDICES_EXT* = 0x80E9.GLenum
  GL_PHONG_WIN* = 0x80EA.GLenum
  GL_PHONG_HINT_WIN* = 0x80EB.GLenum
  GL_FOG_SPECULAR_TEXTURE_WIN* = 0x80EC.GLenum
  GL_TEXTURE_INDEX_SIZE_EXT* = 0x80ED.GLenum
  GL_PARAMETER_BUFFER* = 0x80EE.GLenum
  GL_PARAMETER_BUFFER_ARB* = 0x80EE.GLenum
  GL_PARAMETER_BUFFER_BINDING* = 0x80EF.GLenum
  GL_PARAMETER_BUFFER_BINDING_ARB* = 0x80EF.GLenum
  GL_CLIP_VOLUME_CLIPPING_HINT_EXT* = 0x80F0.GLenum
  GL_DUAL_ALPHA4_SGIS* = 0x8110.GLenum
  GL_DUAL_ALPHA8_SGIS* = 0x8111.GLenum
  GL_DUAL_ALPHA12_SGIS* = 0x8112.GLenum
  GL_DUAL_ALPHA16_SGIS* = 0x8113.GLenum
  GL_DUAL_LUMINANCE4_SGIS* = 0x8114.GLenum
  GL_DUAL_LUMINANCE8_SGIS* = 0x8115.GLenum
  GL_DUAL_LUMINANCE12_SGIS* = 0x8116.GLenum
  GL_DUAL_LUMINANCE16_SGIS* = 0x8117.GLenum
  GL_DUAL_INTENSITY4_SGIS* = 0x8118.GLenum
  GL_DUAL_INTENSITY8_SGIS* = 0x8119.GLenum
  GL_DUAL_INTENSITY12_SGIS* = 0x811A.GLenum
  GL_DUAL_INTENSITY16_SGIS* = 0x811B.GLenum
  GL_DUAL_LUMINANCE_ALPHA4_SGIS* = 0x811C.GLenum
  GL_DUAL_LUMINANCE_ALPHA8_SGIS* = 0x811D.GLenum
  GL_QUAD_ALPHA4_SGIS* = 0x811E.GLenum
  GL_QUAD_ALPHA8_SGIS* = 0x811F.GLenum
  GL_QUAD_LUMINANCE4_SGIS* = 0x8120.GLenum
  GL_QUAD_LUMINANCE8_SGIS* = 0x8121.GLenum
  GL_QUAD_INTENSITY4_SGIS* = 0x8122.GLenum
  GL_QUAD_INTENSITY8_SGIS* = 0x8123.GLenum
  GL_DUAL_TEXTURE_SELECT_SGIS* = 0x8124.GLenum
  GL_QUAD_TEXTURE_SELECT_SGIS* = 0x8125.GLenum
  GL_POINT_SIZE_MIN* = 0x8126.GLenum
  GL_POINT_SIZE_MIN_ARB* = 0x8126.GLenum
  GL_POINT_SIZE_MIN_EXT* = 0x8126.GLenum
  GL_POINT_SIZE_MIN_SGIS* = 0x8126.GLenum
  GL_POINT_SIZE_MAX* = 0x8127.GLenum
  GL_POINT_SIZE_MAX_ARB* = 0x8127.GLenum
  GL_POINT_SIZE_MAX_EXT* = 0x8127.GLenum
  GL_POINT_SIZE_MAX_SGIS* = 0x8127.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE* = 0x8128.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE_ARB* = 0x8128.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE_EXT* = 0x8128.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE_SGIS* = 0x8128.GLenum
  GL_DISTANCE_ATTENUATION_EXT* = 0x8129.GLenum
  GL_DISTANCE_ATTENUATION_SGIS* = 0x8129.GLenum
  GL_POINT_DISTANCE_ATTENUATION* = 0x8129.GLenum
  GL_POINT_DISTANCE_ATTENUATION_ARB* = 0x8129.GLenum
  GL_FOG_FUNC_SGIS* = 0x812A.GLenum
  GL_FOG_FUNC_POINTS_SGIS* = 0x812B.GLenum
  GL_MAX_FOG_FUNC_POINTS_SGIS* = 0x812C.GLenum
  GL_CLAMP_TO_BORDER* = 0x812D.GLenum
  GL_CLAMP_TO_BORDER_ARB* = 0x812D.GLenum
  GL_CLAMP_TO_BORDER_EXT* = 0x812D.GLenum
  GL_CLAMP_TO_BORDER_NV* = 0x812D.GLenum
  GL_CLAMP_TO_BORDER_SGIS* = 0x812D.GLenum
  GL_CLAMP_TO_BORDER_OES* = 0x812D.GLenum
  GL_TEXTURE_MULTI_BUFFER_HINT_SGIX* = 0x812E.GLenum
  GL_CLAMP_TO_EDGE* = 0x812F.GLenum
  GL_CLAMP_TO_EDGE_SGIS* = 0x812F.GLenum
  GL_PACK_SKIP_VOLUMES_SGIS* = 0x8130.GLenum
  GL_PACK_IMAGE_DEPTH_SGIS* = 0x8131.GLenum
  GL_UNPACK_SKIP_VOLUMES_SGIS* = 0x8132.GLenum
  GL_UNPACK_IMAGE_DEPTH_SGIS* = 0x8133.GLenum
  GL_TEXTURE_4D_SGIS* = 0x8134.GLenum
  GL_PROXY_TEXTURE_4D_SGIS* = 0x8135.GLenum
  GL_TEXTURE_4DSIZE_SGIS* = 0x8136.GLenum
  GL_TEXTURE_WRAP_Q_SGIS* = 0x8137.GLenum
  GL_MAX_4D_TEXTURE_SIZE_SGIS* = 0x8138.GLenum
  GL_PIXEL_TEX_GEN_SGIX* = 0x8139.GLenum
  GL_TEXTURE_MIN_LOD* = 0x813A.GLenum
  GL_TEXTURE_MIN_LOD_SGIS* = 0x813A.GLenum
  GL_TEXTURE_MAX_LOD* = 0x813B.GLenum
  GL_TEXTURE_MAX_LOD_SGIS* = 0x813B.GLenum
  GL_TEXTURE_BASE_LEVEL* = 0x813C.GLenum
  GL_TEXTURE_BASE_LEVEL_SGIS* = 0x813C.GLenum
  GL_TEXTURE_MAX_LEVEL* = 0x813D.GLenum
  GL_TEXTURE_MAX_LEVEL_APPLE* = 0x813D.GLenum
  GL_TEXTURE_MAX_LEVEL_SGIS* = 0x813D.GLenum
  GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX* = 0x813E.GLenum
  GL_PIXEL_TILE_CACHE_INCREMENT_SGIX* = 0x813F.GLenum
  GL_PIXEL_TILE_WIDTH_SGIX* = 0x8140.GLenum
  GL_PIXEL_TILE_HEIGHT_SGIX* = 0x8141.GLenum
  GL_PIXEL_TILE_GRID_WIDTH_SGIX* = 0x8142.GLenum
  GL_PIXEL_TILE_GRID_HEIGHT_SGIX* = 0x8143.GLenum
  GL_PIXEL_TILE_GRID_DEPTH_SGIX* = 0x8144.GLenum
  GL_PIXEL_TILE_CACHE_SIZE_SGIX* = 0x8145.GLenum
  GL_FILTER4_SGIS* = 0x8146.GLenum
  GL_TEXTURE_FILTER4_SIZE_SGIS* = 0x8147.GLenum
  GL_SPRITE_SGIX* = 0x8148.GLenum
  GL_SPRITE_MODE_SGIX* = 0x8149.GLenum
  GL_SPRITE_AXIS_SGIX* = 0x814A.GLenum
  GL_SPRITE_TRANSLATION_SGIX* = 0x814B.GLenum
  GL_SPRITE_AXIAL_SGIX* = 0x814C.GLenum
  GL_SPRITE_OBJECT_ALIGNED_SGIX* = 0x814D.GLenum
  GL_SPRITE_EYE_ALIGNED_SGIX* = 0x814E.GLenum
  GL_TEXTURE_4D_BINDING_SGIS* = 0x814F.GLenum
  GL_IGNORE_BORDER_HP* = 0x8150.GLenum
  GL_CONSTANT_BORDER* = 0x8151.GLenum
  GL_CONSTANT_BORDER_HP* = 0x8151.GLenum
  GL_REPLICATE_BORDER* = 0x8153.GLenum
  GL_REPLICATE_BORDER_HP* = 0x8153.GLenum
  GL_CONVOLUTION_BORDER_COLOR* = 0x8154.GLenum
  GL_CONVOLUTION_BORDER_COLOR_HP* = 0x8154.GLenum
  GL_IMAGE_SCALE_X_HP* = 0x8155.GLenum
  GL_IMAGE_SCALE_Y_HP* = 0x8156.GLenum
  GL_IMAGE_TRANSLATE_X_HP* = 0x8157.GLenum
  GL_IMAGE_TRANSLATE_Y_HP* = 0x8158.GLenum
  GL_IMAGE_ROTATE_ANGLE_HP* = 0x8159.GLenum
  GL_IMAGE_ROTATE_ORIGIN_X_HP* = 0x815A.GLenum
  GL_IMAGE_ROTATE_ORIGIN_Y_HP* = 0x815B.GLenum
  GL_IMAGE_MAG_FILTER_HP* = 0x815C.GLenum
  GL_IMAGE_MIN_FILTER_HP* = 0x815D.GLenum
  GL_IMAGE_CUBIC_WEIGHT_HP* = 0x815E.GLenum
  GL_CUBIC_HP* = 0x815F.GLenum
  GL_AVERAGE_HP* = 0x8160.GLenum
  GL_IMAGE_TRANSFORM_2D_HP* = 0x8161.GLenum
  GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP* = 0x8162.GLenum
  GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP* = 0x8163.GLenum
  GL_OCCLUSION_TEST_HP* = 0x8165.GLenum
  GL_OCCLUSION_TEST_RESULT_HP* = 0x8166.GLenum
  GL_TEXTURE_LIGHTING_MODE_HP* = 0x8167.GLenum
  GL_TEXTURE_POST_SPECULAR_HP* = 0x8168.GLenum
  GL_TEXTURE_PRE_SPECULAR_HP* = 0x8169.GLenum
  GL_LINEAR_CLIPMAP_LINEAR_SGIX* = 0x8170.GLenum
  GL_TEXTURE_CLIPMAP_CENTER_SGIX* = 0x8171.GLenum
  GL_TEXTURE_CLIPMAP_FRAME_SGIX* = 0x8172.GLenum
  GL_TEXTURE_CLIPMAP_OFFSET_SGIX* = 0x8173.GLenum
  GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX* = 0x8174.GLenum
  GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX* = 0x8175.GLenum
  GL_TEXTURE_CLIPMAP_DEPTH_SGIX* = 0x8176.GLenum
  GL_MAX_CLIPMAP_DEPTH_SGIX* = 0x8177.GLenum
  GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX* = 0x8178.GLenum
  GL_POST_TEXTURE_FILTER_BIAS_SGIX* = 0x8179.GLenum
  GL_POST_TEXTURE_FILTER_SCALE_SGIX* = 0x817A.GLenum
  GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX* = 0x817B.GLenum
  GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX* = 0x817C.GLenum
  GL_REFERENCE_PLANE_SGIX* = 0x817D.GLenum
  GL_REFERENCE_PLANE_EQUATION_SGIX* = 0x817E.GLenum
  GL_IR_INSTRUMENT1_SGIX* = 0x817F.GLenum
  GL_INSTRUMENT_BUFFER_POINTER_SGIX* = 0x8180.GLenum
  GL_INSTRUMENT_MEASUREMENTS_SGIX* = 0x8181.GLenum
  GL_LIST_PRIORITY_SGIX* = 0x8182.GLenum
  GL_CALLIGRAPHIC_FRAGMENT_SGIX* = 0x8183.GLenum
  GL_PIXEL_TEX_GEN_Q_CEILING_SGIX* = 0x8184.GLenum
  GL_PIXEL_TEX_GEN_Q_ROUND_SGIX* = 0x8185.GLenum
  GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX* = 0x8186.GLenum
  GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX* = 0x8187.GLenum
  GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX* = 0x8188.GLenum
  GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX* = 0x8189.GLenum
  GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX* = 0x818A.GLenum
  GL_FRAMEZOOM_SGIX* = 0x818B.GLenum
  GL_FRAMEZOOM_FACTOR_SGIX* = 0x818C.GLenum
  GL_MAX_FRAMEZOOM_FACTOR_SGIX* = 0x818D.GLenum
  GL_TEXTURE_LOD_BIAS_S_SGIX* = 0x818E.GLenum
  GL_TEXTURE_LOD_BIAS_T_SGIX* = 0x818F.GLenum
  GL_TEXTURE_LOD_BIAS_R_SGIX* = 0x8190.GLenum
  GL_GENERATE_MIPMAP* = 0x8191.GLenum
  GL_GENERATE_MIPMAP_SGIS* = 0x8191.GLenum
  GL_GENERATE_MIPMAP_HINT* = 0x8192.GLenum
  GL_GENERATE_MIPMAP_HINT_SGIS* = 0x8192.GLenum
  GL_GEOMETRY_DEFORMATION_SGIX* = 0x8194.GLenum
  GL_TEXTURE_DEFORMATION_SGIX* = 0x8195.GLenum
  GL_DEFORMATIONS_MASK_SGIX* = 0x8196.GLenum
  GL_MAX_DEFORMATION_ORDER_SGIX* = 0x8197.GLenum
  GL_FOG_OFFSET_SGIX* = 0x8198.GLenum
  GL_FOG_OFFSET_VALUE_SGIX* = 0x8199.GLenum
  GL_TEXTURE_COMPARE_SGIX* = 0x819A.GLenum
  GL_TEXTURE_COMPARE_OPERATOR_SGIX* = 0x819B.GLenum
  GL_TEXTURE_LEQUAL_R_SGIX* = 0x819C.GLenum
  GL_TEXTURE_GEQUAL_R_SGIX* = 0x819D.GLenum
  GL_DEPTH_COMPONENT16* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT16_ARB* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT16_OES* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT16_SGIX* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT24* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT24_ARB* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT24_OES* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT24_SGIX* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT32* = 0x81A7.GLenum
  GL_DEPTH_COMPONENT32_ARB* = 0x81A7.GLenum
  GL_DEPTH_COMPONENT32_OES* = 0x81A7.GLenum
  GL_DEPTH_COMPONENT32_SGIX* = 0x81A7.GLenum
  GL_ARRAY_ELEMENT_LOCK_FIRST_EXT* = 0x81A8.GLenum
  GL_ARRAY_ELEMENT_LOCK_COUNT_EXT* = 0x81A9.GLenum
  GL_CULL_VERTEX_EXT* = 0x81AA.GLenum
  GL_CULL_VERTEX_EYE_POSITION_EXT* = 0x81AB.GLenum
  GL_CULL_VERTEX_OBJECT_POSITION_EXT* = 0x81AC.GLenum
  GL_IUI_V2F_EXT* = 0x81AD.GLenum
  GL_IUI_V3F_EXT* = 0x81AE.GLenum
  GL_IUI_N3F_V2F_EXT* = 0x81AF.GLenum
  GL_IUI_N3F_V3F_EXT* = 0x81B0.GLenum
  GL_T2F_IUI_V2F_EXT* = 0x81B1.GLenum
  GL_T2F_IUI_V3F_EXT* = 0x81B2.GLenum
  GL_T2F_IUI_N3F_V2F_EXT* = 0x81B3.GLenum
  GL_T2F_IUI_N3F_V3F_EXT* = 0x81B4.GLenum
  GL_INDEX_TEST_EXT* = 0x81B5.GLenum
  GL_INDEX_TEST_FUNC_EXT* = 0x81B6.GLenum
  GL_INDEX_TEST_REF_EXT* = 0x81B7.GLenum
  GL_INDEX_MATERIAL_EXT* = 0x81B8.GLenum
  GL_INDEX_MATERIAL_PARAMETER_EXT* = 0x81B9.GLenum
  GL_INDEX_MATERIAL_FACE_EXT* = 0x81BA.GLenum
  GL_YCRCB_422_SGIX* = 0x81BB.GLenum
  GL_YCRCB_444_SGIX* = 0x81BC.GLenum
  GL_WRAP_BORDER_SUN* = 0x81D4.GLenum
  GL_UNPACK_CONSTANT_DATA_SUNX* = 0x81D5.GLenum
  GL_TEXTURE_CONSTANT_DATA_SUNX* = 0x81D6.GLenum
  GL_TRIANGLE_LIST_SUN* = 0x81D7.GLenum
  GL_REPLACEMENT_CODE_SUN* = 0x81D8.GLenum
  GL_GLOBAL_ALPHA_SUN* = 0x81D9.GLenum
  GL_GLOBAL_ALPHA_FACTOR_SUN* = 0x81DA.GLenum
  GL_TEXTURE_COLOR_WRITEMASK_SGIS* = 0x81EF.GLenum
  GL_EYE_DISTANCE_TO_POINT_SGIS* = 0x81F0.GLenum
  GL_OBJECT_DISTANCE_TO_POINT_SGIS* = 0x81F1.GLenum
  GL_EYE_DISTANCE_TO_LINE_SGIS* = 0x81F2.GLenum
  GL_OBJECT_DISTANCE_TO_LINE_SGIS* = 0x81F3.GLenum
  GL_EYE_POINT_SGIS* = 0x81F4.GLenum
  GL_OBJECT_POINT_SGIS* = 0x81F5.GLenum
  GL_EYE_LINE_SGIS* = 0x81F6.GLenum
  GL_OBJECT_LINE_SGIS* = 0x81F7.GLenum
  GL_LIGHT_MODEL_COLOR_CONTROL* = 0x81F8.GLenum
  GL_LIGHT_MODEL_COLOR_CONTROL_EXT* = 0x81F8.GLenum
  GL_SINGLE_COLOR* = 0x81F9.GLenum
  GL_SINGLE_COLOR_EXT* = 0x81F9.GLenum
  GL_SEPARATE_SPECULAR_COLOR* = 0x81FA.GLenum
  GL_SEPARATE_SPECULAR_COLOR_EXT* = 0x81FA.GLenum
  GL_SHARED_TEXTURE_PALETTE_EXT* = 0x81FB.GLenum
  GL_TEXT_FRAGMENT_SHADER_ATI* = 0x8200.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING* = 0x8210.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT* = 0x8210.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE* = 0x8211.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT* = 0x8211.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE* = 0x8212.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE* = 0x8213.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE* = 0x8214.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE* = 0x8215.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE* = 0x8216.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE* = 0x8217.GLenum
  GL_FRAMEBUFFER_DEFAULT* = 0x8218.GLenum
  GL_FRAMEBUFFER_UNDEFINED* = 0x8219.GLenum
  GL_FRAMEBUFFER_UNDEFINED_OES* = 0x8219.GLenum
  GL_DEPTH_STENCIL_ATTACHMENT* = 0x821A.GLenum
  GL_MAJOR_VERSION* = 0x821B.GLenum
  GL_MINOR_VERSION* = 0x821C.GLenum
  GL_NUM_EXTENSIONS* = 0x821D.GLenum
  GL_CONTEXT_FLAGS* = 0x821E.GLenum
  GL_BUFFER_IMMUTABLE_STORAGE* = 0x821F.GLenum
  GL_BUFFER_IMMUTABLE_STORAGE_EXT* = 0x821F.GLenum
  GL_BUFFER_STORAGE_FLAGS* = 0x8220.GLenum
  GL_BUFFER_STORAGE_FLAGS_EXT* = 0x8220.GLenum
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED* = 0x8221.GLenum
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES* = 0x8221.GLenum
  GL_INDEX* = 0x8222.GLenum
  GL_COMPRESSED_RED* = 0x8225.GLenum
  GL_COMPRESSED_RG* = 0x8226.GLenum
  GL_RG* = 0x8227.GLenum
  GL_RG_EXT* = 0x8227.GLenum
  GL_RG_INTEGER* = 0x8228.GLenum
  GL_R8* = 0x8229.GLenum
  GL_R8_EXT* = 0x8229.GLenum
  GL_R16* = 0x822A.GLenum
  GL_R16_EXT* = 0x822A.GLenum
  GL_RG8* = 0x822B.GLenum
  GL_RG8_EXT* = 0x822B.GLenum
  GL_RG16* = 0x822C.GLenum
  GL_RG16_EXT* = 0x822C.GLenum
  GL_R16F* = 0x822D.GLenum
  GL_R16F_EXT* = 0x822D.GLenum
  GL_R32F* = 0x822E.GLenum
  GL_R32F_EXT* = 0x822E.GLenum
  GL_RG16F* = 0x822F.GLenum
  GL_RG16F_EXT* = 0x822F.GLenum
  GL_RG32F* = 0x8230.GLenum
  GL_RG32F_EXT* = 0x8230.GLenum
  GL_R8I* = 0x8231.GLenum
  GL_R8UI* = 0x8232.GLenum
  GL_R16I* = 0x8233.GLenum
  GL_R16UI* = 0x8234.GLenum
  GL_R32I* = 0x8235.GLenum
  GL_R32UI* = 0x8236.GLenum
  GL_RG8I* = 0x8237.GLenum
  GL_RG8UI* = 0x8238.GLenum
  GL_RG16I* = 0x8239.GLenum
  GL_RG16UI* = 0x823A.GLenum
  GL_RG32I* = 0x823B.GLenum
  GL_RG32UI* = 0x823C.GLenum
  GL_SYNC_CL_EVENT_ARB* = 0x8240.GLenum
  GL_SYNC_CL_EVENT_COMPLETE_ARB* = 0x8241.GLenum
  GL_DEBUG_OUTPUT_SYNCHRONOUS* = 0x8242.GLenum
  GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB* = 0x8242.GLenum
  GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR* = 0x8242.GLenum
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH* = 0x8243.GLenum
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB* = 0x8243.GLenum
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR* = 0x8243.GLenum
  GL_DEBUG_CALLBACK_FUNCTION* = 0x8244.GLenum
  GL_DEBUG_CALLBACK_FUNCTION_ARB* = 0x8244.GLenum
  GL_DEBUG_CALLBACK_FUNCTION_KHR* = 0x8244.GLenum
  GL_DEBUG_CALLBACK_USER_PARAM* = 0x8245.GLenum
  GL_DEBUG_CALLBACK_USER_PARAM_ARB* = 0x8245.GLenum
  GL_DEBUG_CALLBACK_USER_PARAM_KHR* = 0x8245.GLenum
  GL_DEBUG_SOURCE_API* = 0x8246.GLenum
  GL_DEBUG_SOURCE_API_ARB* = 0x8246.GLenum
  GL_DEBUG_SOURCE_API_KHR* = 0x8246.GLenum
  GL_DEBUG_SOURCE_WINDOW_SYSTEM* = 0x8247.GLenum
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB* = 0x8247.GLenum
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR* = 0x8247.GLenum
  GL_DEBUG_SOURCE_SHADER_COMPILER* = 0x8248.GLenum
  GL_DEBUG_SOURCE_SHADER_COMPILER_ARB* = 0x8248.GLenum
  GL_DEBUG_SOURCE_SHADER_COMPILER_KHR* = 0x8248.GLenum
  GL_DEBUG_SOURCE_THIRD_PARTY* = 0x8249.GLenum
  GL_DEBUG_SOURCE_THIRD_PARTY_ARB* = 0x8249.GLenum
  GL_DEBUG_SOURCE_THIRD_PARTY_KHR* = 0x8249.GLenum
  GL_DEBUG_SOURCE_APPLICATION* = 0x824A.GLenum
  GL_DEBUG_SOURCE_APPLICATION_ARB* = 0x824A.GLenum
  GL_DEBUG_SOURCE_APPLICATION_KHR* = 0x824A.GLenum
  GL_DEBUG_SOURCE_OTHER* = 0x824B.GLenum
  GL_DEBUG_SOURCE_OTHER_ARB* = 0x824B.GLenum
  GL_DEBUG_SOURCE_OTHER_KHR* = 0x824B.GLenum
  GL_DEBUG_TYPE_ERROR* = 0x824C.GLenum
  GL_DEBUG_TYPE_ERROR_ARB* = 0x824C.GLenum
  GL_DEBUG_TYPE_ERROR_KHR* = 0x824C.GLenum
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR* = 0x824D.GLenum
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB* = 0x824D.GLenum
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR* = 0x824D.GLenum
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR* = 0x824E.GLenum
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB* = 0x824E.GLenum
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR* = 0x824E.GLenum
  GL_DEBUG_TYPE_PORTABILITY* = 0x824F.GLenum
  GL_DEBUG_TYPE_PORTABILITY_ARB* = 0x824F.GLenum
  GL_DEBUG_TYPE_PORTABILITY_KHR* = 0x824F.GLenum
  GL_DEBUG_TYPE_PERFORMANCE* = 0x8250.GLenum
  GL_DEBUG_TYPE_PERFORMANCE_ARB* = 0x8250.GLenum
  GL_DEBUG_TYPE_PERFORMANCE_KHR* = 0x8250.GLenum
  GL_DEBUG_TYPE_OTHER* = 0x8251.GLenum
  GL_DEBUG_TYPE_OTHER_ARB* = 0x8251.GLenum
  GL_DEBUG_TYPE_OTHER_KHR* = 0x8251.GLenum
  GL_LOSE_CONTEXT_ON_RESET* = 0x8252.GLenum
  GL_LOSE_CONTEXT_ON_RESET_ARB* = 0x8252.GLenum
  GL_LOSE_CONTEXT_ON_RESET_EXT* = 0x8252.GLenum
  GL_LOSE_CONTEXT_ON_RESET_KHR* = 0x8252.GLenum
  GL_GUILTY_CONTEXT_RESET* = 0x8253.GLenum
  GL_GUILTY_CONTEXT_RESET_ARB* = 0x8253.GLenum
  GL_GUILTY_CONTEXT_RESET_EXT* = 0x8253.GLenum
  GL_GUILTY_CONTEXT_RESET_KHR* = 0x8253.GLenum
  GL_INNOCENT_CONTEXT_RESET* = 0x8254.GLenum
  GL_INNOCENT_CONTEXT_RESET_ARB* = 0x8254.GLenum
  GL_INNOCENT_CONTEXT_RESET_EXT* = 0x8254.GLenum
  GL_INNOCENT_CONTEXT_RESET_KHR* = 0x8254.GLenum
  GL_UNKNOWN_CONTEXT_RESET* = 0x8255.GLenum
  GL_UNKNOWN_CONTEXT_RESET_ARB* = 0x8255.GLenum
  GL_UNKNOWN_CONTEXT_RESET_EXT* = 0x8255.GLenum
  GL_UNKNOWN_CONTEXT_RESET_KHR* = 0x8255.GLenum
  GL_RESET_NOTIFICATION_STRATEGY* = 0x8256.GLenum
  GL_RESET_NOTIFICATION_STRATEGY_ARB* = 0x8256.GLenum
  GL_RESET_NOTIFICATION_STRATEGY_EXT* = 0x8256.GLenum
  GL_RESET_NOTIFICATION_STRATEGY_KHR* = 0x8256.GLenum
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT* = 0x8257.GLenum
  GL_PROGRAM_SEPARABLE* = 0x8258.GLenum
  GL_PROGRAM_SEPARABLE_EXT* = 0x8258.GLenum
  GL_ACTIVE_PROGRAM* = 0x8259.GLenum
  GL_PROGRAM_PIPELINE_BINDING* = 0x825A.GLenum
  GL_PROGRAM_PIPELINE_BINDING_EXT* = 0x825A.GLenum
  GL_MAX_VIEWPORTS* = 0x825B.GLenum
  GL_MAX_VIEWPORTS_NV* = 0x825B.GLenum
  GL_MAX_VIEWPORTS_OES* = 0x825B.GLenum
  GL_VIEWPORT_SUBPIXEL_BITS* = 0x825C.GLenum
  GL_VIEWPORT_SUBPIXEL_BITS_EXT* = 0x825C.GLenum
  GL_VIEWPORT_SUBPIXEL_BITS_NV* = 0x825C.GLenum
  GL_VIEWPORT_SUBPIXEL_BITS_OES* = 0x825C.GLenum
  GL_VIEWPORT_BOUNDS_RANGE* = 0x825D.GLenum
  GL_VIEWPORT_BOUNDS_RANGE_EXT* = 0x825D.GLenum
  GL_VIEWPORT_BOUNDS_RANGE_NV* = 0x825D.GLenum
  GL_VIEWPORT_BOUNDS_RANGE_OES* = 0x825D.GLenum
  GL_LAYER_PROVOKING_VERTEX* = 0x825E.GLenum
  GL_LAYER_PROVOKING_VERTEX_EXT* = 0x825E.GLenum
  GL_LAYER_PROVOKING_VERTEX_OES* = 0x825E.GLenum
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX* = 0x825F.GLenum
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT* = 0x825F.GLenum
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV* = 0x825F.GLenum
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES* = 0x825F.GLenum
  GL_UNDEFINED_VERTEX* = 0x8260.GLenum
  GL_UNDEFINED_VERTEX_EXT* = 0x8260.GLenum
  GL_UNDEFINED_VERTEX_OES* = 0x8260.GLenum
  GL_NO_RESET_NOTIFICATION* = 0x8261.GLenum
  GL_NO_RESET_NOTIFICATION_ARB* = 0x8261.GLenum
  GL_NO_RESET_NOTIFICATION_EXT* = 0x8261.GLenum
  GL_NO_RESET_NOTIFICATION_KHR* = 0x8261.GLenum
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE* = 0x8262.GLenum
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS* = 0x8263.GLenum
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS* = 0x8264.GLenum
  GL_MAX_COMPUTE_ATOMIC_COUNTERS* = 0x8265.GLenum
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS* = 0x8266.GLenum
  GL_COMPUTE_WORK_GROUP_SIZE* = 0x8267.GLenum
  GL_DEBUG_TYPE_MARKER* = 0x8268.GLenum
  GL_DEBUG_TYPE_MARKER_KHR* = 0x8268.GLenum
  GL_DEBUG_TYPE_PUSH_GROUP* = 0x8269.GLenum
  GL_DEBUG_TYPE_PUSH_GROUP_KHR* = 0x8269.GLenum
  GL_DEBUG_TYPE_POP_GROUP* = 0x826A.GLenum
  GL_DEBUG_TYPE_POP_GROUP_KHR* = 0x826A.GLenum
  GL_DEBUG_SEVERITY_NOTIFICATION* = 0x826B.GLenum
  GL_DEBUG_SEVERITY_NOTIFICATION_KHR* = 0x826B.GLenum
  GL_MAX_DEBUG_GROUP_STACK_DEPTH* = 0x826C.GLenum
  GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR* = 0x826C.GLenum
  GL_DEBUG_GROUP_STACK_DEPTH* = 0x826D.GLenum
  GL_DEBUG_GROUP_STACK_DEPTH_KHR* = 0x826D.GLenum
  GL_MAX_UNIFORM_LOCATIONS* = 0x826E.GLenum
  GL_INTERNALFORMAT_SUPPORTED* = 0x826F.GLenum
  GL_INTERNALFORMAT_PREFERRED* = 0x8270.GLenum
  GL_INTERNALFORMAT_RED_SIZE* = 0x8271.GLenum
  GL_INTERNALFORMAT_GREEN_SIZE* = 0x8272.GLenum
  GL_INTERNALFORMAT_BLUE_SIZE* = 0x8273.GLenum
  GL_INTERNALFORMAT_ALPHA_SIZE* = 0x8274.GLenum
  GL_INTERNALFORMAT_DEPTH_SIZE* = 0x8275.GLenum
  GL_INTERNALFORMAT_STENCIL_SIZE* = 0x8276.GLenum
  GL_INTERNALFORMAT_SHARED_SIZE* = 0x8277.GLenum
  GL_INTERNALFORMAT_RED_TYPE* = 0x8278.GLenum
  GL_INTERNALFORMAT_GREEN_TYPE* = 0x8279.GLenum
  GL_INTERNALFORMAT_BLUE_TYPE* = 0x827A.GLenum
  GL_INTERNALFORMAT_ALPHA_TYPE* = 0x827B.GLenum
  GL_INTERNALFORMAT_DEPTH_TYPE* = 0x827C.GLenum
  GL_INTERNALFORMAT_STENCIL_TYPE* = 0x827D.GLenum
  GL_MAX_WIDTH* = 0x827E.GLenum
  GL_MAX_HEIGHT* = 0x827F.GLenum
  GL_MAX_DEPTH* = 0x8280.GLenum
  GL_MAX_LAYERS* = 0x8281.GLenum
  GL_MAX_COMBINED_DIMENSIONS* = 0x8282.GLenum
  GL_COLOR_COMPONENTS* = 0x8283.GLenum
  GL_DEPTH_COMPONENTS* = 0x8284.GLenum
  GL_STENCIL_COMPONENTS* = 0x8285.GLenum
  GL_COLOR_RENDERABLE* = 0x8286.GLenum
  GL_DEPTH_RENDERABLE* = 0x8287.GLenum
  GL_STENCIL_RENDERABLE* = 0x8288.GLenum
  GL_FRAMEBUFFER_RENDERABLE* = 0x8289.GLenum
  GL_FRAMEBUFFER_RENDERABLE_LAYERED* = 0x828A.GLenum
  GL_FRAMEBUFFER_BLEND* = 0x828B.GLenum
  GL_READ_PIXELS* = 0x828C.GLenum
  GL_READ_PIXELS_FORMAT* = 0x828D.GLenum
  GL_READ_PIXELS_TYPE* = 0x828E.GLenum
  GL_TEXTURE_IMAGE_FORMAT* = 0x828F.GLenum
  GL_TEXTURE_IMAGE_TYPE* = 0x8290.GLenum
  GL_GET_TEXTURE_IMAGE_FORMAT* = 0x8291.GLenum
  GL_GET_TEXTURE_IMAGE_TYPE* = 0x8292.GLenum
  GL_MIPMAP* = 0x8293.GLenum
  GL_MANUAL_GENERATE_MIPMAP* = 0x8294.GLenum
  GL_AUTO_GENERATE_MIPMAP* = 0x8295.GLenum ## Should be deprecated
  GL_COLOR_ENCODING* = 0x8296.GLenum
  GL_SRGB_READ* = 0x8297.GLenum
  GL_SRGB_WRITE* = 0x8298.GLenum
  GL_SRGB_DECODE_ARB* = 0x8299.GLenum
  GL_FILTER* = 0x829A.GLenum
  GL_VERTEX_TEXTURE* = 0x829B.GLenum
  GL_TESS_CONTROL_TEXTURE* = 0x829C.GLenum
  GL_TESS_EVALUATION_TEXTURE* = 0x829D.GLenum
  GL_GEOMETRY_TEXTURE* = 0x829E.GLenum
  GL_FRAGMENT_TEXTURE* = 0x829F.GLenum
  GL_COMPUTE_TEXTURE* = 0x82A0.GLenum
  GL_TEXTURE_SHADOW* = 0x82A1.GLenum
  GL_TEXTURE_GATHER* = 0x82A2.GLenum
  GL_TEXTURE_GATHER_SHADOW* = 0x82A3.GLenum
  GL_SHADER_IMAGE_LOAD* = 0x82A4.GLenum
  GL_SHADER_IMAGE_STORE* = 0x82A5.GLenum
  GL_SHADER_IMAGE_ATOMIC* = 0x82A6.GLenum
  GL_IMAGE_TEXEL_SIZE* = 0x82A7.GLenum
  GL_IMAGE_COMPATIBILITY_CLASS* = 0x82A8.GLenum
  GL_IMAGE_PIXEL_FORMAT* = 0x82A9.GLenum
  GL_IMAGE_PIXEL_TYPE* = 0x82AA.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST* = 0x82AC.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST* = 0x82AD.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE* = 0x82AE.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE* = 0x82AF.GLenum
  GL_TEXTURE_COMPRESSED_BLOCK_WIDTH* = 0x82B1.GLenum
  GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT* = 0x82B2.GLenum
  GL_TEXTURE_COMPRESSED_BLOCK_SIZE* = 0x82B3.GLenum
  GL_CLEAR_BUFFER* = 0x82B4.GLenum
  GL_TEXTURE_VIEW* = 0x82B5.GLenum
  GL_VIEW_COMPATIBILITY_CLASS* = 0x82B6.GLenum
  GL_FULL_SUPPORT* = 0x82B7.GLenum
  GL_CAVEAT_SUPPORT* = 0x82B8.GLenum
  GL_IMAGE_CLASS_4_X_32* = 0x82B9.GLenum
  GL_IMAGE_CLASS_2_X_32* = 0x82BA.GLenum
  GL_IMAGE_CLASS_1_X_32* = 0x82BB.GLenum
  GL_IMAGE_CLASS_4_X_16* = 0x82BC.GLenum
  GL_IMAGE_CLASS_2_X_16* = 0x82BD.GLenum
  GL_IMAGE_CLASS_1_X_16* = 0x82BE.GLenum
  GL_IMAGE_CLASS_4_X_8* = 0x82BF.GLenum
  GL_IMAGE_CLASS_2_X_8* = 0x82C0.GLenum
  GL_IMAGE_CLASS_1_X_8* = 0x82C1.GLenum
  GL_IMAGE_CLASS_11_11_10* = 0x82C2.GLenum
  GL_IMAGE_CLASS_10_10_10_2* = 0x82C3.GLenum
  GL_VIEW_CLASS_128_BITS* = 0x82C4.GLenum
  GL_VIEW_CLASS_96_BITS* = 0x82C5.GLenum
  GL_VIEW_CLASS_64_BITS* = 0x82C6.GLenum
  GL_VIEW_CLASS_48_BITS* = 0x82C7.GLenum
  GL_VIEW_CLASS_32_BITS* = 0x82C8.GLenum
  GL_VIEW_CLASS_24_BITS* = 0x82C9.GLenum
  GL_VIEW_CLASS_16_BITS* = 0x82CA.GLenum
  GL_VIEW_CLASS_8_BITS* = 0x82CB.GLenum
  GL_VIEW_CLASS_S3TC_DXT1_RGB* = 0x82CC.GLenum
  GL_VIEW_CLASS_S3TC_DXT1_RGBA* = 0x82CD.GLenum
  GL_VIEW_CLASS_S3TC_DXT3_RGBA* = 0x82CE.GLenum
  GL_VIEW_CLASS_S3TC_DXT5_RGBA* = 0x82CF.GLenum
  GL_VIEW_CLASS_RGTC1_RED* = 0x82D0.GLenum
  GL_VIEW_CLASS_RGTC2_RG* = 0x82D1.GLenum
  GL_VIEW_CLASS_BPTC_UNORM* = 0x82D2.GLenum
  GL_VIEW_CLASS_BPTC_FLOAT* = 0x82D3.GLenum
  GL_VERTEX_ATTRIB_BINDING* = 0x82D4.GLenum
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET* = 0x82D5.GLenum
  GL_VERTEX_BINDING_DIVISOR* = 0x82D6.GLenum
  GL_VERTEX_BINDING_OFFSET* = 0x82D7.GLenum
  GL_VERTEX_BINDING_STRIDE* = 0x82D8.GLenum
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET* = 0x82D9.GLenum
  GL_MAX_VERTEX_ATTRIB_BINDINGS* = 0x82DA.GLenum
  GL_TEXTURE_VIEW_MIN_LEVEL* = 0x82DB.GLenum
  GL_TEXTURE_VIEW_MIN_LEVEL_EXT* = 0x82DB.GLenum
  GL_TEXTURE_VIEW_MIN_LEVEL_OES* = 0x82DB.GLenum
  GL_TEXTURE_VIEW_NUM_LEVELS* = 0x82DC.GLenum
  GL_TEXTURE_VIEW_NUM_LEVELS_EXT* = 0x82DC.GLenum
  GL_TEXTURE_VIEW_NUM_LEVELS_OES* = 0x82DC.GLenum
  GL_TEXTURE_VIEW_MIN_LAYER* = 0x82DD.GLenum
  GL_TEXTURE_VIEW_MIN_LAYER_EXT* = 0x82DD.GLenum
  GL_TEXTURE_VIEW_MIN_LAYER_OES* = 0x82DD.GLenum
  GL_TEXTURE_VIEW_NUM_LAYERS* = 0x82DE.GLenum
  GL_TEXTURE_VIEW_NUM_LAYERS_EXT* = 0x82DE.GLenum
  GL_TEXTURE_VIEW_NUM_LAYERS_OES* = 0x82DE.GLenum
  GL_TEXTURE_IMMUTABLE_LEVELS* = 0x82DF.GLenum
  GL_BUFFER* = 0x82E0.GLenum
  GL_BUFFER_KHR* = 0x82E0.GLenum
  GL_SHADER* = 0x82E1.GLenum
  GL_SHADER_KHR* = 0x82E1.GLenum
  GL_PROGRAM* = 0x82E2.GLenum
  GL_PROGRAM_KHR* = 0x82E2.GLenum
  GL_QUERY* = 0x82E3.GLenum
  GL_QUERY_KHR* = 0x82E3.GLenum
  GL_PROGRAM_PIPELINE* = 0x82E4.GLenum
  GL_PROGRAM_PIPELINE_KHR* = 0x82E4.GLenum
  GL_MAX_VERTEX_ATTRIB_STRIDE* = 0x82E5.GLenum
  GL_SAMPLER* = 0x82E6.GLenum
  GL_SAMPLER_KHR* = 0x82E6.GLenum
  GL_DISPLAY_LIST* = 0x82E7.GLenum
  GL_MAX_LABEL_LENGTH* = 0x82E8.GLenum
  GL_MAX_LABEL_LENGTH_KHR* = 0x82E8.GLenum
  GL_NUM_SHADING_LANGUAGE_VERSIONS* = 0x82E9.GLenum
  GL_QUERY_TARGET* = 0x82EA.GLenum
  GL_TRANSFORM_FEEDBACK_OVERFLOW* = 0x82EC.GLenum
  GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB* = 0x82EC.GLenum
  GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW* = 0x82ED.GLenum
  GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB* = 0x82ED.GLenum
  GL_VERTICES_SUBMITTED* = 0x82EE.GLenum
  GL_VERTICES_SUBMITTED_ARB* = 0x82EE.GLenum
  GL_PRIMITIVES_SUBMITTED* = 0x82EF.GLenum
  GL_PRIMITIVES_SUBMITTED_ARB* = 0x82EF.GLenum
  GL_VERTEX_SHADER_INVOCATIONS* = 0x82F0.GLenum
  GL_VERTEX_SHADER_INVOCATIONS_ARB* = 0x82F0.GLenum
  GL_TESS_CONTROL_SHADER_PATCHES* = 0x82F1.GLenum
  GL_TESS_CONTROL_SHADER_PATCHES_ARB* = 0x82F1.GLenum
  GL_TESS_EVALUATION_SHADER_INVOCATIONS* = 0x82F2.GLenum
  GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB* = 0x82F2.GLenum
  GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED* = 0x82F3.GLenum
  GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB* = 0x82F3.GLenum
  GL_FRAGMENT_SHADER_INVOCATIONS* = 0x82F4.GLenum
  GL_FRAGMENT_SHADER_INVOCATIONS_ARB* = 0x82F4.GLenum
  GL_COMPUTE_SHADER_INVOCATIONS* = 0x82F5.GLenum
  GL_COMPUTE_SHADER_INVOCATIONS_ARB* = 0x82F5.GLenum
  GL_CLIPPING_INPUT_PRIMITIVES* = 0x82F6.GLenum
  GL_CLIPPING_INPUT_PRIMITIVES_ARB* = 0x82F6.GLenum
  GL_CLIPPING_OUTPUT_PRIMITIVES* = 0x82F7.GLenum
  GL_CLIPPING_OUTPUT_PRIMITIVES_ARB* = 0x82F7.GLenum
  GL_SPARSE_BUFFER_PAGE_SIZE_ARB* = 0x82F8.GLenum
  GL_MAX_CULL_DISTANCES* = 0x82F9.GLenum
  GL_MAX_CULL_DISTANCES_EXT* = 0x82F9.GLenum
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES* = 0x82FA.GLenum
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT* = 0x82FA.GLenum
  GL_CONTEXT_RELEASE_BEHAVIOR* = 0x82FB.GLenum
  GL_CONTEXT_RELEASE_BEHAVIOR_KHR* = 0x82FB.GLenum
  GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH* = 0x82FC.GLenum
  GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR* = 0x82FC.GLenum
  GL_ROBUST_GPU_TIMEOUT_MS_KHR* = 0x82FD.GLenum ## Reserved for future
  GL_DEPTH_PASS_INSTRUMENT_SGIX* = 0x8310.GLenum
  GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX* = 0x8311.GLenum
  GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX* = 0x8312.GLenum
  GL_FRAGMENTS_INSTRUMENT_SGIX* = 0x8313.GLenum
  GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX* = 0x8314.GLenum
  GL_FRAGMENTS_INSTRUMENT_MAX_SGIX* = 0x8315.GLenum
  GL_CONVOLUTION_HINT_SGIX* = 0x8316.GLenum
  GL_YCRCB_SGIX* = 0x8318.GLenum
  GL_YCRCBA_SGIX* = 0x8319.GLenum
  GL_UNPACK_COMPRESSED_SIZE_SGIX* = 0x831A.GLenum
  GL_PACK_MAX_COMPRESSED_SIZE_SGIX* = 0x831B.GLenum
  GL_PACK_COMPRESSED_SIZE_SGIX* = 0x831C.GLenum
  GL_SLIM8U_SGIX* = 0x831D.GLenum
  GL_SLIM10U_SGIX* = 0x831E.GLenum
  GL_SLIM12S_SGIX* = 0x831F.GLenum
  GL_ALPHA_MIN_SGIX* = 0x8320.GLenum
  GL_ALPHA_MAX_SGIX* = 0x8321.GLenum
  GL_SCALEBIAS_HINT_SGIX* = 0x8322.GLenum
  GL_ASYNC_MARKER_SGIX* = 0x8329.GLenum
  GL_PIXEL_TEX_GEN_MODE_SGIX* = 0x832B.GLenum
  GL_ASYNC_HISTOGRAM_SGIX* = 0x832C.GLenum
  GL_MAX_ASYNC_HISTOGRAM_SGIX* = 0x832D.GLenum
  GL_PIXEL_TRANSFORM_2D_EXT* = 0x8330.GLenum
  GL_PIXEL_MAG_FILTER_EXT* = 0x8331.GLenum
  GL_PIXEL_MIN_FILTER_EXT* = 0x8332.GLenum
  GL_PIXEL_CUBIC_WEIGHT_EXT* = 0x8333.GLenum
  GL_CUBIC_EXT* = 0x8334.GLenum
  GL_AVERAGE_EXT* = 0x8335.GLenum
  GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT* = 0x8336.GLenum
  GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT* = 0x8337.GLenum
  GL_PIXEL_TRANSFORM_2D_MATRIX_EXT* = 0x8338.GLenum
  GL_FRAGMENT_MATERIAL_EXT* = 0x8349.GLenum
  GL_FRAGMENT_NORMAL_EXT* = 0x834A.GLenum
  GL_FRAGMENT_COLOR_EXT* = 0x834C.GLenum
  GL_ATTENUATION_EXT* = 0x834D.GLenum
  GL_SHADOW_ATTENUATION_EXT* = 0x834E.GLenum
  GL_TEXTURE_APPLICATION_MODE_EXT* = 0x834F.GLenum
  GL_TEXTURE_LIGHT_EXT* = 0x8350.GLenum
  GL_TEXTURE_MATERIAL_FACE_EXT* = 0x8351.GLenum
  GL_TEXTURE_MATERIAL_PARAMETER_EXT* = 0x8352.GLenum
  GL_PIXEL_TEXTURE_SGIS* = 0x8353.GLenum
  GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS* = 0x8354.GLenum
  GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS* = 0x8355.GLenum
  GL_PIXEL_GROUP_COLOR_SGIS* = 0x8356.GLenum
  GL_LINE_QUALITY_HINT_SGIX* = 0x835B.GLenum
  GL_ASYNC_TEX_IMAGE_SGIX* = 0x835C.GLenum
  GL_ASYNC_DRAW_PIXELS_SGIX* = 0x835D.GLenum
  GL_ASYNC_READ_PIXELS_SGIX* = 0x835E.GLenum
  GL_MAX_ASYNC_TEX_IMAGE_SGIX* = 0x835F.GLenum
  GL_MAX_ASYNC_DRAW_PIXELS_SGIX* = 0x8360.GLenum
  GL_MAX_ASYNC_READ_PIXELS_SGIX* = 0x8361.GLenum
  GL_UNSIGNED_BYTE_2_3_3_REV* = 0x8362.GLenum
  GL_UNSIGNED_BYTE_2_3_3_REV_EXT* = 0x8362.GLenum
  GL_UNSIGNED_SHORT_5_6_5* = 0x8363.GLenum
  GL_UNSIGNED_SHORT_5_6_5_EXT* = 0x8363.GLenum
  GL_UNSIGNED_SHORT_5_6_5_REV* = 0x8364.GLenum
  GL_UNSIGNED_SHORT_5_6_5_REV_EXT* = 0x8364.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4_REV* = 0x8365.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT* = 0x8365.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG* = 0x8365.GLenum
  GL_UNSIGNED_SHORT_1_5_5_5_REV* = 0x8366.GLenum
  GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT* = 0x8366.GLenum
  GL_UNSIGNED_INT_8_8_8_8_REV* = 0x8367.GLenum
  GL_UNSIGNED_INT_8_8_8_8_REV_EXT* = 0x8367.GLenum
  GL_UNSIGNED_INT_2_10_10_10_REV* = 0x8368.GLenum
  GL_UNSIGNED_INT_2_10_10_10_REV_EXT* = 0x8368.GLenum
  GL_TEXTURE_MAX_CLAMP_S_SGIX* = 0x8369.GLenum
  GL_TEXTURE_MAX_CLAMP_T_SGIX* = 0x836A.GLenum
  GL_TEXTURE_MAX_CLAMP_R_SGIX* = 0x836B.GLenum
  GL_MIRRORED_REPEAT* = 0x8370.GLenum
  GL_MIRRORED_REPEAT_ARB* = 0x8370.GLenum
  GL_MIRRORED_REPEAT_IBM* = 0x8370.GLenum
  GL_MIRRORED_REPEAT_OES* = 0x8370.GLenum
  GL_RGB_S3TC* = 0x83A0.GLenum
  GL_RGB4_S3TC* = 0x83A1.GLenum
  GL_RGBA_S3TC* = 0x83A2.GLenum
  GL_RGBA4_S3TC* = 0x83A3.GLenum
  GL_RGBA_DXT5_S3TC* = 0x83A4.GLenum
  GL_RGBA4_DXT5_S3TC* = 0x83A5.GLenum
  GL_VERTEX_PRECLIP_SGIX* = 0x83EE.GLenum
  GL_VERTEX_PRECLIP_HINT_SGIX* = 0x83EF.GLenum
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT* = 0x83F0.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT* = 0x83F1.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE* = 0x83F2.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT* = 0x83F2.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE* = 0x83F3.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT* = 0x83F3.GLenum
  GL_PARALLEL_ARRAYS_INTEL* = 0x83F4.GLenum
  GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F5.GLenum
  GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F6.GLenum
  GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F7.GLenum
  GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F8.GLenum
  GL_PERFQUERY_DONOT_FLUSH_INTEL* = 0x83F9.GLenum
  GL_PERFQUERY_FLUSH_INTEL* = 0x83FA.GLenum
  GL_PERFQUERY_WAIT_INTEL* = 0x83FB.GLenum
  GL_BLACKHOLE_RENDER_INTEL* = 0x83FC.GLenum
  GL_CONSERVATIVE_RASTERIZATION_INTEL* = 0x83FE.GLenum
  GL_TEXTURE_MEMORY_LAYOUT_INTEL* = 0x83FF.GLenum
  GL_FRAGMENT_LIGHTING_SGIX* = 0x8400.GLenum
  GL_FRAGMENT_COLOR_MATERIAL_SGIX* = 0x8401.GLenum
  GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX* = 0x8402.GLenum
  GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX* = 0x8403.GLenum
  GL_MAX_FRAGMENT_LIGHTS_SGIX* = 0x8404.GLenum
  GL_MAX_ACTIVE_LIGHTS_SGIX* = 0x8405.GLenum
  GL_CURRENT_RASTER_NORMAL_SGIX* = 0x8406.GLenum
  GL_LIGHT_ENV_MODE_SGIX* = 0x8407.GLenum
  GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX* = 0x8408.GLenum
  GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX* = 0x8409.GLenum
  GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX* = 0x840A.GLenum
  GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX* = 0x840B.GLenum
  GL_FRAGMENT_LIGHT0_SGIX* = 0x840C.GLenum
  GL_FRAGMENT_LIGHT1_SGIX* = 0x840D.GLenum
  GL_FRAGMENT_LIGHT2_SGIX* = 0x840E.GLenum
  GL_FRAGMENT_LIGHT3_SGIX* = 0x840F.GLenum
  GL_FRAGMENT_LIGHT4_SGIX* = 0x8410.GLenum
  GL_FRAGMENT_LIGHT5_SGIX* = 0x8411.GLenum
  GL_FRAGMENT_LIGHT6_SGIX* = 0x8412.GLenum
  GL_FRAGMENT_LIGHT7_SGIX* = 0x8413.GLenum
  GL_PACK_RESAMPLE_SGIX* = 0x842E.GLenum ## Formerly 0x842C in SGI specfile
  GL_UNPACK_RESAMPLE_SGIX* = 0x842F.GLenum ## Formerly 0x842D in SGI specfile
  GL_RESAMPLE_DECIMATE_SGIX* = 0x8430.GLenum ## Formerly 0x8430 in SGI specfile
  GL_RESAMPLE_REPLICATE_SGIX* = 0x8433.GLenum ## Formerly 0x842E in SGI specfile
  GL_RESAMPLE_ZERO_FILL_SGIX* = 0x8434.GLenum ## Formerly 0x842F in SGI specfile
  GL_TANGENT_ARRAY_EXT* = 0x8439.GLenum
  GL_BINORMAL_ARRAY_EXT* = 0x843A.GLenum
  GL_CURRENT_TANGENT_EXT* = 0x843B.GLenum
  GL_CURRENT_BINORMAL_EXT* = 0x843C.GLenum
  GL_TANGENT_ARRAY_TYPE_EXT* = 0x843E.GLenum
  GL_TANGENT_ARRAY_STRIDE_EXT* = 0x843F.GLenum
  GL_BINORMAL_ARRAY_TYPE_EXT* = 0x8440.GLenum
  GL_BINORMAL_ARRAY_STRIDE_EXT* = 0x8441.GLenum
  GL_TANGENT_ARRAY_POINTER_EXT* = 0x8442.GLenum
  GL_BINORMAL_ARRAY_POINTER_EXT* = 0x8443.GLenum
  GL_MAP1_TANGENT_EXT* = 0x8444.GLenum
  GL_MAP2_TANGENT_EXT* = 0x8445.GLenum
  GL_MAP1_BINORMAL_EXT* = 0x8446.GLenum
  GL_MAP2_BINORMAL_EXT* = 0x8447.GLenum
  GL_NEAREST_CLIPMAP_NEAREST_SGIX* = 0x844D.GLenum
  GL_NEAREST_CLIPMAP_LINEAR_SGIX* = 0x844E.GLenum
  GL_LINEAR_CLIPMAP_NEAREST_SGIX* = 0x844F.GLenum
  GL_FOG_COORDINATE_SOURCE* = 0x8450.GLenum
  GL_FOG_COORDINATE_SOURCE_EXT* = 0x8450.GLenum
  GL_FOG_COORD_SRC* = 0x8450.GLenum
  GL_FOG_COORDINATE* = 0x8451.GLenum
  GL_FOG_COORD* = 0x8451.GLenum
  GL_FOG_COORDINATE_EXT* = 0x8451.GLenum
  GL_FRAGMENT_DEPTH* = 0x8452.GLenum
  GL_FRAGMENT_DEPTH_EXT* = 0x8452.GLenum
  GL_CURRENT_FOG_COORDINATE* = 0x8453.GLenum
  GL_CURRENT_FOG_COORD* = 0x8453.GLenum
  GL_CURRENT_FOG_COORDINATE_EXT* = 0x8453.GLenum
  GL_FOG_COORDINATE_ARRAY_TYPE* = 0x8454.GLenum
  GL_FOG_COORDINATE_ARRAY_TYPE_EXT* = 0x8454.GLenum
  GL_FOG_COORD_ARRAY_TYPE* = 0x8454.GLenum
  GL_FOG_COORDINATE_ARRAY_STRIDE* = 0x8455.GLenum
  GL_FOG_COORDINATE_ARRAY_STRIDE_EXT* = 0x8455.GLenum
  GL_FOG_COORD_ARRAY_STRIDE* = 0x8455.GLenum
  GL_FOG_COORDINATE_ARRAY_POINTER* = 0x8456.GLenum
  GL_FOG_COORDINATE_ARRAY_POINTER_EXT* = 0x8456.GLenum
  GL_FOG_COORD_ARRAY_POINTER* = 0x8456.GLenum
  GL_FOG_COORDINATE_ARRAY* = 0x8457.GLenum
  GL_FOG_COORDINATE_ARRAY_EXT* = 0x8457.GLenum
  GL_FOG_COORD_ARRAY* = 0x8457.GLenum
  GL_COLOR_SUM* = 0x8458.GLenum
  GL_COLOR_SUM_ARB* = 0x8458.GLenum
  GL_COLOR_SUM_EXT* = 0x8458.GLenum
  GL_CURRENT_SECONDARY_COLOR* = 0x8459.GLenum
  GL_CURRENT_SECONDARY_COLOR_EXT* = 0x8459.GLenum
  GL_SECONDARY_COLOR_ARRAY_SIZE* = 0x845A.GLenum
  GL_SECONDARY_COLOR_ARRAY_SIZE_EXT* = 0x845A.GLenum
  GL_SECONDARY_COLOR_ARRAY_TYPE* = 0x845B.GLenum
  GL_SECONDARY_COLOR_ARRAY_TYPE_EXT* = 0x845B.GLenum
  GL_SECONDARY_COLOR_ARRAY_STRIDE* = 0x845C.GLenum
  GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT* = 0x845C.GLenum
  GL_SECONDARY_COLOR_ARRAY_POINTER* = 0x845D.GLenum
  GL_SECONDARY_COLOR_ARRAY_POINTER_EXT* = 0x845D.GLenum
  GL_SECONDARY_COLOR_ARRAY* = 0x845E.GLenum
  GL_SECONDARY_COLOR_ARRAY_EXT* = 0x845E.GLenum
  GL_CURRENT_RASTER_SECONDARY_COLOR* = 0x845F.GLenum
  GL_ALIASED_POINT_SIZE_RANGE* = 0x846D.GLenum
  GL_ALIASED_LINE_WIDTH_RANGE* = 0x846E.GLenum
  GL_SCREEN_COORDINATES_REND* = 0x8490.GLenum
  GL_INVERTED_SCREEN_W_REND* = 0x8491.GLenum
  GL_TEXTURE0* = 0x84C0.GLenum
  GL_TEXTURE0_ARB* = 0x84C0.GLenum
  GL_TEXTURE1* = 0x84C1.GLenum
  GL_TEXTURE1_ARB* = 0x84C1.GLenum
  GL_TEXTURE2* = 0x84C2.GLenum
  GL_TEXTURE2_ARB* = 0x84C2.GLenum
  GL_TEXTURE3* = 0x84C3.GLenum
  GL_TEXTURE3_ARB* = 0x84C3.GLenum
  GL_TEXTURE4* = 0x84C4.GLenum
  GL_TEXTURE4_ARB* = 0x84C4.GLenum
  GL_TEXTURE5* = 0x84C5.GLenum
  GL_TEXTURE5_ARB* = 0x84C5.GLenum
  GL_TEXTURE6* = 0x84C6.GLenum
  GL_TEXTURE6_ARB* = 0x84C6.GLenum
  GL_TEXTURE7* = 0x84C7.GLenum
  GL_TEXTURE7_ARB* = 0x84C7.GLenum
  GL_TEXTURE8* = 0x84C8.GLenum
  GL_TEXTURE8_ARB* = 0x84C8.GLenum
  GL_TEXTURE9* = 0x84C9.GLenum
  GL_TEXTURE9_ARB* = 0x84C9.GLenum
  GL_TEXTURE10* = 0x84CA.GLenum
  GL_TEXTURE10_ARB* = 0x84CA.GLenum
  GL_TEXTURE11* = 0x84CB.GLenum
  GL_TEXTURE11_ARB* = 0x84CB.GLenum
  GL_TEXTURE12* = 0x84CC.GLenum
  GL_TEXTURE12_ARB* = 0x84CC.GLenum
  GL_TEXTURE13* = 0x84CD.GLenum
  GL_TEXTURE13_ARB* = 0x84CD.GLenum
  GL_TEXTURE14* = 0x84CE.GLenum
  GL_TEXTURE14_ARB* = 0x84CE.GLenum
  GL_TEXTURE15* = 0x84CF.GLenum
  GL_TEXTURE15_ARB* = 0x84CF.GLenum
  GL_TEXTURE16* = 0x84D0.GLenum
  GL_TEXTURE16_ARB* = 0x84D0.GLenum
  GL_TEXTURE17* = 0x84D1.GLenum
  GL_TEXTURE17_ARB* = 0x84D1.GLenum
  GL_TEXTURE18* = 0x84D2.GLenum
  GL_TEXTURE18_ARB* = 0x84D2.GLenum
  GL_TEXTURE19* = 0x84D3.GLenum
  GL_TEXTURE19_ARB* = 0x84D3.GLenum
  GL_TEXTURE20* = 0x84D4.GLenum
  GL_TEXTURE20_ARB* = 0x84D4.GLenum
  GL_TEXTURE21* = 0x84D5.GLenum
  GL_TEXTURE21_ARB* = 0x84D5.GLenum
  GL_TEXTURE22* = 0x84D6.GLenum
  GL_TEXTURE22_ARB* = 0x84D6.GLenum
  GL_TEXTURE23* = 0x84D7.GLenum
  GL_TEXTURE23_ARB* = 0x84D7.GLenum
  GL_TEXTURE24* = 0x84D8.GLenum
  GL_TEXTURE24_ARB* = 0x84D8.GLenum
  GL_TEXTURE25* = 0x84D9.GLenum
  GL_TEXTURE25_ARB* = 0x84D9.GLenum
  GL_TEXTURE26* = 0x84DA.GLenum
  GL_TEXTURE26_ARB* = 0x84DA.GLenum
  GL_TEXTURE27* = 0x84DB.GLenum
  GL_TEXTURE27_ARB* = 0x84DB.GLenum
  GL_TEXTURE28* = 0x84DC.GLenum
  GL_TEXTURE28_ARB* = 0x84DC.GLenum
  GL_TEXTURE29* = 0x84DD.GLenum
  GL_TEXTURE29_ARB* = 0x84DD.GLenum
  GL_TEXTURE30* = 0x84DE.GLenum
  GL_TEXTURE30_ARB* = 0x84DE.GLenum
  GL_TEXTURE31* = 0x84DF.GLenum
  GL_TEXTURE31_ARB* = 0x84DF.GLenum
  GL_ACTIVE_TEXTURE* = 0x84E0.GLenum
  GL_ACTIVE_TEXTURE_ARB* = 0x84E0.GLenum
  GL_CLIENT_ACTIVE_TEXTURE* = 0x84E1.GLenum
  GL_CLIENT_ACTIVE_TEXTURE_ARB* = 0x84E1.GLenum
  GL_MAX_TEXTURE_UNITS* = 0x84E2.GLenum
  GL_MAX_TEXTURE_UNITS_ARB* = 0x84E2.GLenum
  GL_TRANSPOSE_MODELVIEW_MATRIX* = 0x84E3.GLenum
  GL_TRANSPOSE_MODELVIEW_MATRIX_ARB* = 0x84E3.GLenum
  GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV* = 0x84E3.GLenum
  GL_TRANSPOSE_PROJECTION_MATRIX* = 0x84E4.GLenum
  GL_TRANSPOSE_PROJECTION_MATRIX_ARB* = 0x84E4.GLenum
  GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV* = 0x84E4.GLenum
  GL_TRANSPOSE_TEXTURE_MATRIX* = 0x84E5.GLenum
  GL_TRANSPOSE_TEXTURE_MATRIX_ARB* = 0x84E5.GLenum
  GL_TRANSPOSE_COLOR_MATRIX* = 0x84E6.GLenum
  GL_TRANSPOSE_COLOR_MATRIX_ARB* = 0x84E6.GLenum
  GL_SUBTRACT* = 0x84E7.GLenum
  GL_SUBTRACT_ARB* = 0x84E7.GLenum
  GL_MAX_RENDERBUFFER_SIZE* = 0x84E8.GLenum
  GL_MAX_RENDERBUFFER_SIZE_EXT* = 0x84E8.GLenum
  GL_MAX_RENDERBUFFER_SIZE_OES* = 0x84E8.GLenum
  GL_COMPRESSED_ALPHA* = 0x84E9.GLenum
  GL_COMPRESSED_ALPHA_ARB* = 0x84E9.GLenum
  GL_COMPRESSED_LUMINANCE* = 0x84EA.GLenum
  GL_COMPRESSED_LUMINANCE_ARB* = 0x84EA.GLenum
  GL_COMPRESSED_LUMINANCE_ALPHA* = 0x84EB.GLenum
  GL_COMPRESSED_LUMINANCE_ALPHA_ARB* = 0x84EB.GLenum
  GL_COMPRESSED_INTENSITY* = 0x84EC.GLenum
  GL_COMPRESSED_INTENSITY_ARB* = 0x84EC.GLenum
  GL_COMPRESSED_RGB* = 0x84ED.GLenum
  GL_COMPRESSED_RGB_ARB* = 0x84ED.GLenum
  GL_COMPRESSED_RGBA* = 0x84EE.GLenum
  GL_COMPRESSED_RGBA_ARB* = 0x84EE.GLenum
  GL_TEXTURE_COMPRESSION_HINT* = 0x84EF.GLenum
  GL_TEXTURE_COMPRESSION_HINT_ARB* = 0x84EF.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER* = 0x84F0.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER* = 0x84F1.GLenum
  GL_ALL_COMPLETED_NV* = 0x84F2.GLenum
  GL_FENCE_STATUS_NV* = 0x84F3.GLenum
  GL_FENCE_CONDITION_NV* = 0x84F4.GLenum
  GL_TEXTURE_RECTANGLE* = 0x84F5.GLenum
  GL_TEXTURE_RECTANGLE_ARB* = 0x84F5.GLenum
  GL_TEXTURE_RECTANGLE_NV* = 0x84F5.GLenum
  GL_TEXTURE_BINDING_RECTANGLE* = 0x84F6.GLenum
  GL_TEXTURE_BINDING_RECTANGLE_ARB* = 0x84F6.GLenum
  GL_TEXTURE_BINDING_RECTANGLE_NV* = 0x84F6.GLenum
  GL_PROXY_TEXTURE_RECTANGLE* = 0x84F7.GLenum
  GL_PROXY_TEXTURE_RECTANGLE_ARB* = 0x84F7.GLenum
  GL_PROXY_TEXTURE_RECTANGLE_NV* = 0x84F7.GLenum
  GL_MAX_RECTANGLE_TEXTURE_SIZE* = 0x84F8.GLenum
  GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB* = 0x84F8.GLenum
  GL_MAX_RECTANGLE_TEXTURE_SIZE_NV* = 0x84F8.GLenum
  GL_DEPTH_STENCIL* = 0x84F9.GLenum
  GL_DEPTH_STENCIL_EXT* = 0x84F9.GLenum
  GL_DEPTH_STENCIL_NV* = 0x84F9.GLenum
  GL_DEPTH_STENCIL_OES* = 0x84F9.GLenum
  GL_UNSIGNED_INT_24_8* = 0x84FA.GLenum
  GL_UNSIGNED_INT_24_8_EXT* = 0x84FA.GLenum
  GL_UNSIGNED_INT_24_8_NV* = 0x84FA.GLenum
  GL_UNSIGNED_INT_24_8_OES* = 0x84FA.GLenum
  GL_MAX_TEXTURE_LOD_BIAS* = 0x84FD.GLenum
  GL_MAX_TEXTURE_LOD_BIAS_EXT* = 0x84FD.GLenum
  GL_TEXTURE_MAX_ANISOTROPY* = 0x84FE.GLenum
  GL_TEXTURE_MAX_ANISOTROPY_EXT* = 0x84FE.GLenum
  GL_MAX_TEXTURE_MAX_ANISOTROPY* = 0x84FF.GLenum
  GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT* = 0x84FF.GLenum
  GL_TEXTURE_FILTER_CONTROL* = 0x8500.GLenum
  GL_TEXTURE_FILTER_CONTROL_EXT* = 0x8500.GLenum
  GL_TEXTURE_LOD_BIAS* = 0x8501.GLenum
  GL_TEXTURE_LOD_BIAS_EXT* = 0x8501.GLenum
  GL_MODELVIEW1_STACK_DEPTH_EXT* = 0x8502.GLenum
  GL_COMBINE4_NV* = 0x8503.GLenum
  GL_MAX_SHININESS_NV* = 0x8504.GLenum
  GL_MAX_SPOT_EXPONENT_NV* = 0x8505.GLenum
  GL_MODELVIEW1_MATRIX_EXT* = 0x8506.GLenum
  GL_INCR_WRAP* = 0x8507.GLenum
  GL_INCR_WRAP_EXT* = 0x8507.GLenum
  GL_INCR_WRAP_OES* = 0x8507.GLenum
  GL_DECR_WRAP* = 0x8508.GLenum
  GL_DECR_WRAP_EXT* = 0x8508.GLenum
  GL_DECR_WRAP_OES* = 0x8508.GLenum
  GL_VERTEX_WEIGHTING_EXT* = 0x8509.GLenum
  GL_MODELVIEW1_ARB* = 0x850A.GLenum
  GL_MODELVIEW1_EXT* = 0x850A.GLenum
  GL_CURRENT_VERTEX_WEIGHT_EXT* = 0x850B.GLenum
  GL_VERTEX_WEIGHT_ARRAY_EXT* = 0x850C.GLenum
  GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT* = 0x850D.GLenum
  GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT* = 0x850E.GLenum
  GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT* = 0x850F.GLenum
  GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT* = 0x8510.GLenum
  GL_NORMAL_MAP* = 0x8511.GLenum
  GL_NORMAL_MAP_ARB* = 0x8511.GLenum
  GL_NORMAL_MAP_EXT* = 0x8511.GLenum
  GL_NORMAL_MAP_NV* = 0x8511.GLenum
  GL_NORMAL_MAP_OES* = 0x8511.GLenum
  GL_REFLECTION_MAP* = 0x8512.GLenum
  GL_REFLECTION_MAP_ARB* = 0x8512.GLenum
  GL_REFLECTION_MAP_EXT* = 0x8512.GLenum
  GL_REFLECTION_MAP_NV* = 0x8512.GLenum
  GL_REFLECTION_MAP_OES* = 0x8512.GLenum
  GL_TEXTURE_CUBE_MAP* = 0x8513.GLenum
  GL_TEXTURE_CUBE_MAP_ARB* = 0x8513.GLenum
  GL_TEXTURE_CUBE_MAP_EXT* = 0x8513.GLenum
  GL_TEXTURE_CUBE_MAP_OES* = 0x8513.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP* = 0x8514.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARB* = 0x8514.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_EXT* = 0x8514.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_OES* = 0x8514.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z* = 0x851A.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB* = 0x851A.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT* = 0x851A.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES* = 0x851A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP* = 0x851B.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_ARB* = 0x851B.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_EXT* = 0x851B.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE* = 0x851C.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB* = 0x851C.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT* = 0x851C.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES* = 0x851C.GLenum
  GL_VERTEX_ARRAY_RANGE_APPLE* = 0x851D.GLenum
  GL_VERTEX_ARRAY_RANGE_NV* = 0x851D.GLenum
  GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE* = 0x851E.GLenum
  GL_VERTEX_ARRAY_RANGE_LENGTH_NV* = 0x851E.GLenum
  GL_VERTEX_ARRAY_RANGE_VALID_NV* = 0x851F.GLenum
  GL_VERTEX_ARRAY_STORAGE_HINT_APPLE* = 0x851F.GLenum
  GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV* = 0x8520.GLenum
  GL_VERTEX_ARRAY_RANGE_POINTER_APPLE* = 0x8521.GLenum
  GL_VERTEX_ARRAY_RANGE_POINTER_NV* = 0x8521.GLenum
  GL_REGISTER_COMBINERS_NV* = 0x8522.GLenum
  GL_VARIABLE_A_NV* = 0x8523.GLenum
  GL_VARIABLE_B_NV* = 0x8524.GLenum
  GL_VARIABLE_C_NV* = 0x8525.GLenum
  GL_VARIABLE_D_NV* = 0x8526.GLenum
  GL_VARIABLE_E_NV* = 0x8527.GLenum
  GL_VARIABLE_F_NV* = 0x8528.GLenum
  GL_VARIABLE_G_NV* = 0x8529.GLenum
  GL_CONSTANT_COLOR0_NV* = 0x852A.GLenum
  GL_CONSTANT_COLOR1_NV* = 0x852B.GLenum
  GL_PRIMARY_COLOR_NV* = 0x852C.GLenum
  GL_SECONDARY_COLOR_NV* = 0x852D.GLenum
  GL_SPARE0_NV* = 0x852E.GLenum
  GL_SPARE1_NV* = 0x852F.GLenum
  GL_DISCARD_NV* = 0x8530.GLenum
  GL_E_TIMES_F_NV* = 0x8531.GLenum
  GL_SPARE0_PLUS_SECONDARY_COLOR_NV* = 0x8532.GLenum
  GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV* = 0x8533.GLenum
  GL_MULTISAMPLE_FILTER_HINT_NV* = 0x8534.GLenum
  GL_PER_STAGE_CONSTANTS_NV* = 0x8535.GLenum
  GL_UNSIGNED_IDENTITY_NV* = 0x8536.GLenum
  GL_UNSIGNED_INVERT_NV* = 0x8537.GLenum
  GL_EXPAND_NORMAL_NV* = 0x8538.GLenum
  GL_EXPAND_NEGATE_NV* = 0x8539.GLenum
  GL_HALF_BIAS_NORMAL_NV* = 0x853A.GLenum
  GL_HALF_BIAS_NEGATE_NV* = 0x853B.GLenum
  GL_SIGNED_IDENTITY_NV* = 0x853C.GLenum
  GL_SIGNED_NEGATE_NV* = 0x853D.GLenum
  GL_SCALE_BY_TWO_NV* = 0x853E.GLenum
  GL_SCALE_BY_FOUR_NV* = 0x853F.GLenum
  GL_SCALE_BY_ONE_HALF_NV* = 0x8540.GLenum
  GL_BIAS_BY_NEGATIVE_ONE_HALF_NV* = 0x8541.GLenum
  GL_COMBINER_INPUT_NV* = 0x8542.GLenum
  GL_COMBINER_MAPPING_NV* = 0x8543.GLenum
  GL_COMBINER_COMPONENT_USAGE_NV* = 0x8544.GLenum
  GL_COMBINER_AB_DOT_PRODUCT_NV* = 0x8545.GLenum
  GL_COMBINER_CD_DOT_PRODUCT_NV* = 0x8546.GLenum
  GL_COMBINER_MUX_SUM_NV* = 0x8547.GLenum
  GL_COMBINER_SCALE_NV* = 0x8548.GLenum
  GL_COMBINER_BIAS_NV* = 0x8549.GLenum
  GL_COMBINER_AB_OUTPUT_NV* = 0x854A.GLenum
  GL_COMBINER_CD_OUTPUT_NV* = 0x854B.GLenum
  GL_COMBINER_SUM_OUTPUT_NV* = 0x854C.GLenum
  GL_MAX_GENERAL_COMBINERS_NV* = 0x854D.GLenum
  GL_NUM_GENERAL_COMBINERS_NV* = 0x854E.GLenum
  GL_COLOR_SUM_CLAMP_NV* = 0x854F.GLenum
  GL_COMBINER0_NV* = 0x8550.GLenum
  GL_COMBINER1_NV* = 0x8551.GLenum
  GL_COMBINER2_NV* = 0x8552.GLenum
  GL_COMBINER3_NV* = 0x8553.GLenum
  GL_COMBINER4_NV* = 0x8554.GLenum
  GL_COMBINER5_NV* = 0x8555.GLenum
  GL_COMBINER6_NV* = 0x8556.GLenum
  GL_COMBINER7_NV* = 0x8557.GLenum
  GL_PRIMITIVE_RESTART_NV* = 0x8558.GLenum
  GL_PRIMITIVE_RESTART_INDEX_NV* = 0x8559.GLenum
  GL_FOG_DISTANCE_MODE_NV* = 0x855A.GLenum
  GL_EYE_RADIAL_NV* = 0x855B.GLenum
  GL_EYE_PLANE_ABSOLUTE_NV* = 0x855C.GLenum
  GL_EMBOSS_LIGHT_NV* = 0x855D.GLenum
  GL_EMBOSS_CONSTANT_NV* = 0x855E.GLenum
  GL_EMBOSS_MAP_NV* = 0x855F.GLenum
  GL_RED_MIN_CLAMP_INGR* = 0x8560.GLenum
  GL_GREEN_MIN_CLAMP_INGR* = 0x8561.GLenum
  GL_BLUE_MIN_CLAMP_INGR* = 0x8562.GLenum
  GL_ALPHA_MIN_CLAMP_INGR* = 0x8563.GLenum
  GL_RED_MAX_CLAMP_INGR* = 0x8564.GLenum
  GL_GREEN_MAX_CLAMP_INGR* = 0x8565.GLenum
  GL_BLUE_MAX_CLAMP_INGR* = 0x8566.GLenum
  GL_ALPHA_MAX_CLAMP_INGR* = 0x8567.GLenum
  GL_INTERLACE_READ_INGR* = 0x8568.GLenum
  GL_COMBINE* = 0x8570.GLenum
  GL_COMBINE_ARB* = 0x8570.GLenum
  GL_COMBINE_EXT* = 0x8570.GLenum
  GL_COMBINE_RGB* = 0x8571.GLenum
  GL_COMBINE_RGB_ARB* = 0x8571.GLenum
  GL_COMBINE_RGB_EXT* = 0x8571.GLenum
  GL_COMBINE_ALPHA* = 0x8572.GLenum
  GL_COMBINE_ALPHA_ARB* = 0x8572.GLenum
  GL_COMBINE_ALPHA_EXT* = 0x8572.GLenum
  GL_RGB_SCALE* = 0x8573.GLenum
  GL_RGB_SCALE_ARB* = 0x8573.GLenum
  GL_RGB_SCALE_EXT* = 0x8573.GLenum
  GL_ADD_SIGNED* = 0x8574.GLenum
  GL_ADD_SIGNED_ARB* = 0x8574.GLenum
  GL_ADD_SIGNED_EXT* = 0x8574.GLenum
  GL_INTERPOLATE* = 0x8575.GLenum
  GL_INTERPOLATE_ARB* = 0x8575.GLenum
  GL_INTERPOLATE_EXT* = 0x8575.GLenum
  GL_CONSTANT* = 0x8576.GLenum
  GL_CONSTANT_ARB* = 0x8576.GLenum
  GL_CONSTANT_EXT* = 0x8576.GLenum
  GL_CONSTANT_NV* = 0x8576.GLenum
  GL_PRIMARY_COLOR* = 0x8577.GLenum
  GL_PRIMARY_COLOR_ARB* = 0x8577.GLenum
  GL_PRIMARY_COLOR_EXT* = 0x8577.GLenum
  GL_PREVIOUS* = 0x8578.GLenum
  GL_PREVIOUS_ARB* = 0x8578.GLenum
  GL_PREVIOUS_EXT* = 0x8578.GLenum
  GL_SOURCE0_RGB* = 0x8580.GLenum
  GL_SOURCE0_RGB_ARB* = 0x8580.GLenum
  GL_SOURCE0_RGB_EXT* = 0x8580.GLenum
  GL_SRC0_RGB* = 0x8580.GLenum
  GL_SOURCE1_RGB* = 0x8581.GLenum
  GL_SOURCE1_RGB_ARB* = 0x8581.GLenum
  GL_SOURCE1_RGB_EXT* = 0x8581.GLenum
  GL_SRC1_RGB* = 0x8581.GLenum
  GL_SOURCE2_RGB* = 0x8582.GLenum
  GL_SOURCE2_RGB_ARB* = 0x8582.GLenum
  GL_SOURCE2_RGB_EXT* = 0x8582.GLenum
  GL_SRC2_RGB* = 0x8582.GLenum
  GL_SOURCE3_RGB_NV* = 0x8583.GLenum
  GL_SOURCE0_ALPHA* = 0x8588.GLenum
  GL_SOURCE0_ALPHA_ARB* = 0x8588.GLenum
  GL_SOURCE0_ALPHA_EXT* = 0x8588.GLenum
  GL_SRC0_ALPHA* = 0x8588.GLenum
  GL_SOURCE1_ALPHA* = 0x8589.GLenum
  GL_SOURCE1_ALPHA_ARB* = 0x8589.GLenum
  GL_SOURCE1_ALPHA_EXT* = 0x8589.GLenum
  GL_SRC1_ALPHA* = 0x8589.GLenum
  GL_SRC1_ALPHA_EXT* = 0x8589.GLenum
  GL_SOURCE2_ALPHA* = 0x858A.GLenum
  GL_SOURCE2_ALPHA_ARB* = 0x858A.GLenum
  GL_SOURCE2_ALPHA_EXT* = 0x858A.GLenum
  GL_SRC2_ALPHA* = 0x858A.GLenum
  GL_SOURCE3_ALPHA_NV* = 0x858B.GLenum
  GL_OPERAND0_RGB* = 0x8590.GLenum
  GL_OPERAND0_RGB_ARB* = 0x8590.GLenum
  GL_OPERAND0_RGB_EXT* = 0x8590.GLenum
  GL_OPERAND1_RGB* = 0x8591.GLenum
  GL_OPERAND1_RGB_ARB* = 0x8591.GLenum
  GL_OPERAND1_RGB_EXT* = 0x8591.GLenum
  GL_OPERAND2_RGB* = 0x8592.GLenum
  GL_OPERAND2_RGB_ARB* = 0x8592.GLenum
  GL_OPERAND2_RGB_EXT* = 0x8592.GLenum
  GL_OPERAND3_RGB_NV* = 0x8593.GLenum
  GL_OPERAND0_ALPHA* = 0x8598.GLenum
  GL_OPERAND0_ALPHA_ARB* = 0x8598.GLenum
  GL_OPERAND0_ALPHA_EXT* = 0x8598.GLenum
  GL_OPERAND1_ALPHA* = 0x8599.GLenum
  GL_OPERAND1_ALPHA_ARB* = 0x8599.GLenum
  GL_OPERAND1_ALPHA_EXT* = 0x8599.GLenum
  GL_OPERAND2_ALPHA* = 0x859A.GLenum
  GL_OPERAND2_ALPHA_ARB* = 0x859A.GLenum
  GL_OPERAND2_ALPHA_EXT* = 0x859A.GLenum
  GL_OPERAND3_ALPHA_NV* = 0x859B.GLenum
  GL_PACK_SUBSAMPLE_RATE_SGIX* = 0x85A0.GLenum
  GL_UNPACK_SUBSAMPLE_RATE_SGIX* = 0x85A1.GLenum
  GL_PIXEL_SUBSAMPLE_4444_SGIX* = 0x85A2.GLenum
  GL_PIXEL_SUBSAMPLE_2424_SGIX* = 0x85A3.GLenum
  GL_PIXEL_SUBSAMPLE_4242_SGIX* = 0x85A4.GLenum
  GL_PERTURB_EXT* = 0x85AE.GLenum
  GL_TEXTURE_NORMAL_EXT* = 0x85AF.GLenum
  GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE* = 0x85B0.GLenum
  GL_TRANSFORM_HINT_APPLE* = 0x85B1.GLenum
  GL_UNPACK_CLIENT_STORAGE_APPLE* = 0x85B2.GLenum
  GL_BUFFER_OBJECT_APPLE* = 0x85B3.GLenum
  GL_STORAGE_CLIENT_APPLE* = 0x85B4.GLenum
  GL_VERTEX_ARRAY_BINDING* = 0x85B5.GLenum
  GL_VERTEX_ARRAY_BINDING_APPLE* = 0x85B5.GLenum
  GL_VERTEX_ARRAY_BINDING_OES* = 0x85B5.GLenum
  GL_TEXTURE_RANGE_LENGTH_APPLE* = 0x85B7.GLenum
  GL_TEXTURE_RANGE_POINTER_APPLE* = 0x85B8.GLenum
  GL_YCBCR_422_APPLE* = 0x85B9.GLenum
  GL_UNSIGNED_SHORT_8_8_APPLE* = 0x85BA.GLenum
  GL_UNSIGNED_SHORT_8_8_MESA* = 0x85BA.GLenum
  GL_UNSIGNED_SHORT_8_8_REV_APPLE* = 0x85BB.GLenum
  GL_UNSIGNED_SHORT_8_8_REV_MESA* = 0x85BB.GLenum
  GL_TEXTURE_STORAGE_HINT_APPLE* = 0x85BC.GLenum
  GL_STORAGE_PRIVATE_APPLE* = 0x85BD.GLenum
  GL_STORAGE_CACHED_APPLE* = 0x85BE.GLenum
  GL_STORAGE_SHARED_APPLE* = 0x85BF.GLenum
  GL_REPLACEMENT_CODE_ARRAY_SUN* = 0x85C0.GLenum
  GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN* = 0x85C1.GLenum
  GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN* = 0x85C2.GLenum
  GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN* = 0x85C3.GLenum
  GL_R1UI_V3F_SUN* = 0x85C4.GLenum
  GL_R1UI_C4UB_V3F_SUN* = 0x85C5.GLenum
  GL_R1UI_C3F_V3F_SUN* = 0x85C6.GLenum
  GL_R1UI_N3F_V3F_SUN* = 0x85C7.GLenum
  GL_R1UI_C4F_N3F_V3F_SUN* = 0x85C8.GLenum
  GL_R1UI_T2F_V3F_SUN* = 0x85C9.GLenum
  GL_R1UI_T2F_N3F_V3F_SUN* = 0x85CA.GLenum
  GL_R1UI_T2F_C4F_N3F_V3F_SUN* = 0x85CB.GLenum
  GL_SLICE_ACCUM_SUN* = 0x85CC.GLenum
  GL_QUAD_MESH_SUN* = 0x8614.GLenum
  GL_TRIANGLE_MESH_SUN* = 0x8615.GLenum
  GL_VERTEX_PROGRAM_ARB* = 0x8620.GLenum
  GL_VERTEX_PROGRAM_NV* = 0x8620.GLenum
  GL_VERTEX_STATE_PROGRAM_NV* = 0x8621.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ENABLED* = 0x8622.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB* = 0x8622.GLenum
  GL_ATTRIB_ARRAY_SIZE_NV* = 0x8623.GLenum
  GL_VERTEX_ATTRIB_ARRAY_SIZE* = 0x8623.GLenum
  GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB* = 0x8623.GLenum
  GL_ATTRIB_ARRAY_STRIDE_NV* = 0x8624.GLenum
  GL_VERTEX_ATTRIB_ARRAY_STRIDE* = 0x8624.GLenum
  GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB* = 0x8624.GLenum
  GL_ATTRIB_ARRAY_TYPE_NV* = 0x8625.GLenum
  GL_VERTEX_ATTRIB_ARRAY_TYPE* = 0x8625.GLenum
  GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB* = 0x8625.GLenum
  GL_CURRENT_ATTRIB_NV* = 0x8626.GLenum
  GL_CURRENT_VERTEX_ATTRIB* = 0x8626.GLenum
  GL_CURRENT_VERTEX_ATTRIB_ARB* = 0x8626.GLenum
  GL_PROGRAM_LENGTH_ARB* = 0x8627.GLenum
  GL_PROGRAM_LENGTH_NV* = 0x8627.GLenum
  GL_PROGRAM_STRING_ARB* = 0x8628.GLenum
  GL_PROGRAM_STRING_NV* = 0x8628.GLenum
  GL_MODELVIEW_PROJECTION_NV* = 0x8629.GLenum
  GL_IDENTITY_NV* = 0x862A.GLenum
  GL_INVERSE_NV* = 0x862B.GLenum
  GL_TRANSPOSE_NV* = 0x862C.GLenum
  GL_INVERSE_TRANSPOSE_NV* = 0x862D.GLenum
  GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB* = 0x862E.GLenum
  GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV* = 0x862E.GLenum
  GL_MAX_PROGRAM_MATRICES_ARB* = 0x862F.GLenum
  GL_MAX_TRACK_MATRICES_NV* = 0x862F.GLenum
  GL_MATRIX0_NV* = 0x8630.GLenum
  GL_MATRIX1_NV* = 0x8631.GLenum
  GL_MATRIX2_NV* = 0x8632.GLenum
  GL_MATRIX3_NV* = 0x8633.GLenum
  GL_MATRIX4_NV* = 0x8634.GLenum
  GL_MATRIX5_NV* = 0x8635.GLenum
  GL_MATRIX6_NV* = 0x8636.GLenum
  GL_MATRIX7_NV* = 0x8637.GLenum
  GL_CURRENT_MATRIX_STACK_DEPTH_ARB* = 0x8640.GLenum
  GL_CURRENT_MATRIX_STACK_DEPTH_NV* = 0x8640.GLenum
  GL_CURRENT_MATRIX_ARB* = 0x8641.GLenum
  GL_CURRENT_MATRIX_NV* = 0x8641.GLenum
  GL_VERTEX_PROGRAM_POINT_SIZE* = 0x8642.GLenum
  GL_VERTEX_PROGRAM_POINT_SIZE_ARB* = 0x8642.GLenum
  GL_VERTEX_PROGRAM_POINT_SIZE_NV* = 0x8642.GLenum
  GL_PROGRAM_POINT_SIZE* = 0x8642.GLenum
  GL_PROGRAM_POINT_SIZE_ARB* = 0x8642.GLenum
  GL_PROGRAM_POINT_SIZE_EXT* = 0x8642.GLenum
  GL_VERTEX_PROGRAM_TWO_SIDE* = 0x8643.GLenum
  GL_VERTEX_PROGRAM_TWO_SIDE_ARB* = 0x8643.GLenum
  GL_VERTEX_PROGRAM_TWO_SIDE_NV* = 0x8643.GLenum
  GL_PROGRAM_PARAMETER_NV* = 0x8644.GLenum
  GL_ATTRIB_ARRAY_POINTER_NV* = 0x8645.GLenum
  GL_VERTEX_ATTRIB_ARRAY_POINTER* = 0x8645.GLenum
  GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB* = 0x8645.GLenum
  GL_PROGRAM_TARGET_NV* = 0x8646.GLenum
  GL_PROGRAM_RESIDENT_NV* = 0x8647.GLenum
  GL_TRACK_MATRIX_NV* = 0x8648.GLenum
  GL_TRACK_MATRIX_TRANSFORM_NV* = 0x8649.GLenum
  GL_VERTEX_PROGRAM_BINDING_NV* = 0x864A.GLenum
  GL_PROGRAM_ERROR_POSITION_ARB* = 0x864B.GLenum
  GL_PROGRAM_ERROR_POSITION_NV* = 0x864B.GLenum
  GL_OFFSET_TEXTURE_RECTANGLE_NV* = 0x864C.GLenum
  GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV* = 0x864D.GLenum
  GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV* = 0x864E.GLenum
  GL_DEPTH_CLAMP* = 0x864F.GLenum
  GL_DEPTH_CLAMP_NV* = 0x864F.GLenum
  GL_DEPTH_CLAMP_EXT* = 0x864F.GLenum
  GL_VERTEX_ATTRIB_ARRAY0_NV* = 0x8650.GLenum
  GL_VERTEX_ATTRIB_ARRAY1_NV* = 0x8651.GLenum
  GL_VERTEX_ATTRIB_ARRAY2_NV* = 0x8652.GLenum
  GL_VERTEX_ATTRIB_ARRAY3_NV* = 0x8653.GLenum
  GL_VERTEX_ATTRIB_ARRAY4_NV* = 0x8654.GLenum
  GL_VERTEX_ATTRIB_ARRAY5_NV* = 0x8655.GLenum
  GL_VERTEX_ATTRIB_ARRAY6_NV* = 0x8656.GLenum
  GL_VERTEX_ATTRIB_ARRAY7_NV* = 0x8657.GLenum
  GL_VERTEX_ATTRIB_ARRAY8_NV* = 0x8658.GLenum
  GL_VERTEX_ATTRIB_ARRAY9_NV* = 0x8659.GLenum
  GL_VERTEX_ATTRIB_ARRAY10_NV* = 0x865A.GLenum
  GL_VERTEX_ATTRIB_ARRAY11_NV* = 0x865B.GLenum
  GL_VERTEX_ATTRIB_ARRAY12_NV* = 0x865C.GLenum
  GL_VERTEX_ATTRIB_ARRAY13_NV* = 0x865D.GLenum
  GL_VERTEX_ATTRIB_ARRAY14_NV* = 0x865E.GLenum
  GL_VERTEX_ATTRIB_ARRAY15_NV* = 0x865F.GLenum
  GL_MAP1_VERTEX_ATTRIB0_4_NV* = 0x8660.GLenum
  GL_MAP1_VERTEX_ATTRIB1_4_NV* = 0x8661.GLenum
  GL_MAP1_VERTEX_ATTRIB2_4_NV* = 0x8662.GLenum
  GL_MAP1_VERTEX_ATTRIB3_4_NV* = 0x8663.GLenum
  GL_MAP1_VERTEX_ATTRIB4_4_NV* = 0x8664.GLenum
  GL_MAP1_VERTEX_ATTRIB5_4_NV* = 0x8665.GLenum
  GL_MAP1_VERTEX_ATTRIB6_4_NV* = 0x8666.GLenum
  GL_MAP1_VERTEX_ATTRIB7_4_NV* = 0x8667.GLenum
  GL_MAP1_VERTEX_ATTRIB8_4_NV* = 0x8668.GLenum
  GL_MAP1_VERTEX_ATTRIB9_4_NV* = 0x8669.GLenum
  GL_MAP1_VERTEX_ATTRIB10_4_NV* = 0x866A.GLenum
  GL_MAP1_VERTEX_ATTRIB11_4_NV* = 0x866B.GLenum
  GL_MAP1_VERTEX_ATTRIB12_4_NV* = 0x866C.GLenum
  GL_MAP1_VERTEX_ATTRIB13_4_NV* = 0x866D.GLenum
  GL_MAP1_VERTEX_ATTRIB14_4_NV* = 0x866E.GLenum
  GL_MAP1_VERTEX_ATTRIB15_4_NV* = 0x866F.GLenum
  GL_MAP2_VERTEX_ATTRIB0_4_NV* = 0x8670.GLenum
  GL_MAP2_VERTEX_ATTRIB1_4_NV* = 0x8671.GLenum
  GL_MAP2_VERTEX_ATTRIB2_4_NV* = 0x8672.GLenum
  GL_MAP2_VERTEX_ATTRIB3_4_NV* = 0x8673.GLenum
  GL_MAP2_VERTEX_ATTRIB4_4_NV* = 0x8674.GLenum
  GL_MAP2_VERTEX_ATTRIB5_4_NV* = 0x8675.GLenum
  GL_MAP2_VERTEX_ATTRIB6_4_NV* = 0x8676.GLenum
  GL_MAP2_VERTEX_ATTRIB7_4_NV* = 0x8677.GLenum
  GL_PROGRAM_BINDING_ARB* = 0x8677.GLenum ## NOT an alias. Accidental reuse of GL_MAP2_VERTEX_ATTRIB7_4_NV
  GL_MAP2_VERTEX_ATTRIB8_4_NV* = 0x8678.GLenum
  GL_MAP2_VERTEX_ATTRIB9_4_NV* = 0x8679.GLenum
  GL_MAP2_VERTEX_ATTRIB10_4_NV* = 0x867A.GLenum
  GL_MAP2_VERTEX_ATTRIB11_4_NV* = 0x867B.GLenum
  GL_MAP2_VERTEX_ATTRIB12_4_NV* = 0x867C.GLenum
  GL_MAP2_VERTEX_ATTRIB13_4_NV* = 0x867D.GLenum
  GL_MAP2_VERTEX_ATTRIB14_4_NV* = 0x867E.GLenum
  GL_MAP2_VERTEX_ATTRIB15_4_NV* = 0x867F.GLenum
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE* = 0x86A0.GLenum
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB* = 0x86A0.GLenum
  GL_TEXTURE_COMPRESSED* = 0x86A1.GLenum
  GL_TEXTURE_COMPRESSED_ARB* = 0x86A1.GLenum
  GL_NUM_COMPRESSED_TEXTURE_FORMATS* = 0x86A2.GLenum
  GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB* = 0x86A2.GLenum
  GL_COMPRESSED_TEXTURE_FORMATS* = 0x86A3.GLenum
  GL_COMPRESSED_TEXTURE_FORMATS_ARB* = 0x86A3.GLenum
  GL_MAX_VERTEX_UNITS_ARB* = 0x86A4.GLenum
  GL_MAX_VERTEX_UNITS_OES* = 0x86A4.GLenum
  GL_ACTIVE_VERTEX_UNITS_ARB* = 0x86A5.GLenum
  GL_WEIGHT_SUM_UNITY_ARB* = 0x86A6.GLenum
  GL_VERTEX_BLEND_ARB* = 0x86A7.GLenum
  GL_CURRENT_WEIGHT_ARB* = 0x86A8.GLenum
  GL_WEIGHT_ARRAY_TYPE_ARB* = 0x86A9.GLenum
  GL_WEIGHT_ARRAY_TYPE_OES* = 0x86A9.GLenum
  GL_WEIGHT_ARRAY_STRIDE_ARB* = 0x86AA.GLenum
  GL_WEIGHT_ARRAY_STRIDE_OES* = 0x86AA.GLenum
  GL_WEIGHT_ARRAY_SIZE_ARB* = 0x86AB.GLenum
  GL_WEIGHT_ARRAY_SIZE_OES* = 0x86AB.GLenum
  GL_WEIGHT_ARRAY_POINTER_ARB* = 0x86AC.GLenum
  GL_WEIGHT_ARRAY_POINTER_OES* = 0x86AC.GLenum
  GL_WEIGHT_ARRAY_ARB* = 0x86AD.GLenum
  GL_WEIGHT_ARRAY_OES* = 0x86AD.GLenum
  GL_DOT3_RGB* = 0x86AE.GLenum
  GL_DOT3_RGB_ARB* = 0x86AE.GLenum
  GL_DOT3_RGBA* = 0x86AF.GLenum
  GL_DOT3_RGBA_ARB* = 0x86AF.GLenum
  GL_DOT3_RGBA_IMG* = 0x86AF.GLenum
  GL_COMPRESSED_RGB_FXT1_3DFX* = 0x86B0.GLenum
  GL_COMPRESSED_RGBA_FXT1_3DFX* = 0x86B1.GLenum
  GL_MULTISAMPLE_3DFX* = 0x86B2.GLenum
  GL_SAMPLE_BUFFERS_3DFX* = 0x86B3.GLenum
  GL_SAMPLES_3DFX* = 0x86B4.GLenum
  GL_EVAL_2D_NV* = 0x86C0.GLenum
  GL_EVAL_TRIANGULAR_2D_NV* = 0x86C1.GLenum
  GL_MAP_TESSELLATION_NV* = 0x86C2.GLenum
  GL_MAP_ATTRIB_U_ORDER_NV* = 0x86C3.GLenum
  GL_MAP_ATTRIB_V_ORDER_NV* = 0x86C4.GLenum
  GL_EVAL_FRACTIONAL_TESSELLATION_NV* = 0x86C5.GLenum
  GL_EVAL_VERTEX_ATTRIB0_NV* = 0x86C6.GLenum
  GL_EVAL_VERTEX_ATTRIB1_NV* = 0x86C7.GLenum
  GL_EVAL_VERTEX_ATTRIB2_NV* = 0x86C8.GLenum
  GL_EVAL_VERTEX_ATTRIB3_NV* = 0x86C9.GLenum
  GL_EVAL_VERTEX_ATTRIB4_NV* = 0x86CA.GLenum
  GL_EVAL_VERTEX_ATTRIB5_NV* = 0x86CB.GLenum
  GL_EVAL_VERTEX_ATTRIB6_NV* = 0x86CC.GLenum
  GL_EVAL_VERTEX_ATTRIB7_NV* = 0x86CD.GLenum
  GL_EVAL_VERTEX_ATTRIB8_NV* = 0x86CE.GLenum
  GL_EVAL_VERTEX_ATTRIB9_NV* = 0x86CF.GLenum
  GL_EVAL_VERTEX_ATTRIB10_NV* = 0x86D0.GLenum
  GL_EVAL_VERTEX_ATTRIB11_NV* = 0x86D1.GLenum
  GL_EVAL_VERTEX_ATTRIB12_NV* = 0x86D2.GLenum
  GL_EVAL_VERTEX_ATTRIB13_NV* = 0x86D3.GLenum
  GL_EVAL_VERTEX_ATTRIB14_NV* = 0x86D4.GLenum
  GL_EVAL_VERTEX_ATTRIB15_NV* = 0x86D5.GLenum
  GL_MAX_MAP_TESSELLATION_NV* = 0x86D6.GLenum
  GL_MAX_RATIONAL_EVAL_ORDER_NV* = 0x86D7.GLenum
  GL_MAX_PROGRAM_PATCH_ATTRIBS_NV* = 0x86D8.GLenum
  GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV* = 0x86D9.GLenum
  GL_UNSIGNED_INT_S8_S8_8_8_NV* = 0x86DA.GLenum
  GL_UNSIGNED_INT_8_8_S8_S8_REV_NV* = 0x86DB.GLenum
  GL_DSDT_MAG_INTENSITY_NV* = 0x86DC.GLenum
  GL_SHADER_CONSISTENT_NV* = 0x86DD.GLenum
  GL_TEXTURE_SHADER_NV* = 0x86DE.GLenum
  GL_SHADER_OPERATION_NV* = 0x86DF.GLenum
  GL_CULL_MODES_NV* = 0x86E0.GLenum
  GL_OFFSET_TEXTURE_MATRIX_NV* = 0x86E1.GLenum
  GL_OFFSET_TEXTURE_2D_MATRIX_NV* = 0x86E1.GLenum
  GL_OFFSET_TEXTURE_SCALE_NV* = 0x86E2.GLenum
  GL_OFFSET_TEXTURE_2D_SCALE_NV* = 0x86E2.GLenum
  GL_OFFSET_TEXTURE_BIAS_NV* = 0x86E3.GLenum
  GL_OFFSET_TEXTURE_2D_BIAS_NV* = 0x86E3.GLenum
  GL_PREVIOUS_TEXTURE_INPUT_NV* = 0x86E4.GLenum
  GL_CONST_EYE_NV* = 0x86E5.GLenum
  GL_PASS_THROUGH_NV* = 0x86E6.GLenum
  GL_CULL_FRAGMENT_NV* = 0x86E7.GLenum
  GL_OFFSET_TEXTURE_2D_NV* = 0x86E8.GLenum
  GL_DEPENDENT_AR_TEXTURE_2D_NV* = 0x86E9.GLenum
  GL_DEPENDENT_GB_TEXTURE_2D_NV* = 0x86EA.GLenum
  GL_SURFACE_STATE_NV* = 0x86EB.GLenum
  GL_DOT_PRODUCT_NV* = 0x86EC.GLenum
  GL_DOT_PRODUCT_DEPTH_REPLACE_NV* = 0x86ED.GLenum
  GL_DOT_PRODUCT_TEXTURE_2D_NV* = 0x86EE.GLenum
  GL_DOT_PRODUCT_TEXTURE_3D_NV* = 0x86EF.GLenum
  GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV* = 0x86F0.GLenum
  GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV* = 0x86F1.GLenum
  GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV* = 0x86F2.GLenum
  GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV* = 0x86F3.GLenum
  GL_HILO_NV* = 0x86F4.GLenum
  GL_DSDT_NV* = 0x86F5.GLenum
  GL_DSDT_MAG_NV* = 0x86F6.GLenum
  GL_DSDT_MAG_VIB_NV* = 0x86F7.GLenum
  GL_HILO16_NV* = 0x86F8.GLenum
  GL_SIGNED_HILO_NV* = 0x86F9.GLenum
  GL_SIGNED_HILO16_NV* = 0x86FA.GLenum
  GL_SIGNED_RGBA_NV* = 0x86FB.GLenum
  GL_SIGNED_RGBA8_NV* = 0x86FC.GLenum
  GL_SURFACE_REGISTERED_NV* = 0x86FD.GLenum
  GL_SIGNED_RGB_NV* = 0x86FE.GLenum
  GL_SIGNED_RGB8_NV* = 0x86FF.GLenum
  GL_SURFACE_MAPPED_NV* = 0x8700.GLenum
  GL_SIGNED_LUMINANCE_NV* = 0x8701.GLenum
  GL_SIGNED_LUMINANCE8_NV* = 0x8702.GLenum
  GL_SIGNED_LUMINANCE_ALPHA_NV* = 0x8703.GLenum
  GL_SIGNED_LUMINANCE8_ALPHA8_NV* = 0x8704.GLenum
  GL_SIGNED_ALPHA_NV* = 0x8705.GLenum
  GL_SIGNED_ALPHA8_NV* = 0x8706.GLenum
  GL_SIGNED_INTENSITY_NV* = 0x8707.GLenum
  GL_SIGNED_INTENSITY8_NV* = 0x8708.GLenum
  GL_DSDT8_NV* = 0x8709.GLenum
  GL_DSDT8_MAG8_NV* = 0x870A.GLenum
  GL_DSDT8_MAG8_INTENSITY8_NV* = 0x870B.GLenum
  GL_SIGNED_RGB_UNSIGNED_ALPHA_NV* = 0x870C.GLenum
  GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV* = 0x870D.GLenum
  GL_HI_SCALE_NV* = 0x870E.GLenum
  GL_LO_SCALE_NV* = 0x870F.GLenum
  GL_DS_SCALE_NV* = 0x8710.GLenum
  GL_DT_SCALE_NV* = 0x8711.GLenum
  GL_MAGNITUDE_SCALE_NV* = 0x8712.GLenum
  GL_VIBRANCE_SCALE_NV* = 0x8713.GLenum
  GL_HI_BIAS_NV* = 0x8714.GLenum
  GL_LO_BIAS_NV* = 0x8715.GLenum
  GL_DS_BIAS_NV* = 0x8716.GLenum
  GL_DT_BIAS_NV* = 0x8717.GLenum
  GL_MAGNITUDE_BIAS_NV* = 0x8718.GLenum
  GL_VIBRANCE_BIAS_NV* = 0x8719.GLenum
  GL_TEXTURE_BORDER_VALUES_NV* = 0x871A.GLenum
  GL_TEXTURE_HI_SIZE_NV* = 0x871B.GLenum
  GL_TEXTURE_LO_SIZE_NV* = 0x871C.GLenum
  GL_TEXTURE_DS_SIZE_NV* = 0x871D.GLenum
  GL_TEXTURE_DT_SIZE_NV* = 0x871E.GLenum
  GL_TEXTURE_MAG_SIZE_NV* = 0x871F.GLenum
  GL_MODELVIEW2_ARB* = 0x8722.GLenum
  GL_MODELVIEW3_ARB* = 0x8723.GLenum
  GL_MODELVIEW4_ARB* = 0x8724.GLenum
  GL_MODELVIEW5_ARB* = 0x8725.GLenum
  GL_MODELVIEW6_ARB* = 0x8726.GLenum
  GL_MODELVIEW7_ARB* = 0x8727.GLenum
  GL_MODELVIEW8_ARB* = 0x8728.GLenum
  GL_MODELVIEW9_ARB* = 0x8729.GLenum
  GL_MODELVIEW10_ARB* = 0x872A.GLenum
  GL_MODELVIEW11_ARB* = 0x872B.GLenum
  GL_MODELVIEW12_ARB* = 0x872C.GLenum
  GL_MODELVIEW13_ARB* = 0x872D.GLenum
  GL_MODELVIEW14_ARB* = 0x872E.GLenum
  GL_MODELVIEW15_ARB* = 0x872F.GLenum
  GL_MODELVIEW16_ARB* = 0x8730.GLenum
  GL_MODELVIEW17_ARB* = 0x8731.GLenum
  GL_MODELVIEW18_ARB* = 0x8732.GLenum
  GL_MODELVIEW19_ARB* = 0x8733.GLenum
  GL_MODELVIEW20_ARB* = 0x8734.GLenum
  GL_MODELVIEW21_ARB* = 0x8735.GLenum
  GL_MODELVIEW22_ARB* = 0x8736.GLenum
  GL_MODELVIEW23_ARB* = 0x8737.GLenum
  GL_MODELVIEW24_ARB* = 0x8738.GLenum
  GL_MODELVIEW25_ARB* = 0x8739.GLenum
  GL_MODELVIEW26_ARB* = 0x873A.GLenum
  GL_MODELVIEW27_ARB* = 0x873B.GLenum
  GL_MODELVIEW28_ARB* = 0x873C.GLenum
  GL_MODELVIEW29_ARB* = 0x873D.GLenum
  GL_MODELVIEW30_ARB* = 0x873E.GLenum
  GL_MODELVIEW31_ARB* = 0x873F.GLenum
  GL_DOT3_RGB_EXT* = 0x8740.GLenum
  GL_Z400_BINARY_AMD* = 0x8740.GLenum ## NOT an alias. Accidental reuse of GL_DOT3_RGB_EXT
  GL_DOT3_RGBA_EXT* = 0x8741.GLenum
  GL_PROGRAM_BINARY_LENGTH_OES* = 0x8741.GLenum ## NOT an alias. Accidental reuse of GL_DOT3_RGBA_EXT
  GL_PROGRAM_BINARY_LENGTH* = 0x8741.GLenum
  GL_MIRROR_CLAMP_ATI* = 0x8742.GLenum
  GL_MIRROR_CLAMP_EXT* = 0x8742.GLenum
  GL_MIRROR_CLAMP_TO_EDGE* = 0x8743.GLenum
  GL_MIRROR_CLAMP_TO_EDGE_ATI* = 0x8743.GLenum
  GL_MIRROR_CLAMP_TO_EDGE_EXT* = 0x8743.GLenum
  GL_MODULATE_ADD_ATI* = 0x8744.GLenum
  GL_MODULATE_SIGNED_ADD_ATI* = 0x8745.GLenum
  GL_MODULATE_SUBTRACT_ATI* = 0x8746.GLenum
  GL_SET_AMD* = 0x874A.GLenum
  GL_REPLACE_VALUE_AMD* = 0x874B.GLenum
  GL_STENCIL_OP_VALUE_AMD* = 0x874C.GLenum
  GL_STENCIL_BACK_OP_VALUE_AMD* = 0x874D.GLenum
  GL_VERTEX_ATTRIB_ARRAY_LONG* = 0x874E.GLenum
  GL_OCCLUSION_QUERY_EVENT_MASK_AMD* = 0x874F.GLenum
  GL_DEPTH_STENCIL_MESA* = 0x8750.GLenum
  GL_UNSIGNED_INT_24_8_MESA* = 0x8751.GLenum
  GL_UNSIGNED_INT_8_24_REV_MESA* = 0x8752.GLenum
  GL_UNSIGNED_SHORT_15_1_MESA* = 0x8753.GLenum
  GL_UNSIGNED_SHORT_1_15_REV_MESA* = 0x8754.GLenum
  GL_TRACE_MASK_MESA* = 0x8755.GLenum
  GL_TRACE_NAME_MESA* = 0x8756.GLenum
  GL_YCBCR_MESA* = 0x8757.GLenum
  GL_PACK_INVERT_MESA* = 0x8758.GLenum
  GL_DEBUG_OBJECT_MESA* = 0x8759.GLenum ## NOT an alias. Accidental reuse of GL_TEXTURE_1D_STACK_MESAX
  GL_TEXTURE_1D_STACK_MESAX* = 0x8759.GLenum
  GL_DEBUG_PRINT_MESA* = 0x875A.GLenum ## NOT an alias. Accidental reuse of GL_TEXTURE_2D_STACK_MESAX
  GL_TEXTURE_2D_STACK_MESAX* = 0x875A.GLenum
  GL_DEBUG_ASSERT_MESA* = 0x875B.GLenum ## NOT an alias. Accidental reuse of GL_PROXY_TEXTURE_1D_STACK_MESAX
  GL_PROXY_TEXTURE_1D_STACK_MESAX* = 0x875B.GLenum
  GL_PROXY_TEXTURE_2D_STACK_MESAX* = 0x875C.GLenum
  GL_TEXTURE_1D_STACK_BINDING_MESAX* = 0x875D.GLenum
  GL_TEXTURE_2D_STACK_BINDING_MESAX* = 0x875E.GLenum
  GL_PROGRAM_BINARY_FORMAT_MESA* = 0x875F.GLenum
  GL_STATIC_ATI* = 0x8760.GLenum
  GL_DYNAMIC_ATI* = 0x8761.GLenum
  GL_PRESERVE_ATI* = 0x8762.GLenum
  GL_DISCARD_ATI* = 0x8763.GLenum
  GL_BUFFER_SIZE* = 0x8764.GLenum
  GL_BUFFER_SIZE_ARB* = 0x8764.GLenum
  GL_OBJECT_BUFFER_SIZE_ATI* = 0x8764.GLenum
  GL_BUFFER_USAGE* = 0x8765.GLenum
  GL_BUFFER_USAGE_ARB* = 0x8765.GLenum
  GL_OBJECT_BUFFER_USAGE_ATI* = 0x8765.GLenum
  GL_ARRAY_OBJECT_BUFFER_ATI* = 0x8766.GLenum
  GL_ARRAY_OBJECT_OFFSET_ATI* = 0x8767.GLenum
  GL_ELEMENT_ARRAY_ATI* = 0x8768.GLenum
  GL_ELEMENT_ARRAY_TYPE_ATI* = 0x8769.GLenum
  GL_ELEMENT_ARRAY_POINTER_ATI* = 0x876A.GLenum
  GL_MAX_VERTEX_STREAMS_ATI* = 0x876B.GLenum
  GL_VERTEX_STREAM0_ATI* = 0x876C.GLenum
  GL_VERTEX_STREAM1_ATI* = 0x876D.GLenum
  GL_VERTEX_STREAM2_ATI* = 0x876E.GLenum
  GL_VERTEX_STREAM3_ATI* = 0x876F.GLenum
  GL_VERTEX_STREAM4_ATI* = 0x8770.GLenum
  GL_VERTEX_STREAM5_ATI* = 0x8771.GLenum
  GL_VERTEX_STREAM6_ATI* = 0x8772.GLenum
  GL_VERTEX_STREAM7_ATI* = 0x8773.GLenum
  GL_VERTEX_SOURCE_ATI* = 0x8774.GLenum
  GL_BUMP_ROT_MATRIX_ATI* = 0x8775.GLenum
  GL_BUMP_ROT_MATRIX_SIZE_ATI* = 0x8776.GLenum
  GL_BUMP_NUM_TEX_UNITS_ATI* = 0x8777.GLenum
  GL_BUMP_TEX_UNITS_ATI* = 0x8778.GLenum
  GL_DUDV_ATI* = 0x8779.GLenum
  GL_DU8DV8_ATI* = 0x877A.GLenum
  GL_BUMP_ENVMAP_ATI* = 0x877B.GLenum
  GL_BUMP_TARGET_ATI* = 0x877C.GLenum
  GL_VERTEX_SHADER_EXT* = 0x8780.GLenum
  GL_VERTEX_SHADER_BINDING_EXT* = 0x8781.GLenum
  GL_OP_INDEX_EXT* = 0x8782.GLenum
  GL_OP_NEGATE_EXT* = 0x8783.GLenum
  GL_OP_DOT3_EXT* = 0x8784.GLenum
  GL_OP_DOT4_EXT* = 0x8785.GLenum
  GL_OP_MUL_EXT* = 0x8786.GLenum
  GL_OP_ADD_EXT* = 0x8787.GLenum
  GL_OP_MADD_EXT* = 0x8788.GLenum
  GL_OP_FRAC_EXT* = 0x8789.GLenum
  GL_OP_MAX_EXT* = 0x878A.GLenum
  GL_OP_MIN_EXT* = 0x878B.GLenum
  GL_OP_SET_GE_EXT* = 0x878C.GLenum
  GL_OP_SET_LT_EXT* = 0x878D.GLenum
  GL_OP_CLAMP_EXT* = 0x878E.GLenum
  GL_OP_FLOOR_EXT* = 0x878F.GLenum
  GL_OP_ROUND_EXT* = 0x8790.GLenum
  GL_OP_EXP_BASE_2_EXT* = 0x8791.GLenum
  GL_OP_LOG_BASE_2_EXT* = 0x8792.GLenum
  GL_OP_POWER_EXT* = 0x8793.GLenum
  GL_OP_RECIP_EXT* = 0x8794.GLenum
  GL_OP_RECIP_SQRT_EXT* = 0x8795.GLenum
  GL_OP_SUB_EXT* = 0x8796.GLenum
  GL_OP_CROSS_PRODUCT_EXT* = 0x8797.GLenum
  GL_OP_MULTIPLY_MATRIX_EXT* = 0x8798.GLenum
  GL_OP_MOV_EXT* = 0x8799.GLenum
  GL_OUTPUT_VERTEX_EXT* = 0x879A.GLenum
  GL_OUTPUT_COLOR0_EXT* = 0x879B.GLenum
  GL_OUTPUT_COLOR1_EXT* = 0x879C.GLenum
  GL_OUTPUT_TEXTURE_COORD0_EXT* = 0x879D.GLenum
  GL_OUTPUT_TEXTURE_COORD1_EXT* = 0x879E.GLenum
  GL_OUTPUT_TEXTURE_COORD2_EXT* = 0x879F.GLenum
  GL_OUTPUT_TEXTURE_COORD3_EXT* = 0x87A0.GLenum
  GL_OUTPUT_TEXTURE_COORD4_EXT* = 0x87A1.GLenum
  GL_OUTPUT_TEXTURE_COORD5_EXT* = 0x87A2.GLenum
  GL_OUTPUT_TEXTURE_COORD6_EXT* = 0x87A3.GLenum
  GL_OUTPUT_TEXTURE_COORD7_EXT* = 0x87A4.GLenum
  GL_OUTPUT_TEXTURE_COORD8_EXT* = 0x87A5.GLenum
  GL_OUTPUT_TEXTURE_COORD9_EXT* = 0x87A6.GLenum
  GL_OUTPUT_TEXTURE_COORD10_EXT* = 0x87A7.GLenum
  GL_OUTPUT_TEXTURE_COORD11_EXT* = 0x87A8.GLenum
  GL_OUTPUT_TEXTURE_COORD12_EXT* = 0x87A9.GLenum
  GL_OUTPUT_TEXTURE_COORD13_EXT* = 0x87AA.GLenum
  GL_OUTPUT_TEXTURE_COORD14_EXT* = 0x87AB.GLenum
  GL_OUTPUT_TEXTURE_COORD15_EXT* = 0x87AC.GLenum
  GL_OUTPUT_TEXTURE_COORD16_EXT* = 0x87AD.GLenum
  GL_OUTPUT_TEXTURE_COORD17_EXT* = 0x87AE.GLenum
  GL_OUTPUT_TEXTURE_COORD18_EXT* = 0x87AF.GLenum
  GL_OUTPUT_TEXTURE_COORD19_EXT* = 0x87B0.GLenum
  GL_OUTPUT_TEXTURE_COORD20_EXT* = 0x87B1.GLenum
  GL_OUTPUT_TEXTURE_COORD21_EXT* = 0x87B2.GLenum
  GL_OUTPUT_TEXTURE_COORD22_EXT* = 0x87B3.GLenum
  GL_OUTPUT_TEXTURE_COORD23_EXT* = 0x87B4.GLenum
  GL_OUTPUT_TEXTURE_COORD24_EXT* = 0x87B5.GLenum
  GL_OUTPUT_TEXTURE_COORD25_EXT* = 0x87B6.GLenum
  GL_OUTPUT_TEXTURE_COORD26_EXT* = 0x87B7.GLenum
  GL_OUTPUT_TEXTURE_COORD27_EXT* = 0x87B8.GLenum
  GL_OUTPUT_TEXTURE_COORD28_EXT* = 0x87B9.GLenum
  GL_OUTPUT_TEXTURE_COORD29_EXT* = 0x87BA.GLenum
  GL_OUTPUT_TEXTURE_COORD30_EXT* = 0x87BB.GLenum
  GL_OUTPUT_TEXTURE_COORD31_EXT* = 0x87BC.GLenum
  GL_OUTPUT_FOG_EXT* = 0x87BD.GLenum
  GL_SCALAR_EXT* = 0x87BE.GLenum
  GL_VECTOR_EXT* = 0x87BF.GLenum
  GL_MATRIX_EXT* = 0x87C0.GLenum
  GL_VARIANT_EXT* = 0x87C1.GLenum
  GL_INVARIANT_EXT* = 0x87C2.GLenum
  GL_LOCAL_CONSTANT_EXT* = 0x87C3.GLenum
  GL_LOCAL_EXT* = 0x87C4.GLenum
  GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT* = 0x87C5.GLenum
  GL_MAX_VERTEX_SHADER_VARIANTS_EXT* = 0x87C6.GLenum
  GL_MAX_VERTEX_SHADER_INVARIANTS_EXT* = 0x87C7.GLenum
  GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT* = 0x87C8.GLenum
  GL_MAX_VERTEX_SHADER_LOCALS_EXT* = 0x87C9.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT* = 0x87CA.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT* = 0x87CB.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT* = 0x87CC.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT* = 0x87CD.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT* = 0x87CE.GLenum
  GL_VERTEX_SHADER_INSTRUCTIONS_EXT* = 0x87CF.GLenum
  GL_VERTEX_SHADER_VARIANTS_EXT* = 0x87D0.GLenum
  GL_VERTEX_SHADER_INVARIANTS_EXT* = 0x87D1.GLenum
  GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT* = 0x87D2.GLenum
  GL_VERTEX_SHADER_LOCALS_EXT* = 0x87D3.GLenum
  GL_VERTEX_SHADER_OPTIMIZED_EXT* = 0x87D4.GLenum
  GL_X_EXT* = 0x87D5.GLenum
  GL_Y_EXT* = 0x87D6.GLenum
  GL_Z_EXT* = 0x87D7.GLenum
  GL_W_EXT* = 0x87D8.GLenum
  GL_NEGATIVE_X_EXT* = 0x87D9.GLenum
  GL_NEGATIVE_Y_EXT* = 0x87DA.GLenum
  GL_NEGATIVE_Z_EXT* = 0x87DB.GLenum
  GL_NEGATIVE_W_EXT* = 0x87DC.GLenum
  GL_ZERO_EXT* = 0x87DD.GLenum
  GL_ONE_EXT* = 0x87DE.GLenum
  GL_NEGATIVE_ONE_EXT* = 0x87DF.GLenum
  GL_NORMALIZED_RANGE_EXT* = 0x87E0.GLenum
  GL_FULL_RANGE_EXT* = 0x87E1.GLenum
  GL_CURRENT_VERTEX_EXT* = 0x87E2.GLenum
  GL_MVP_MATRIX_EXT* = 0x87E3.GLenum
  GL_VARIANT_VALUE_EXT* = 0x87E4.GLenum
  GL_VARIANT_DATATYPE_EXT* = 0x87E5.GLenum
  GL_VARIANT_ARRAY_STRIDE_EXT* = 0x87E6.GLenum
  GL_VARIANT_ARRAY_TYPE_EXT* = 0x87E7.GLenum
  GL_VARIANT_ARRAY_EXT* = 0x87E8.GLenum
  GL_VARIANT_ARRAY_POINTER_EXT* = 0x87E9.GLenum
  GL_INVARIANT_VALUE_EXT* = 0x87EA.GLenum
  GL_INVARIANT_DATATYPE_EXT* = 0x87EB.GLenum
  GL_LOCAL_CONSTANT_VALUE_EXT* = 0x87EC.GLenum
  GL_LOCAL_CONSTANT_DATATYPE_EXT* = 0x87ED.GLenum
  GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD* = 0x87EE.GLenum
  GL_PN_TRIANGLES_ATI* = 0x87F0.GLenum
  GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI* = 0x87F1.GLenum
  GL_PN_TRIANGLES_POINT_MODE_ATI* = 0x87F2.GLenum
  GL_PN_TRIANGLES_NORMAL_MODE_ATI* = 0x87F3.GLenum
  GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI* = 0x87F4.GLenum
  GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI* = 0x87F5.GLenum
  GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI* = 0x87F6.GLenum
  GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI* = 0x87F7.GLenum
  GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI* = 0x87F8.GLenum
  GL_3DC_X_AMD* = 0x87F9.GLenum
  GL_3DC_XY_AMD* = 0x87FA.GLenum
  GL_VBO_FREE_MEMORY_ATI* = 0x87FB.GLenum
  GL_TEXTURE_FREE_MEMORY_ATI* = 0x87FC.GLenum
  GL_RENDERBUFFER_FREE_MEMORY_ATI* = 0x87FD.GLenum
  GL_NUM_PROGRAM_BINARY_FORMATS* = 0x87FE.GLenum
  GL_NUM_PROGRAM_BINARY_FORMATS_OES* = 0x87FE.GLenum
  GL_PROGRAM_BINARY_FORMATS* = 0x87FF.GLenum
  GL_PROGRAM_BINARY_FORMATS_OES* = 0x87FF.GLenum
  GL_STENCIL_BACK_FUNC* = 0x8800.GLenum
  GL_STENCIL_BACK_FUNC_ATI* = 0x8800.GLenum
  GL_STENCIL_BACK_FAIL* = 0x8801.GLenum
  GL_STENCIL_BACK_FAIL_ATI* = 0x8801.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_FAIL* = 0x8802.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI* = 0x8802.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_PASS* = 0x8803.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI* = 0x8803.GLenum
  GL_FRAGMENT_PROGRAM_ARB* = 0x8804.GLenum
  GL_PROGRAM_ALU_INSTRUCTIONS_ARB* = 0x8805.GLenum
  GL_PROGRAM_TEX_INSTRUCTIONS_ARB* = 0x8806.GLenum
  GL_PROGRAM_TEX_INDIRECTIONS_ARB* = 0x8807.GLenum
  GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB* = 0x8808.GLenum
  GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB* = 0x8809.GLenum
  GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB* = 0x880A.GLenum
  GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB* = 0x880B.GLenum
  GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB* = 0x880C.GLenum
  GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB* = 0x880D.GLenum
  GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB* = 0x880E.GLenum
  GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB* = 0x880F.GLenum
  GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB* = 0x8810.GLenum
  GL_RGBA32F* = 0x8814.GLenum
  GL_RGBA32F_ARB* = 0x8814.GLenum
  GL_RGBA32F_EXT* = 0x8814.GLenum
  GL_RGBA_FLOAT32_APPLE* = 0x8814.GLenum
  GL_RGBA_FLOAT32_ATI* = 0x8814.GLenum
  GL_RGB32F* = 0x8815.GLenum
  GL_RGB32F_ARB* = 0x8815.GLenum
  GL_RGB32F_EXT* = 0x8815.GLenum
  GL_RGB_FLOAT32_APPLE* = 0x8815.GLenum
  GL_RGB_FLOAT32_ATI* = 0x8815.GLenum
  GL_ALPHA32F_ARB* = 0x8816.GLenum
  GL_ALPHA32F_EXT* = 0x8816.GLenum
  GL_ALPHA_FLOAT32_APPLE* = 0x8816.GLenum
  GL_ALPHA_FLOAT32_ATI* = 0x8816.GLenum
  GL_INTENSITY32F_ARB* = 0x8817.GLenum
  GL_INTENSITY_FLOAT32_APPLE* = 0x8817.GLenum
  GL_INTENSITY_FLOAT32_ATI* = 0x8817.GLenum
  GL_LUMINANCE32F_ARB* = 0x8818.GLenum
  GL_LUMINANCE32F_EXT* = 0x8818.GLenum
  GL_LUMINANCE_FLOAT32_APPLE* = 0x8818.GLenum
  GL_LUMINANCE_FLOAT32_ATI* = 0x8818.GLenum
  GL_LUMINANCE_ALPHA32F_ARB* = 0x8819.GLenum
  GL_LUMINANCE_ALPHA32F_EXT* = 0x8819.GLenum
  GL_LUMINANCE_ALPHA_FLOAT32_APPLE* = 0x8819.GLenum
  GL_LUMINANCE_ALPHA_FLOAT32_ATI* = 0x8819.GLenum
  GL_RGBA16F* = 0x881A.GLenum
  GL_RGBA16F_ARB* = 0x881A.GLenum
  GL_RGBA16F_EXT* = 0x881A.GLenum
  GL_RGBA_FLOAT16_APPLE* = 0x881A.GLenum
  GL_RGBA_FLOAT16_ATI* = 0x881A.GLenum
  GL_RGB16F* = 0x881B.GLenum
  GL_RGB16F_ARB* = 0x881B.GLenum
  GL_RGB16F_EXT* = 0x881B.GLenum
  GL_RGB_FLOAT16_APPLE* = 0x881B.GLenum
  GL_RGB_FLOAT16_ATI* = 0x881B.GLenum
  GL_ALPHA16F_ARB* = 0x881C.GLenum
  GL_ALPHA16F_EXT* = 0x881C.GLenum
  GL_ALPHA_FLOAT16_APPLE* = 0x881C.GLenum
  GL_ALPHA_FLOAT16_ATI* = 0x881C.GLenum
  GL_INTENSITY16F_ARB* = 0x881D.GLenum
  GL_INTENSITY_FLOAT16_APPLE* = 0x881D.GLenum
  GL_INTENSITY_FLOAT16_ATI* = 0x881D.GLenum
  GL_LUMINANCE16F_ARB* = 0x881E.GLenum
  GL_LUMINANCE16F_EXT* = 0x881E.GLenum
  GL_LUMINANCE_FLOAT16_APPLE* = 0x881E.GLenum
  GL_LUMINANCE_FLOAT16_ATI* = 0x881E.GLenum
  GL_LUMINANCE_ALPHA16F_ARB* = 0x881F.GLenum
  GL_LUMINANCE_ALPHA16F_EXT* = 0x881F.GLenum
  GL_LUMINANCE_ALPHA_FLOAT16_APPLE* = 0x881F.GLenum
  GL_LUMINANCE_ALPHA_FLOAT16_ATI* = 0x881F.GLenum
  GL_RGBA_FLOAT_MODE_ARB* = 0x8820.GLenum
  GL_RGBA_FLOAT_MODE_ATI* = 0x8820.GLenum
  GL_WRITEONLY_RENDERING_QCOM* = 0x8823.GLenum
  GL_MAX_DRAW_BUFFERS* = 0x8824.GLenum
  GL_MAX_DRAW_BUFFERS_ARB* = 0x8824.GLenum
  GL_MAX_DRAW_BUFFERS_ATI* = 0x8824.GLenum
  GL_MAX_DRAW_BUFFERS_EXT* = 0x8824.GLenum
  GL_MAX_DRAW_BUFFERS_NV* = 0x8824.GLenum
  GL_DRAW_BUFFER0* = 0x8825.GLenum
  GL_DRAW_BUFFER0_ARB* = 0x8825.GLenum
  GL_DRAW_BUFFER0_ATI* = 0x8825.GLenum
  GL_DRAW_BUFFER0_EXT* = 0x8825.GLenum
  GL_DRAW_BUFFER0_NV* = 0x8825.GLenum
  GL_DRAW_BUFFER1* = 0x8826.GLenum
  GL_DRAW_BUFFER1_ARB* = 0x8826.GLenum
  GL_DRAW_BUFFER1_ATI* = 0x8826.GLenum
  GL_DRAW_BUFFER1_EXT* = 0x8826.GLenum
  GL_DRAW_BUFFER1_NV* = 0x8826.GLenum
  GL_DRAW_BUFFER2* = 0x8827.GLenum
  GL_DRAW_BUFFER2_ARB* = 0x8827.GLenum
  GL_DRAW_BUFFER2_ATI* = 0x8827.GLenum
  GL_DRAW_BUFFER2_EXT* = 0x8827.GLenum
  GL_DRAW_BUFFER2_NV* = 0x8827.GLenum
  GL_DRAW_BUFFER3* = 0x8828.GLenum
  GL_DRAW_BUFFER3_ARB* = 0x8828.GLenum
  GL_DRAW_BUFFER3_ATI* = 0x8828.GLenum
  GL_DRAW_BUFFER3_EXT* = 0x8828.GLenum
  GL_DRAW_BUFFER3_NV* = 0x8828.GLenum
  GL_DRAW_BUFFER4* = 0x8829.GLenum
  GL_DRAW_BUFFER4_ARB* = 0x8829.GLenum
  GL_DRAW_BUFFER4_ATI* = 0x8829.GLenum
  GL_DRAW_BUFFER4_EXT* = 0x8829.GLenum
  GL_DRAW_BUFFER4_NV* = 0x8829.GLenum
  GL_DRAW_BUFFER5* = 0x882A.GLenum
  GL_DRAW_BUFFER5_ARB* = 0x882A.GLenum
  GL_DRAW_BUFFER5_ATI* = 0x882A.GLenum
  GL_DRAW_BUFFER5_EXT* = 0x882A.GLenum
  GL_DRAW_BUFFER5_NV* = 0x882A.GLenum
  GL_DRAW_BUFFER6* = 0x882B.GLenum
  GL_DRAW_BUFFER6_ARB* = 0x882B.GLenum
  GL_DRAW_BUFFER6_ATI* = 0x882B.GLenum
  GL_DRAW_BUFFER6_EXT* = 0x882B.GLenum
  GL_DRAW_BUFFER6_NV* = 0x882B.GLenum
  GL_DRAW_BUFFER7* = 0x882C.GLenum
  GL_DRAW_BUFFER7_ARB* = 0x882C.GLenum
  GL_DRAW_BUFFER7_ATI* = 0x882C.GLenum
  GL_DRAW_BUFFER7_EXT* = 0x882C.GLenum
  GL_DRAW_BUFFER7_NV* = 0x882C.GLenum
  GL_DRAW_BUFFER8* = 0x882D.GLenum
  GL_DRAW_BUFFER8_ARB* = 0x882D.GLenum
  GL_DRAW_BUFFER8_ATI* = 0x882D.GLenum
  GL_DRAW_BUFFER8_EXT* = 0x882D.GLenum
  GL_DRAW_BUFFER8_NV* = 0x882D.GLenum
  GL_DRAW_BUFFER9* = 0x882E.GLenum
  GL_DRAW_BUFFER9_ARB* = 0x882E.GLenum
  GL_DRAW_BUFFER9_ATI* = 0x882E.GLenum
  GL_DRAW_BUFFER9_EXT* = 0x882E.GLenum
  GL_DRAW_BUFFER9_NV* = 0x882E.GLenum
  GL_DRAW_BUFFER10* = 0x882F.GLenum
  GL_DRAW_BUFFER10_ARB* = 0x882F.GLenum
  GL_DRAW_BUFFER10_ATI* = 0x882F.GLenum
  GL_DRAW_BUFFER10_EXT* = 0x882F.GLenum
  GL_DRAW_BUFFER10_NV* = 0x882F.GLenum
  GL_DRAW_BUFFER11* = 0x8830.GLenum
  GL_DRAW_BUFFER11_ARB* = 0x8830.GLenum
  GL_DRAW_BUFFER11_ATI* = 0x8830.GLenum
  GL_DRAW_BUFFER11_EXT* = 0x8830.GLenum
  GL_DRAW_BUFFER11_NV* = 0x8830.GLenum
  GL_DRAW_BUFFER12* = 0x8831.GLenum
  GL_DRAW_BUFFER12_ARB* = 0x8831.GLenum
  GL_DRAW_BUFFER12_ATI* = 0x8831.GLenum
  GL_DRAW_BUFFER12_EXT* = 0x8831.GLenum
  GL_DRAW_BUFFER12_NV* = 0x8831.GLenum
  GL_DRAW_BUFFER13* = 0x8832.GLenum
  GL_DRAW_BUFFER13_ARB* = 0x8832.GLenum
  GL_DRAW_BUFFER13_ATI* = 0x8832.GLenum
  GL_DRAW_BUFFER13_EXT* = 0x8832.GLenum
  GL_DRAW_BUFFER13_NV* = 0x8832.GLenum
  GL_DRAW_BUFFER14* = 0x8833.GLenum
  GL_DRAW_BUFFER14_ARB* = 0x8833.GLenum
  GL_DRAW_BUFFER14_ATI* = 0x8833.GLenum
  GL_DRAW_BUFFER14_EXT* = 0x8833.GLenum
  GL_DRAW_BUFFER14_NV* = 0x8833.GLenum
  GL_DRAW_BUFFER15* = 0x8834.GLenum
  GL_DRAW_BUFFER15_ARB* = 0x8834.GLenum
  GL_DRAW_BUFFER15_ATI* = 0x8834.GLenum
  GL_DRAW_BUFFER15_EXT* = 0x8834.GLenum
  GL_DRAW_BUFFER15_NV* = 0x8834.GLenum
  GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI* = 0x8835.GLenum
  GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI* = 0x8837.GLenum ## Defined by Mesa but not ATI
  GL_BLEND_EQUATION_ALPHA* = 0x883D.GLenum
  GL_BLEND_EQUATION_ALPHA_EXT* = 0x883D.GLenum
  GL_BLEND_EQUATION_ALPHA_OES* = 0x883D.GLenum
  GL_SUBSAMPLE_DISTANCE_AMD* = 0x883F.GLenum
  GL_MATRIX_PALETTE_ARB* = 0x8840.GLenum
  GL_MATRIX_PALETTE_OES* = 0x8840.GLenum
  GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB* = 0x8841.GLenum
  GL_MAX_PALETTE_MATRICES_ARB* = 0x8842.GLenum
  GL_MAX_PALETTE_MATRICES_OES* = 0x8842.GLenum
  GL_CURRENT_PALETTE_MATRIX_ARB* = 0x8843.GLenum
  GL_CURRENT_PALETTE_MATRIX_OES* = 0x8843.GLenum
  GL_MATRIX_INDEX_ARRAY_ARB* = 0x8844.GLenum
  GL_MATRIX_INDEX_ARRAY_OES* = 0x8844.GLenum
  GL_CURRENT_MATRIX_INDEX_ARB* = 0x8845.GLenum
  GL_MATRIX_INDEX_ARRAY_SIZE_ARB* = 0x8846.GLenum
  GL_MATRIX_INDEX_ARRAY_SIZE_OES* = 0x8846.GLenum
  GL_MATRIX_INDEX_ARRAY_TYPE_ARB* = 0x8847.GLenum
  GL_MATRIX_INDEX_ARRAY_TYPE_OES* = 0x8847.GLenum
  GL_MATRIX_INDEX_ARRAY_STRIDE_ARB* = 0x8848.GLenum
  GL_MATRIX_INDEX_ARRAY_STRIDE_OES* = 0x8848.GLenum
  GL_MATRIX_INDEX_ARRAY_POINTER_ARB* = 0x8849.GLenum
  GL_MATRIX_INDEX_ARRAY_POINTER_OES* = 0x8849.GLenum
  GL_TEXTURE_DEPTH_SIZE* = 0x884A.GLenum
  GL_TEXTURE_DEPTH_SIZE_ARB* = 0x884A.GLenum
  GL_DEPTH_TEXTURE_MODE* = 0x884B.GLenum
  GL_DEPTH_TEXTURE_MODE_ARB* = 0x884B.GLenum
  GL_TEXTURE_COMPARE_MODE* = 0x884C.GLenum
  GL_TEXTURE_COMPARE_MODE_ARB* = 0x884C.GLenum
  GL_TEXTURE_COMPARE_MODE_EXT* = 0x884C.GLenum
  GL_TEXTURE_COMPARE_FUNC* = 0x884D.GLenum
  GL_TEXTURE_COMPARE_FUNC_ARB* = 0x884D.GLenum
  GL_TEXTURE_COMPARE_FUNC_EXT* = 0x884D.GLenum
  GL_COMPARE_R_TO_TEXTURE* = 0x884E.GLenum
  GL_COMPARE_R_TO_TEXTURE_ARB* = 0x884E.GLenum
  GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT* = 0x884E.GLenum
  GL_COMPARE_REF_TO_TEXTURE* = 0x884E.GLenum
  GL_COMPARE_REF_TO_TEXTURE_EXT* = 0x884E.GLenum
  GL_TEXTURE_CUBE_MAP_SEAMLESS* = 0x884F.GLenum
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV* = 0x8850.GLenum
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV* = 0x8851.GLenum
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV* = 0x8852.GLenum
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV* = 0x8853.GLenum
  GL_OFFSET_HILO_TEXTURE_2D_NV* = 0x8854.GLenum
  GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV* = 0x8855.GLenum
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV* = 0x8856.GLenum
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV* = 0x8857.GLenum
  GL_DEPENDENT_HILO_TEXTURE_2D_NV* = 0x8858.GLenum
  GL_DEPENDENT_RGB_TEXTURE_3D_NV* = 0x8859.GLenum
  GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV* = 0x885A.GLenum
  GL_DOT_PRODUCT_PASS_THROUGH_NV* = 0x885B.GLenum
  GL_DOT_PRODUCT_TEXTURE_1D_NV* = 0x885C.GLenum
  GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV* = 0x885D.GLenum
  GL_HILO8_NV* = 0x885E.GLenum
  GL_SIGNED_HILO8_NV* = 0x885F.GLenum
  GL_FORCE_BLUE_TO_ONE_NV* = 0x8860.GLenum
  GL_POINT_SPRITE* = 0x8861.GLenum
  GL_POINT_SPRITE_ARB* = 0x8861.GLenum
  GL_POINT_SPRITE_NV* = 0x8861.GLenum
  GL_POINT_SPRITE_OES* = 0x8861.GLenum
  GL_COORD_REPLACE* = 0x8862.GLenum
  GL_COORD_REPLACE_ARB* = 0x8862.GLenum
  GL_COORD_REPLACE_NV* = 0x8862.GLenum
  GL_COORD_REPLACE_OES* = 0x8862.GLenum
  GL_POINT_SPRITE_R_MODE_NV* = 0x8863.GLenum
  GL_PIXEL_COUNTER_BITS_NV* = 0x8864.GLenum
  GL_QUERY_COUNTER_BITS* = 0x8864.GLenum
  GL_QUERY_COUNTER_BITS_ARB* = 0x8864.GLenum
  GL_QUERY_COUNTER_BITS_EXT* = 0x8864.GLenum
  GL_CURRENT_OCCLUSION_QUERY_ID_NV* = 0x8865.GLenum
  GL_CURRENT_QUERY* = 0x8865.GLenum
  GL_CURRENT_QUERY_ARB* = 0x8865.GLenum
  GL_CURRENT_QUERY_EXT* = 0x8865.GLenum
  GL_PIXEL_COUNT_NV* = 0x8866.GLenum
  GL_QUERY_RESULT* = 0x8866.GLenum
  GL_QUERY_RESULT_ARB* = 0x8866.GLenum
  GL_QUERY_RESULT_EXT* = 0x8866.GLenum
  GL_PIXEL_COUNT_AVAILABLE_NV* = 0x8867.GLenum
  GL_QUERY_RESULT_AVAILABLE* = 0x8867.GLenum
  GL_QUERY_RESULT_AVAILABLE_ARB* = 0x8867.GLenum
  GL_QUERY_RESULT_AVAILABLE_EXT* = 0x8867.GLenum
  GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV* = 0x8868.GLenum
  GL_MAX_VERTEX_ATTRIBS* = 0x8869.GLenum
  GL_MAX_VERTEX_ATTRIBS_ARB* = 0x8869.GLenum
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED* = 0x886A.GLenum
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB* = 0x886A.GLenum
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS* = 0x886C.GLenum
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT* = 0x886C.GLenum
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES* = 0x886C.GLenum
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS* = 0x886D.GLenum
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT* = 0x886D.GLenum
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES* = 0x886D.GLenum
  GL_DEPTH_STENCIL_TO_RGBA_NV* = 0x886E.GLenum
  GL_DEPTH_STENCIL_TO_BGRA_NV* = 0x886F.GLenum
  GL_FRAGMENT_PROGRAM_NV* = 0x8870.GLenum
  GL_MAX_TEXTURE_COORDS* = 0x8871.GLenum
  GL_MAX_TEXTURE_COORDS_ARB* = 0x8871.GLenum
  GL_MAX_TEXTURE_COORDS_NV* = 0x8871.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS* = 0x8872.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS_ARB* = 0x8872.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS_NV* = 0x8872.GLenum
  GL_FRAGMENT_PROGRAM_BINDING_NV* = 0x8873.GLenum
  GL_PROGRAM_ERROR_STRING_ARB* = 0x8874.GLenum
  GL_PROGRAM_ERROR_STRING_NV* = 0x8874.GLenum
  GL_PROGRAM_FORMAT_ASCII_ARB* = 0x8875.GLenum
  GL_PROGRAM_FORMAT_ARB* = 0x8876.GLenum
  GL_WRITE_PIXEL_DATA_RANGE_NV* = 0x8878.GLenum
  GL_READ_PIXEL_DATA_RANGE_NV* = 0x8879.GLenum
  GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV* = 0x887A.GLenum
  GL_READ_PIXEL_DATA_RANGE_LENGTH_NV* = 0x887B.GLenum
  GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV* = 0x887C.GLenum
  GL_READ_PIXEL_DATA_RANGE_POINTER_NV* = 0x887D.GLenum
  GL_GEOMETRY_SHADER_INVOCATIONS* = 0x887F.GLenum
  GL_GEOMETRY_SHADER_INVOCATIONS_EXT* = 0x887F.GLenum
  GL_GEOMETRY_SHADER_INVOCATIONS_OES* = 0x887F.GLenum
  GL_FLOAT_R_NV* = 0x8880.GLenum
  GL_FLOAT_RG_NV* = 0x8881.GLenum
  GL_FLOAT_RGB_NV* = 0x8882.GLenum
  GL_FLOAT_RGBA_NV* = 0x8883.GLenum
  GL_FLOAT_R16_NV* = 0x8884.GLenum
  GL_FLOAT_R32_NV* = 0x8885.GLenum
  GL_FLOAT_RG16_NV* = 0x8886.GLenum
  GL_FLOAT_RG32_NV* = 0x8887.GLenum
  GL_FLOAT_RGB16_NV* = 0x8888.GLenum
  GL_FLOAT_RGB32_NV* = 0x8889.GLenum
  GL_FLOAT_RGBA16_NV* = 0x888A.GLenum
  GL_FLOAT_RGBA32_NV* = 0x888B.GLenum
  GL_TEXTURE_FLOAT_COMPONENTS_NV* = 0x888C.GLenum
  GL_FLOAT_CLEAR_COLOR_VALUE_NV* = 0x888D.GLenum
  GL_FLOAT_RGBA_MODE_NV* = 0x888E.GLenum
  GL_TEXTURE_UNSIGNED_REMAP_MODE_NV* = 0x888F.GLenum
  GL_DEPTH_BOUNDS_TEST_EXT* = 0x8890.GLenum
  GL_DEPTH_BOUNDS_EXT* = 0x8891.GLenum
  GL_ARRAY_BUFFER* = 0x8892.GLenum
  GL_ARRAY_BUFFER_ARB* = 0x8892.GLenum
  GL_ELEMENT_ARRAY_BUFFER* = 0x8893.GLenum
  GL_ELEMENT_ARRAY_BUFFER_ARB* = 0x8893.GLenum
  GL_ARRAY_BUFFER_BINDING* = 0x8894.GLenum
  GL_ARRAY_BUFFER_BINDING_ARB* = 0x8894.GLenum
  GL_ELEMENT_ARRAY_BUFFER_BINDING* = 0x8895.GLenum
  GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB* = 0x8895.GLenum
  GL_VERTEX_ARRAY_BUFFER_BINDING* = 0x8896.GLenum
  GL_VERTEX_ARRAY_BUFFER_BINDING_ARB* = 0x8896.GLenum
  GL_NORMAL_ARRAY_BUFFER_BINDING* = 0x8897.GLenum
  GL_NORMAL_ARRAY_BUFFER_BINDING_ARB* = 0x8897.GLenum
  GL_COLOR_ARRAY_BUFFER_BINDING* = 0x8898.GLenum
  GL_COLOR_ARRAY_BUFFER_BINDING_ARB* = 0x8898.GLenum
  GL_INDEX_ARRAY_BUFFER_BINDING* = 0x8899.GLenum
  GL_INDEX_ARRAY_BUFFER_BINDING_ARB* = 0x8899.GLenum
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING* = 0x889A.GLenum
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB* = 0x889A.GLenum
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING* = 0x889B.GLenum
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB* = 0x889B.GLenum
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING* = 0x889C.GLenum
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB* = 0x889C.GLenum
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB* = 0x889D.GLenum
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING* = 0x889D.GLenum
  GL_FOG_COORD_ARRAY_BUFFER_BINDING* = 0x889D.GLenum
  GL_WEIGHT_ARRAY_BUFFER_BINDING* = 0x889E.GLenum
  GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB* = 0x889E.GLenum
  GL_WEIGHT_ARRAY_BUFFER_BINDING_OES* = 0x889E.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING* = 0x889F.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB* = 0x889F.GLenum
  GL_PROGRAM_INSTRUCTIONS_ARB* = 0x88A0.GLenum
  GL_MAX_PROGRAM_INSTRUCTIONS_ARB* = 0x88A1.GLenum
  GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB* = 0x88A2.GLenum
  GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB* = 0x88A3.GLenum
  GL_PROGRAM_TEMPORARIES_ARB* = 0x88A4.GLenum
  GL_MAX_PROGRAM_TEMPORARIES_ARB* = 0x88A5.GLenum
  GL_PROGRAM_NATIVE_TEMPORARIES_ARB* = 0x88A6.GLenum
  GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB* = 0x88A7.GLenum
  GL_PROGRAM_PARAMETERS_ARB* = 0x88A8.GLenum
  GL_MAX_PROGRAM_PARAMETERS_ARB* = 0x88A9.GLenum
  GL_PROGRAM_NATIVE_PARAMETERS_ARB* = 0x88AA.GLenum
  GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB* = 0x88AB.GLenum
  GL_PROGRAM_ATTRIBS_ARB* = 0x88AC.GLenum
  GL_MAX_PROGRAM_ATTRIBS_ARB* = 0x88AD.GLenum
  GL_PROGRAM_NATIVE_ATTRIBS_ARB* = 0x88AE.GLenum
  GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB* = 0x88AF.GLenum
  GL_PROGRAM_ADDRESS_REGISTERS_ARB* = 0x88B0.GLenum
  GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB* = 0x88B1.GLenum
  GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB* = 0x88B2.GLenum
  GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB* = 0x88B3.GLenum
  GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB* = 0x88B4.GLenum
  GL_MAX_PROGRAM_ENV_PARAMETERS_ARB* = 0x88B5.GLenum
  GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB* = 0x88B6.GLenum
  GL_TRANSPOSE_CURRENT_MATRIX_ARB* = 0x88B7.GLenum
  GL_READ_ONLY* = 0x88B8.GLenum
  GL_READ_ONLY_ARB* = 0x88B8.GLenum
  GL_WRITE_ONLY* = 0x88B9.GLenum
  GL_WRITE_ONLY_ARB* = 0x88B9.GLenum
  GL_WRITE_ONLY_OES* = 0x88B9.GLenum
  GL_READ_WRITE* = 0x88BA.GLenum
  GL_READ_WRITE_ARB* = 0x88BA.GLenum
  GL_BUFFER_ACCESS* = 0x88BB.GLenum
  GL_BUFFER_ACCESS_ARB* = 0x88BB.GLenum
  GL_BUFFER_ACCESS_OES* = 0x88BB.GLenum
  GL_BUFFER_MAPPED* = 0x88BC.GLenum
  GL_BUFFER_MAPPED_ARB* = 0x88BC.GLenum
  GL_BUFFER_MAPPED_OES* = 0x88BC.GLenum
  GL_BUFFER_MAP_POINTER* = 0x88BD.GLenum
  GL_BUFFER_MAP_POINTER_ARB* = 0x88BD.GLenum
  GL_BUFFER_MAP_POINTER_OES* = 0x88BD.GLenum
  GL_WRITE_DISCARD_NV* = 0x88BE.GLenum
  GL_TIME_ELAPSED* = 0x88BF.GLenum
  GL_TIME_ELAPSED_EXT* = 0x88BF.GLenum
  GL_MATRIX0_ARB* = 0x88C0.GLenum
  GL_MATRIX1_ARB* = 0x88C1.GLenum
  GL_MATRIX2_ARB* = 0x88C2.GLenum
  GL_MATRIX3_ARB* = 0x88C3.GLenum
  GL_MATRIX4_ARB* = 0x88C4.GLenum
  GL_MATRIX5_ARB* = 0x88C5.GLenum
  GL_MATRIX6_ARB* = 0x88C6.GLenum
  GL_MATRIX7_ARB* = 0x88C7.GLenum
  GL_MATRIX8_ARB* = 0x88C8.GLenum
  GL_MATRIX9_ARB* = 0x88C9.GLenum
  GL_MATRIX10_ARB* = 0x88CA.GLenum
  GL_MATRIX11_ARB* = 0x88CB.GLenum
  GL_MATRIX12_ARB* = 0x88CC.GLenum
  GL_MATRIX13_ARB* = 0x88CD.GLenum
  GL_MATRIX14_ARB* = 0x88CE.GLenum
  GL_MATRIX15_ARB* = 0x88CF.GLenum
  GL_MATRIX16_ARB* = 0x88D0.GLenum
  GL_MATRIX17_ARB* = 0x88D1.GLenum
  GL_MATRIX18_ARB* = 0x88D2.GLenum
  GL_MATRIX19_ARB* = 0x88D3.GLenum
  GL_MATRIX20_ARB* = 0x88D4.GLenum
  GL_MATRIX21_ARB* = 0x88D5.GLenum
  GL_MATRIX22_ARB* = 0x88D6.GLenum
  GL_MATRIX23_ARB* = 0x88D7.GLenum
  GL_MATRIX24_ARB* = 0x88D8.GLenum
  GL_MATRIX25_ARB* = 0x88D9.GLenum
  GL_MATRIX26_ARB* = 0x88DA.GLenum
  GL_MATRIX27_ARB* = 0x88DB.GLenum
  GL_MATRIX28_ARB* = 0x88DC.GLenum
  GL_MATRIX29_ARB* = 0x88DD.GLenum
  GL_MATRIX30_ARB* = 0x88DE.GLenum
  GL_MATRIX31_ARB* = 0x88DF.GLenum
  GL_STREAM_DRAW* = 0x88E0.GLenum
  GL_STREAM_DRAW_ARB* = 0x88E0.GLenum
  GL_STREAM_READ* = 0x88E1.GLenum
  GL_STREAM_READ_ARB* = 0x88E1.GLenum
  GL_STREAM_COPY* = 0x88E2.GLenum
  GL_STREAM_COPY_ARB* = 0x88E2.GLenum
  GL_STATIC_DRAW* = 0x88E4.GLenum
  GL_STATIC_DRAW_ARB* = 0x88E4.GLenum
  GL_STATIC_READ* = 0x88E5.GLenum
  GL_STATIC_READ_ARB* = 0x88E5.GLenum
  GL_STATIC_COPY* = 0x88E6.GLenum
  GL_STATIC_COPY_ARB* = 0x88E6.GLenum
  GL_DYNAMIC_DRAW* = 0x88E8.GLenum
  GL_DYNAMIC_DRAW_ARB* = 0x88E8.GLenum
  GL_DYNAMIC_READ* = 0x88E9.GLenum
  GL_DYNAMIC_READ_ARB* = 0x88E9.GLenum
  GL_DYNAMIC_COPY* = 0x88EA.GLenum
  GL_DYNAMIC_COPY_ARB* = 0x88EA.GLenum
  GL_PIXEL_PACK_BUFFER* = 0x88EB.GLenum
  GL_PIXEL_PACK_BUFFER_ARB* = 0x88EB.GLenum
  GL_PIXEL_PACK_BUFFER_EXT* = 0x88EB.GLenum
  GL_PIXEL_PACK_BUFFER_NV* = 0x88EB.GLenum
  GL_PIXEL_UNPACK_BUFFER* = 0x88EC.GLenum
  GL_PIXEL_UNPACK_BUFFER_ARB* = 0x88EC.GLenum
  GL_PIXEL_UNPACK_BUFFER_EXT* = 0x88EC.GLenum
  GL_PIXEL_UNPACK_BUFFER_NV* = 0x88EC.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING* = 0x88ED.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING_ARB* = 0x88ED.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING_EXT* = 0x88ED.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING_NV* = 0x88ED.GLenum
  GL_ETC1_SRGB8_NV* = 0x88EE.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING* = 0x88EF.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING_ARB* = 0x88EF.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING_EXT* = 0x88EF.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING_NV* = 0x88EF.GLenum
  GL_DEPTH24_STENCIL8* = 0x88F0.GLenum
  GL_DEPTH24_STENCIL8_EXT* = 0x88F0.GLenum
  GL_DEPTH24_STENCIL8_OES* = 0x88F0.GLenum
  GL_TEXTURE_STENCIL_SIZE* = 0x88F1.GLenum
  GL_TEXTURE_STENCIL_SIZE_EXT* = 0x88F1.GLenum
  GL_STENCIL_TAG_BITS_EXT* = 0x88F2.GLenum
  GL_STENCIL_CLEAR_TAG_VALUE_EXT* = 0x88F3.GLenum
  GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV* = 0x88F4.GLenum
  GL_MAX_PROGRAM_CALL_DEPTH_NV* = 0x88F5.GLenum
  GL_MAX_PROGRAM_IF_DEPTH_NV* = 0x88F6.GLenum
  GL_MAX_PROGRAM_LOOP_DEPTH_NV* = 0x88F7.GLenum
  GL_MAX_PROGRAM_LOOP_COUNT_NV* = 0x88F8.GLenum
  GL_SRC1_COLOR* = 0x88F9.GLenum
  GL_SRC1_COLOR_EXT* = 0x88F9.GLenum
  GL_ONE_MINUS_SRC1_COLOR* = 0x88FA.GLenum
  GL_ONE_MINUS_SRC1_COLOR_EXT* = 0x88FA.GLenum
  GL_ONE_MINUS_SRC1_ALPHA* = 0x88FB.GLenum
  GL_ONE_MINUS_SRC1_ALPHA_EXT* = 0x88FB.GLenum
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS* = 0x88FC.GLenum
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT* = 0x88FC.GLenum
  GL_VERTEX_ATTRIB_ARRAY_INTEGER* = 0x88FD.GLenum
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT* = 0x88FD.GLenum
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV* = 0x88FD.GLenum
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR* = 0x88FE.GLenum
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE* = 0x88FE.GLenum
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB* = 0x88FE.GLenum
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT* = 0x88FE.GLenum
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV* = 0x88FE.GLenum
  GL_MAX_ARRAY_TEXTURE_LAYERS* = 0x88FF.GLenum
  GL_MAX_ARRAY_TEXTURE_LAYERS_EXT* = 0x88FF.GLenum
  GL_MIN_PROGRAM_TEXEL_OFFSET* = 0x8904.GLenum
  GL_MIN_PROGRAM_TEXEL_OFFSET_EXT* = 0x8904.GLenum
  GL_MIN_PROGRAM_TEXEL_OFFSET_NV* = 0x8904.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET* = 0x8905.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET_EXT* = 0x8905.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET_NV* = 0x8905.GLenum
  GL_PROGRAM_ATTRIB_COMPONENTS_NV* = 0x8906.GLenum
  GL_PROGRAM_RESULT_COMPONENTS_NV* = 0x8907.GLenum
  GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV* = 0x8908.GLenum
  GL_MAX_PROGRAM_RESULT_COMPONENTS_NV* = 0x8909.GLenum
  GL_STENCIL_TEST_TWO_SIDE_EXT* = 0x8910.GLenum
  GL_ACTIVE_STENCIL_FACE_EXT* = 0x8911.GLenum
  GL_MIRROR_CLAMP_TO_BORDER_EXT* = 0x8912.GLenum
  GL_SAMPLES_PASSED* = 0x8914.GLenum
  GL_SAMPLES_PASSED_ARB* = 0x8914.GLenum
  GL_GEOMETRY_VERTICES_OUT* = 0x8916.GLenum
  GL_GEOMETRY_LINKED_VERTICES_OUT_EXT* = 0x8916.GLenum
  GL_GEOMETRY_LINKED_VERTICES_OUT_OES* = 0x8916.GLenum
  GL_GEOMETRY_INPUT_TYPE* = 0x8917.GLenum
  GL_GEOMETRY_LINKED_INPUT_TYPE_EXT* = 0x8917.GLenum
  GL_GEOMETRY_LINKED_INPUT_TYPE_OES* = 0x8917.GLenum
  GL_GEOMETRY_OUTPUT_TYPE* = 0x8918.GLenum
  GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT* = 0x8918.GLenum
  GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES* = 0x8918.GLenum
  GL_SAMPLER_BINDING* = 0x8919.GLenum
  GL_CLAMP_VERTEX_COLOR* = 0x891A.GLenum
  GL_CLAMP_VERTEX_COLOR_ARB* = 0x891A.GLenum
  GL_CLAMP_FRAGMENT_COLOR* = 0x891B.GLenum
  GL_CLAMP_FRAGMENT_COLOR_ARB* = 0x891B.GLenum
  GL_CLAMP_READ_COLOR* = 0x891C.GLenum
  GL_CLAMP_READ_COLOR_ARB* = 0x891C.GLenum
  GL_FIXED_ONLY* = 0x891D.GLenum
  GL_FIXED_ONLY_ARB* = 0x891D.GLenum
  GL_TESS_CONTROL_PROGRAM_NV* = 0x891E.GLenum
  GL_TESS_EVALUATION_PROGRAM_NV* = 0x891F.GLenum
  GL_FRAGMENT_SHADER_ATI* = 0x8920.GLenum
  GL_REG_0_ATI* = 0x8921.GLenum
  GL_REG_1_ATI* = 0x8922.GLenum
  GL_REG_2_ATI* = 0x8923.GLenum
  GL_REG_3_ATI* = 0x8924.GLenum
  GL_REG_4_ATI* = 0x8925.GLenum
  GL_REG_5_ATI* = 0x8926.GLenum
  GL_REG_6_ATI* = 0x8927.GLenum
  GL_REG_7_ATI* = 0x8928.GLenum
  GL_REG_8_ATI* = 0x8929.GLenum
  GL_REG_9_ATI* = 0x892A.GLenum
  GL_REG_10_ATI* = 0x892B.GLenum
  GL_REG_11_ATI* = 0x892C.GLenum
  GL_REG_12_ATI* = 0x892D.GLenum
  GL_REG_13_ATI* = 0x892E.GLenum
  GL_REG_14_ATI* = 0x892F.GLenum
  GL_REG_15_ATI* = 0x8930.GLenum
  GL_REG_16_ATI* = 0x8931.GLenum
  GL_REG_17_ATI* = 0x8932.GLenum
  GL_REG_18_ATI* = 0x8933.GLenum
  GL_REG_19_ATI* = 0x8934.GLenum
  GL_REG_20_ATI* = 0x8935.GLenum
  GL_REG_21_ATI* = 0x8936.GLenum
  GL_REG_22_ATI* = 0x8937.GLenum
  GL_REG_23_ATI* = 0x8938.GLenum
  GL_REG_24_ATI* = 0x8939.GLenum
  GL_REG_25_ATI* = 0x893A.GLenum
  GL_REG_26_ATI* = 0x893B.GLenum
  GL_REG_27_ATI* = 0x893C.GLenum
  GL_REG_28_ATI* = 0x893D.GLenum
  GL_REG_29_ATI* = 0x893E.GLenum
  GL_REG_30_ATI* = 0x893F.GLenum
  GL_REG_31_ATI* = 0x8940.GLenum
  GL_CON_0_ATI* = 0x8941.GLenum
  GL_CON_1_ATI* = 0x8942.GLenum
  GL_CON_2_ATI* = 0x8943.GLenum
  GL_CON_3_ATI* = 0x8944.GLenum
  GL_CON_4_ATI* = 0x8945.GLenum
  GL_CON_5_ATI* = 0x8946.GLenum
  GL_CON_6_ATI* = 0x8947.GLenum
  GL_CON_7_ATI* = 0x8948.GLenum
  GL_CON_8_ATI* = 0x8949.GLenum
  GL_CON_9_ATI* = 0x894A.GLenum
  GL_CON_10_ATI* = 0x894B.GLenum
  GL_CON_11_ATI* = 0x894C.GLenum
  GL_CON_12_ATI* = 0x894D.GLenum
  GL_CON_13_ATI* = 0x894E.GLenum
  GL_CON_14_ATI* = 0x894F.GLenum
  GL_CON_15_ATI* = 0x8950.GLenum
  GL_CON_16_ATI* = 0x8951.GLenum
  GL_CON_17_ATI* = 0x8952.GLenum
  GL_CON_18_ATI* = 0x8953.GLenum
  GL_CON_19_ATI* = 0x8954.GLenum
  GL_CON_20_ATI* = 0x8955.GLenum
  GL_CON_21_ATI* = 0x8956.GLenum
  GL_CON_22_ATI* = 0x8957.GLenum
  GL_CON_23_ATI* = 0x8958.GLenum
  GL_CON_24_ATI* = 0x8959.GLenum
  GL_CON_25_ATI* = 0x895A.GLenum
  GL_CON_26_ATI* = 0x895B.GLenum
  GL_CON_27_ATI* = 0x895C.GLenum
  GL_CON_28_ATI* = 0x895D.GLenum
  GL_CON_29_ATI* = 0x895E.GLenum
  GL_CON_30_ATI* = 0x895F.GLenum
  GL_CON_31_ATI* = 0x8960.GLenum
  GL_MOV_ATI* = 0x8961.GLenum
  GL_ADD_ATI* = 0x8963.GLenum
  GL_MUL_ATI* = 0x8964.GLenum
  GL_SUB_ATI* = 0x8965.GLenum
  GL_DOT3_ATI* = 0x8966.GLenum
  GL_DOT4_ATI* = 0x8967.GLenum
  GL_MAD_ATI* = 0x8968.GLenum
  GL_LERP_ATI* = 0x8969.GLenum
  GL_CND_ATI* = 0x896A.GLenum
  GL_CND0_ATI* = 0x896B.GLenum
  GL_DOT2_ADD_ATI* = 0x896C.GLenum
  GL_SECONDARY_INTERPOLATOR_ATI* = 0x896D.GLenum
  GL_NUM_FRAGMENT_REGISTERS_ATI* = 0x896E.GLenum
  GL_NUM_FRAGMENT_CONSTANTS_ATI* = 0x896F.GLenum
  GL_NUM_PASSES_ATI* = 0x8970.GLenum
  GL_NUM_INSTRUCTIONS_PER_PASS_ATI* = 0x8971.GLenum
  GL_NUM_INSTRUCTIONS_TOTAL_ATI* = 0x8972.GLenum
  GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI* = 0x8973.GLenum
  GL_NUM_LOOPBACK_COMPONENTS_ATI* = 0x8974.GLenum
  GL_COLOR_ALPHA_PAIRING_ATI* = 0x8975.GLenum
  GL_SWIZZLE_STR_ATI* = 0x8976.GLenum
  GL_SWIZZLE_STQ_ATI* = 0x8977.GLenum
  GL_SWIZZLE_STR_DR_ATI* = 0x8978.GLenum
  GL_SWIZZLE_STQ_DQ_ATI* = 0x8979.GLenum
  GL_SWIZZLE_STRQ_ATI* = 0x897A.GLenum
  GL_SWIZZLE_STRQ_DQ_ATI* = 0x897B.GLenum
  GL_INTERLACE_OML* = 0x8980.GLenum
  GL_INTERLACE_READ_OML* = 0x8981.GLenum
  GL_FORMAT_SUBSAMPLE_24_24_OML* = 0x8982.GLenum
  GL_FORMAT_SUBSAMPLE_244_244_OML* = 0x8983.GLenum
  GL_PACK_RESAMPLE_OML* = 0x8984.GLenum
  GL_UNPACK_RESAMPLE_OML* = 0x8985.GLenum
  GL_RESAMPLE_REPLICATE_OML* = 0x8986.GLenum
  GL_RESAMPLE_ZERO_FILL_OML* = 0x8987.GLenum
  GL_RESAMPLE_AVERAGE_OML* = 0x8988.GLenum
  GL_RESAMPLE_DECIMATE_OML* = 0x8989.GLenum
  GL_POINT_SIZE_ARRAY_TYPE_OES* = 0x898A.GLenum
  GL_POINT_SIZE_ARRAY_STRIDE_OES* = 0x898B.GLenum
  GL_POINT_SIZE_ARRAY_POINTER_OES* = 0x898C.GLenum
  GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES* = 0x898D.GLenum
  GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES* = 0x898E.GLenum
  GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES* = 0x898F.GLenum
  GL_VERTEX_ATTRIB_MAP1_APPLE* = 0x8A00.GLenum
  GL_VERTEX_ATTRIB_MAP2_APPLE* = 0x8A01.GLenum
  GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE* = 0x8A02.GLenum
  GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE* = 0x8A03.GLenum
  GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE* = 0x8A04.GLenum
  GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE* = 0x8A05.GLenum
  GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE* = 0x8A06.GLenum
  GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE* = 0x8A07.GLenum
  GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE* = 0x8A08.GLenum
  GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE* = 0x8A09.GLenum
  GL_DRAW_PIXELS_APPLE* = 0x8A0A.GLenum
  GL_FENCE_APPLE* = 0x8A0B.GLenum
  GL_ELEMENT_ARRAY_APPLE* = 0x8A0C.GLenum
  GL_ELEMENT_ARRAY_TYPE_APPLE* = 0x8A0D.GLenum
  GL_ELEMENT_ARRAY_POINTER_APPLE* = 0x8A0E.GLenum
  GL_COLOR_FLOAT_APPLE* = 0x8A0F.GLenum
  GL_UNIFORM_BUFFER* = 0x8A11.GLenum
  GL_BUFFER_SERIALIZED_MODIFY_APPLE* = 0x8A12.GLenum
  GL_BUFFER_FLUSHING_UNMAP_APPLE* = 0x8A13.GLenum
  GL_AUX_DEPTH_STENCIL_APPLE* = 0x8A14.GLenum
  GL_PACK_ROW_BYTES_APPLE* = 0x8A15.GLenum
  GL_UNPACK_ROW_BYTES_APPLE* = 0x8A16.GLenum
  GL_RELEASED_APPLE* = 0x8A19.GLenum
  GL_VOLATILE_APPLE* = 0x8A1A.GLenum
  GL_RETAINED_APPLE* = 0x8A1B.GLenum
  GL_UNDEFINED_APPLE* = 0x8A1C.GLenum
  GL_PURGEABLE_APPLE* = 0x8A1D.GLenum
  GL_RGB_422_APPLE* = 0x8A1F.GLenum
  GL_UNIFORM_BUFFER_BINDING* = 0x8A28.GLenum
  GL_UNIFORM_BUFFER_START* = 0x8A29.GLenum
  GL_UNIFORM_BUFFER_SIZE* = 0x8A2A.GLenum
  GL_MAX_VERTEX_UNIFORM_BLOCKS* = 0x8A2B.GLenum
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS* = 0x8A2C.GLenum
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT* = 0x8A2C.GLenum
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES* = 0x8A2C.GLenum
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS* = 0x8A2D.GLenum
  GL_MAX_COMBINED_UNIFORM_BLOCKS* = 0x8A2E.GLenum
  GL_MAX_UNIFORM_BUFFER_BINDINGS* = 0x8A2F.GLenum
  GL_MAX_UNIFORM_BLOCK_SIZE* = 0x8A30.GLenum
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS* = 0x8A31.GLenum
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS* = 0x8A32.GLenum
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT* = 0x8A32.GLenum
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES* = 0x8A32.GLenum
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS* = 0x8A33.GLenum
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT* = 0x8A34.GLenum
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH* = 0x8A35.GLenum
  GL_ACTIVE_UNIFORM_BLOCKS* = 0x8A36.GLenum
  GL_UNIFORM_TYPE* = 0x8A37.GLenum
  GL_UNIFORM_SIZE* = 0x8A38.GLenum
  GL_UNIFORM_NAME_LENGTH* = 0x8A39.GLenum
  GL_UNIFORM_BLOCK_INDEX* = 0x8A3A.GLenum
  GL_UNIFORM_OFFSET* = 0x8A3B.GLenum
  GL_UNIFORM_ARRAY_STRIDE* = 0x8A3C.GLenum
  GL_UNIFORM_MATRIX_STRIDE* = 0x8A3D.GLenum
  GL_UNIFORM_IS_ROW_MAJOR* = 0x8A3E.GLenum
  GL_UNIFORM_BLOCK_BINDING* = 0x8A3F.GLenum
  GL_UNIFORM_BLOCK_DATA_SIZE* = 0x8A40.GLenum
  GL_UNIFORM_BLOCK_NAME_LENGTH* = 0x8A41.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS* = 0x8A42.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES* = 0x8A43.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER* = 0x8A44.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER* = 0x8A45.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER* = 0x8A46.GLenum
  GL_TEXTURE_SRGB_DECODE_EXT* = 0x8A48.GLenum
  GL_DECODE_EXT* = 0x8A49.GLenum
  GL_SKIP_DECODE_EXT* = 0x8A4A.GLenum
  GL_PROGRAM_PIPELINE_OBJECT_EXT* = 0x8A4F.GLenum
  GL_RGB_RAW_422_APPLE* = 0x8A51.GLenum
  GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT* = 0x8A52.GLenum
  GL_SYNC_OBJECT_APPLE* = 0x8A53.GLenum
  GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT* = 0x8A54.GLenum
  GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT* = 0x8A55.GLenum
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT* = 0x8A56.GLenum
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT* = 0x8A57.GLenum
  GL_FRAGMENT_SHADER* = 0x8B30.GLenum
  GL_FRAGMENT_SHADER_ARB* = 0x8B30.GLenum
  GL_VERTEX_SHADER* = 0x8B31.GLenum
  GL_VERTEX_SHADER_ARB* = 0x8B31.GLenum
  GL_PROGRAM_OBJECT_ARB* = 0x8B40.GLenum
  GL_PROGRAM_OBJECT_EXT* = 0x8B40.GLenum
  GL_SHADER_OBJECT_ARB* = 0x8B48.GLenum
  GL_SHADER_OBJECT_EXT* = 0x8B48.GLenum
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS* = 0x8B49.GLenum
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB* = 0x8B49.GLenum
  GL_MAX_VERTEX_UNIFORM_COMPONENTS* = 0x8B4A.GLenum
  GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB* = 0x8B4A.GLenum
  GL_MAX_VARYING_FLOATS* = 0x8B4B.GLenum
  GL_MAX_VARYING_COMPONENTS* = 0x8B4B.GLenum
  GL_MAX_VARYING_COMPONENTS_EXT* = 0x8B4B.GLenum
  GL_MAX_VARYING_FLOATS_ARB* = 0x8B4B.GLenum
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS* = 0x8B4C.GLenum
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB* = 0x8B4C.GLenum
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS* = 0x8B4D.GLenum
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB* = 0x8B4D.GLenum
  GL_OBJECT_TYPE_ARB* = 0x8B4E.GLenum
  GL_SHADER_TYPE* = 0x8B4F.GLenum
  GL_OBJECT_SUBTYPE_ARB* = 0x8B4F.GLenum
  GL_FLOAT_VEC2* = 0x8B50.GLenum
  GL_FLOAT_VEC2_ARB* = 0x8B50.GLenum
  GL_FLOAT_VEC3* = 0x8B51.GLenum
  GL_FLOAT_VEC3_ARB* = 0x8B51.GLenum
  GL_FLOAT_VEC4* = 0x8B52.GLenum
  GL_FLOAT_VEC4_ARB* = 0x8B52.GLenum
  GL_INT_VEC2* = 0x8B53.GLenum
  GL_INT_VEC2_ARB* = 0x8B53.GLenum
  GL_INT_VEC3* = 0x8B54.GLenum
  GL_INT_VEC3_ARB* = 0x8B54.GLenum
  GL_INT_VEC4* = 0x8B55.GLenum
  GL_INT_VEC4_ARB* = 0x8B55.GLenum
  GL_BOOL* = 0x8B56.GLenum
  GL_BOOL_ARB* = 0x8B56.GLenum
  GL_BOOL_VEC2* = 0x8B57.GLenum
  GL_BOOL_VEC2_ARB* = 0x8B57.GLenum
  GL_BOOL_VEC3* = 0x8B58.GLenum
  GL_BOOL_VEC3_ARB* = 0x8B58.GLenum
  GL_BOOL_VEC4* = 0x8B59.GLenum
  GL_BOOL_VEC4_ARB* = 0x8B59.GLenum
  GL_FLOAT_MAT2* = 0x8B5A.GLenum
  GL_FLOAT_MAT2_ARB* = 0x8B5A.GLenum
  GL_FLOAT_MAT3* = 0x8B5B.GLenum
  GL_FLOAT_MAT3_ARB* = 0x8B5B.GLenum
  GL_FLOAT_MAT4* = 0x8B5C.GLenum
  GL_FLOAT_MAT4_ARB* = 0x8B5C.GLenum
  GL_SAMPLER_1D* = 0x8B5D.GLenum
  GL_SAMPLER_1D_ARB* = 0x8B5D.GLenum
  GL_SAMPLER_2D* = 0x8B5E.GLenum
  GL_SAMPLER_2D_ARB* = 0x8B5E.GLenum
  GL_SAMPLER_3D* = 0x8B5F.GLenum
  GL_SAMPLER_3D_ARB* = 0x8B5F.GLenum
  GL_SAMPLER_3D_OES* = 0x8B5F.GLenum
  GL_SAMPLER_CUBE* = 0x8B60.GLenum
  GL_SAMPLER_CUBE_ARB* = 0x8B60.GLenum
  GL_SAMPLER_1D_SHADOW* = 0x8B61.GLenum
  GL_SAMPLER_1D_SHADOW_ARB* = 0x8B61.GLenum
  GL_SAMPLER_2D_SHADOW* = 0x8B62.GLenum
  GL_SAMPLER_2D_SHADOW_ARB* = 0x8B62.GLenum
  GL_SAMPLER_2D_SHADOW_EXT* = 0x8B62.GLenum
  GL_SAMPLER_2D_RECT* = 0x8B63.GLenum
  GL_SAMPLER_2D_RECT_ARB* = 0x8B63.GLenum
  GL_SAMPLER_2D_RECT_SHADOW* = 0x8B64.GLenum
  GL_SAMPLER_2D_RECT_SHADOW_ARB* = 0x8B64.GLenum
  GL_FLOAT_MAT2x3* = 0x8B65.GLenum
  GL_FLOAT_MAT2x3_NV* = 0x8B65.GLenum
  GL_FLOAT_MAT2x4* = 0x8B66.GLenum
  GL_FLOAT_MAT2x4_NV* = 0x8B66.GLenum
  GL_FLOAT_MAT3x2* = 0x8B67.GLenum
  GL_FLOAT_MAT3x2_NV* = 0x8B67.GLenum
  GL_FLOAT_MAT3x4* = 0x8B68.GLenum
  GL_FLOAT_MAT3x4_NV* = 0x8B68.GLenum
  GL_FLOAT_MAT4x2* = 0x8B69.GLenum
  GL_FLOAT_MAT4x2_NV* = 0x8B69.GLenum
  GL_FLOAT_MAT4x3* = 0x8B6A.GLenum
  GL_FLOAT_MAT4x3_NV* = 0x8B6A.GLenum
  GL_DELETE_STATUS* = 0x8B80.GLenum
  GL_OBJECT_DELETE_STATUS_ARB* = 0x8B80.GLenum
  GL_COMPILE_STATUS* = 0x8B81.GLenum
  GL_OBJECT_COMPILE_STATUS_ARB* = 0x8B81.GLenum
  GL_LINK_STATUS* = 0x8B82.GLenum
  GL_OBJECT_LINK_STATUS_ARB* = 0x8B82.GLenum
  GL_VALIDATE_STATUS* = 0x8B83.GLenum
  GL_OBJECT_VALIDATE_STATUS_ARB* = 0x8B83.GLenum
  GL_INFO_LOG_LENGTH* = 0x8B84.GLenum
  GL_OBJECT_INFO_LOG_LENGTH_ARB* = 0x8B84.GLenum
  GL_ATTACHED_SHADERS* = 0x8B85.GLenum
  GL_OBJECT_ATTACHED_OBJECTS_ARB* = 0x8B85.GLenum
  GL_ACTIVE_UNIFORMS* = 0x8B86.GLenum
  GL_OBJECT_ACTIVE_UNIFORMS_ARB* = 0x8B86.GLenum
  GL_ACTIVE_UNIFORM_MAX_LENGTH* = 0x8B87.GLenum
  GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB* = 0x8B87.GLenum
  GL_SHADER_SOURCE_LENGTH* = 0x8B88.GLenum
  GL_OBJECT_SHADER_SOURCE_LENGTH_ARB* = 0x8B88.GLenum
  GL_ACTIVE_ATTRIBUTES* = 0x8B89.GLenum
  GL_OBJECT_ACTIVE_ATTRIBUTES_ARB* = 0x8B89.GLenum
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH* = 0x8B8A.GLenum
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB* = 0x8B8A.GLenum
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT* = 0x8B8B.GLenum
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB* = 0x8B8B.GLenum
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES* = 0x8B8B.GLenum
  GL_SHADING_LANGUAGE_VERSION* = 0x8B8C.GLenum
  GL_SHADING_LANGUAGE_VERSION_ARB* = 0x8B8C.GLenum
  GL_CURRENT_PROGRAM* = 0x8B8D.GLenum
  GL_PALETTE4_RGB8_OES* = 0x8B90.GLenum
  GL_PALETTE4_RGBA8_OES* = 0x8B91.GLenum
  GL_PALETTE4_R5_G6_B5_OES* = 0x8B92.GLenum
  GL_PALETTE4_RGBA4_OES* = 0x8B93.GLenum
  GL_PALETTE4_RGB5_A1_OES* = 0x8B94.GLenum
  GL_PALETTE8_RGB8_OES* = 0x8B95.GLenum
  GL_PALETTE8_RGBA8_OES* = 0x8B96.GLenum
  GL_PALETTE8_R5_G6_B5_OES* = 0x8B97.GLenum
  GL_PALETTE8_RGBA4_OES* = 0x8B98.GLenum
  GL_PALETTE8_RGB5_A1_OES* = 0x8B99.GLenum
  GL_IMPLEMENTATION_COLOR_READ_TYPE* = 0x8B9A.GLenum
  GL_IMPLEMENTATION_COLOR_READ_TYPE_OES* = 0x8B9A.GLenum
  GL_IMPLEMENTATION_COLOR_READ_FORMAT* = 0x8B9B.GLenum
  GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES* = 0x8B9B.GLenum
  GL_POINT_SIZE_ARRAY_OES* = 0x8B9C.GLenum
  GL_TEXTURE_CROP_RECT_OES* = 0x8B9D.GLenum
  GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES* = 0x8B9E.GLenum
  GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES* = 0x8B9F.GLenum
  GL_FRAGMENT_PROGRAM_POSITION_MESA* = 0x8BB0.GLenum
  GL_FRAGMENT_PROGRAM_CALLBACK_MESA* = 0x8BB1.GLenum
  GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA* = 0x8BB2.GLenum
  GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA* = 0x8BB3.GLenum
  GL_VERTEX_PROGRAM_POSITION_MESA* = 0x8BB4.GLenum
  GL_VERTEX_PROGRAM_CALLBACK_MESA* = 0x8BB5.GLenum
  GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA* = 0x8BB6.GLenum
  GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA* = 0x8BB7.GLenum
  GL_TILE_RASTER_ORDER_FIXED_MESA* = 0x8BB8.GLenum
  GL_TILE_RASTER_ORDER_INCREASING_X_MESA* = 0x8BB9.GLenum
  GL_TILE_RASTER_ORDER_INCREASING_Y_MESA* = 0x8BBA.GLenum
  GL_FRAMEBUFFER_FLIP_Y_MESA* = 0x8BBB.GLenum
  GL_COUNTER_TYPE_AMD* = 0x8BC0.GLenum
  GL_COUNTER_RANGE_AMD* = 0x8BC1.GLenum
  GL_UNSIGNED_INT64_AMD* = 0x8BC2.GLenum
  GL_PERCENTAGE_AMD* = 0x8BC3.GLenum
  GL_PERFMON_RESULT_AVAILABLE_AMD* = 0x8BC4.GLenum
  GL_PERFMON_RESULT_SIZE_AMD* = 0x8BC5.GLenum
  GL_PERFMON_RESULT_AMD* = 0x8BC6.GLenum
  GL_TEXTURE_WIDTH_QCOM* = 0x8BD2.GLenum
  GL_TEXTURE_HEIGHT_QCOM* = 0x8BD3.GLenum
  GL_TEXTURE_DEPTH_QCOM* = 0x8BD4.GLenum
  GL_TEXTURE_INTERNAL_FORMAT_QCOM* = 0x8BD5.GLenum
  GL_TEXTURE_FORMAT_QCOM* = 0x8BD6.GLenum
  GL_TEXTURE_TYPE_QCOM* = 0x8BD7.GLenum
  GL_TEXTURE_IMAGE_VALID_QCOM* = 0x8BD8.GLenum
  GL_TEXTURE_NUM_LEVELS_QCOM* = 0x8BD9.GLenum
  GL_TEXTURE_TARGET_QCOM* = 0x8BDA.GLenum
  GL_TEXTURE_OBJECT_VALID_QCOM* = 0x8BDB.GLenum
  GL_STATE_RESTORE* = 0x8BDC.GLenum
  GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT* = 0x8BE7.GLenum
  GL_TEXTURE_PROTECTED_EXT* = 0x8BFA.GLenum
  GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM* = 0x8BFB.GLenum
  GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM* = 0x8BFC.GLenum
  GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM* = 0x8BFD.GLenum
  GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM* = 0x8BFE.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM* = 0x8BFF.GLenum
  GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG* = 0x8C00.GLenum
  GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG* = 0x8C01.GLenum
  GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG* = 0x8C02.GLenum
  GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG* = 0x8C03.GLenum
  GL_MODULATE_COLOR_IMG* = 0x8C04.GLenum
  GL_RECIP_ADD_SIGNED_ALPHA_IMG* = 0x8C05.GLenum
  GL_TEXTURE_ALPHA_MODULATE_IMG* = 0x8C06.GLenum
  GL_FACTOR_ALPHA_MODULATE_IMG* = 0x8C07.GLenum
  GL_FRAGMENT_ALPHA_MODULATE_IMG* = 0x8C08.GLenum
  GL_ADD_BLEND_IMG* = 0x8C09.GLenum
  GL_SGX_BINARY_IMG* = 0x8C0A.GLenum
  GL_TEXTURE_RED_TYPE* = 0x8C10.GLenum
  GL_TEXTURE_RED_TYPE_ARB* = 0x8C10.GLenum
  GL_TEXTURE_GREEN_TYPE* = 0x8C11.GLenum
  GL_TEXTURE_GREEN_TYPE_ARB* = 0x8C11.GLenum
  GL_TEXTURE_BLUE_TYPE* = 0x8C12.GLenum
  GL_TEXTURE_BLUE_TYPE_ARB* = 0x8C12.GLenum
  GL_TEXTURE_ALPHA_TYPE* = 0x8C13.GLenum
  GL_TEXTURE_ALPHA_TYPE_ARB* = 0x8C13.GLenum
  GL_TEXTURE_LUMINANCE_TYPE* = 0x8C14.GLenum
  GL_TEXTURE_LUMINANCE_TYPE_ARB* = 0x8C14.GLenum
  GL_TEXTURE_INTENSITY_TYPE* = 0x8C15.GLenum
  GL_TEXTURE_INTENSITY_TYPE_ARB* = 0x8C15.GLenum
  GL_TEXTURE_DEPTH_TYPE* = 0x8C16.GLenum
  GL_TEXTURE_DEPTH_TYPE_ARB* = 0x8C16.GLenum
  GL_UNSIGNED_NORMALIZED* = 0x8C17.GLenum
  GL_UNSIGNED_NORMALIZED_ARB* = 0x8C17.GLenum
  GL_UNSIGNED_NORMALIZED_EXT* = 0x8C17.GLenum
  GL_TEXTURE_1D_ARRAY* = 0x8C18.GLenum
  GL_TEXTURE_1D_ARRAY_EXT* = 0x8C18.GLenum
  GL_PROXY_TEXTURE_1D_ARRAY* = 0x8C19.GLenum
  GL_PROXY_TEXTURE_1D_ARRAY_EXT* = 0x8C19.GLenum
  GL_TEXTURE_2D_ARRAY* = 0x8C1A.GLenum
  GL_TEXTURE_2D_ARRAY_EXT* = 0x8C1A.GLenum
  GL_PROXY_TEXTURE_2D_ARRAY* = 0x8C1B.GLenum
  GL_PROXY_TEXTURE_2D_ARRAY_EXT* = 0x8C1B.GLenum
  GL_TEXTURE_BINDING_1D_ARRAY* = 0x8C1C.GLenum
  GL_TEXTURE_BINDING_1D_ARRAY_EXT* = 0x8C1C.GLenum
  GL_TEXTURE_BINDING_2D_ARRAY* = 0x8C1D.GLenum
  GL_TEXTURE_BINDING_2D_ARRAY_EXT* = 0x8C1D.GLenum
  GL_GEOMETRY_PROGRAM_NV* = 0x8C26.GLenum
  GL_MAX_PROGRAM_OUTPUT_VERTICES_NV* = 0x8C27.GLenum
  GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV* = 0x8C28.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS* = 0x8C29.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB* = 0x8C29.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT* = 0x8C29.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES* = 0x8C29.GLenum
  GL_TEXTURE_BUFFER* = 0x8C2A.GLenum
  GL_TEXTURE_BUFFER_ARB* = 0x8C2A.GLenum
  GL_TEXTURE_BUFFER_EXT* = 0x8C2A.GLenum
  GL_TEXTURE_BUFFER_OES* = 0x8C2A.GLenum
  GL_TEXTURE_BUFFER_BINDING* = 0x8C2A.GLenum ## Equivalent to GL_TEXTURE_BUFFER_ARB query, but named more consistently
  GL_TEXTURE_BUFFER_BINDING_EXT* = 0x8C2A.GLenum
  GL_TEXTURE_BUFFER_BINDING_OES* = 0x8C2A.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE* = 0x8C2B.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE_ARB* = 0x8C2B.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE_EXT* = 0x8C2B.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE_OES* = 0x8C2B.GLenum
  GL_TEXTURE_BINDING_BUFFER* = 0x8C2C.GLenum
  GL_TEXTURE_BINDING_BUFFER_ARB* = 0x8C2C.GLenum
  GL_TEXTURE_BINDING_BUFFER_EXT* = 0x8C2C.GLenum
  GL_TEXTURE_BINDING_BUFFER_OES* = 0x8C2C.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING* = 0x8C2D.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB* = 0x8C2D.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT* = 0x8C2D.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES* = 0x8C2D.GLenum
  GL_TEXTURE_BUFFER_FORMAT_ARB* = 0x8C2E.GLenum
  GL_TEXTURE_BUFFER_FORMAT_EXT* = 0x8C2E.GLenum
  GL_ANY_SAMPLES_PASSED* = 0x8C2F.GLenum
  GL_ANY_SAMPLES_PASSED_EXT* = 0x8C2F.GLenum
  GL_SAMPLE_SHADING* = 0x8C36.GLenum
  GL_SAMPLE_SHADING_ARB* = 0x8C36.GLenum
  GL_SAMPLE_SHADING_OES* = 0x8C36.GLenum
  GL_MIN_SAMPLE_SHADING_VALUE* = 0x8C37.GLenum
  GL_MIN_SAMPLE_SHADING_VALUE_ARB* = 0x8C37.GLenum
  GL_MIN_SAMPLE_SHADING_VALUE_OES* = 0x8C37.GLenum
  GL_R11F_G11F_B10F* = 0x8C3A.GLenum
  GL_R11F_G11F_B10F_APPLE* = 0x8C3A.GLenum
  GL_R11F_G11F_B10F_EXT* = 0x8C3A.GLenum
  GL_UNSIGNED_INT_10F_11F_11F_REV* = 0x8C3B.GLenum
  GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE* = 0x8C3B.GLenum
  GL_UNSIGNED_INT_10F_11F_11F_REV_EXT* = 0x8C3B.GLenum
  GL_RGBA_SIGNED_COMPONENTS_EXT* = 0x8C3C.GLenum
  GL_RGB9_E5* = 0x8C3D.GLenum
  GL_RGB9_E5_APPLE* = 0x8C3D.GLenum
  GL_RGB9_E5_EXT* = 0x8C3D.GLenum
  GL_UNSIGNED_INT_5_9_9_9_REV* = 0x8C3E.GLenum
  GL_UNSIGNED_INT_5_9_9_9_REV_APPLE* = 0x8C3E.GLenum
  GL_UNSIGNED_INT_5_9_9_9_REV_EXT* = 0x8C3E.GLenum
  GL_TEXTURE_SHARED_SIZE* = 0x8C3F.GLenum
  GL_TEXTURE_SHARED_SIZE_EXT* = 0x8C3F.GLenum
  GL_SRGB* = 0x8C40.GLenum
  GL_SRGB_EXT* = 0x8C40.GLenum
  GL_SRGB8* = 0x8C41.GLenum
  GL_SRGB8_EXT* = 0x8C41.GLenum
  GL_SRGB8_NV* = 0x8C41.GLenum
  GL_SRGB_ALPHA* = 0x8C42.GLenum
  GL_SRGB_ALPHA_EXT* = 0x8C42.GLenum
  GL_SRGB8_ALPHA8* = 0x8C43.GLenum
  GL_SRGB8_ALPHA8_EXT* = 0x8C43.GLenum
  GL_SLUMINANCE_ALPHA* = 0x8C44.GLenum
  GL_SLUMINANCE_ALPHA_EXT* = 0x8C44.GLenum
  GL_SLUMINANCE_ALPHA_NV* = 0x8C44.GLenum
  GL_SLUMINANCE8_ALPHA8* = 0x8C45.GLenum
  GL_SLUMINANCE8_ALPHA8_EXT* = 0x8C45.GLenum
  GL_SLUMINANCE8_ALPHA8_NV* = 0x8C45.GLenum
  GL_SLUMINANCE* = 0x8C46.GLenum
  GL_SLUMINANCE_EXT* = 0x8C46.GLenum
  GL_SLUMINANCE_NV* = 0x8C46.GLenum
  GL_SLUMINANCE8* = 0x8C47.GLenum
  GL_SLUMINANCE8_EXT* = 0x8C47.GLenum
  GL_SLUMINANCE8_NV* = 0x8C47.GLenum
  GL_COMPRESSED_SRGB* = 0x8C48.GLenum
  GL_COMPRESSED_SRGB_EXT* = 0x8C48.GLenum
  GL_COMPRESSED_SRGB_ALPHA* = 0x8C49.GLenum
  GL_COMPRESSED_SRGB_ALPHA_EXT* = 0x8C49.GLenum
  GL_COMPRESSED_SLUMINANCE* = 0x8C4A.GLenum
  GL_COMPRESSED_SLUMINANCE_EXT* = 0x8C4A.GLenum
  GL_COMPRESSED_SLUMINANCE_ALPHA* = 0x8C4B.GLenum
  GL_COMPRESSED_SLUMINANCE_ALPHA_EXT* = 0x8C4B.GLenum
  GL_COMPRESSED_SRGB_S3TC_DXT1_EXT* = 0x8C4C.GLenum
  GL_COMPRESSED_SRGB_S3TC_DXT1_NV* = 0x8C4C.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT* = 0x8C4D.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV* = 0x8C4D.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT* = 0x8C4E.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV* = 0x8C4E.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT* = 0x8C4F.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV* = 0x8C4F.GLenum
  GL_COMPRESSED_LUMINANCE_LATC1_EXT* = 0x8C70.GLenum
  GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT* = 0x8C71.GLenum
  GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT* = 0x8C72.GLenum
  GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT* = 0x8C73.GLenum
  GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV* = 0x8C74.GLenum
  GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV* = 0x8C75.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH* = 0x8C76.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT* = 0x8C76.GLenum
  GL_BACK_PRIMARY_COLOR_NV* = 0x8C77.GLenum
  GL_BACK_SECONDARY_COLOR_NV* = 0x8C78.GLenum
  GL_TEXTURE_COORD_NV* = 0x8C79.GLenum
  GL_CLIP_DISTANCE_NV* = 0x8C7A.GLenum
  GL_VERTEX_ID_NV* = 0x8C7B.GLenum
  GL_PRIMITIVE_ID_NV* = 0x8C7C.GLenum
  GL_GENERIC_ATTRIB_NV* = 0x8C7D.GLenum
  GL_TRANSFORM_FEEDBACK_ATTRIBS_NV* = 0x8C7E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE* = 0x8C7F.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT* = 0x8C7F.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV* = 0x8C7F.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS* = 0x8C80.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT* = 0x8C80.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV* = 0x8C80.GLenum
  GL_ACTIVE_VARYINGS_NV* = 0x8C81.GLenum
  GL_ACTIVE_VARYING_MAX_LENGTH_NV* = 0x8C82.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS_EXT* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS_NV* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START_NV* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE* = 0x8C85.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT* = 0x8C85.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV* = 0x8C85.GLenum
  GL_TRANSFORM_FEEDBACK_RECORD_NV* = 0x8C86.GLenum
  GL_PRIMITIVES_GENERATED* = 0x8C87.GLenum
  GL_PRIMITIVES_GENERATED_EXT* = 0x8C87.GLenum
  GL_PRIMITIVES_GENERATED_NV* = 0x8C87.GLenum
  GL_PRIMITIVES_GENERATED_OES* = 0x8C87.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN* = 0x8C88.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT* = 0x8C88.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV* = 0x8C88.GLenum
  GL_RASTERIZER_DISCARD* = 0x8C89.GLenum
  GL_RASTERIZER_DISCARD_EXT* = 0x8C89.GLenum
  GL_RASTERIZER_DISCARD_NV* = 0x8C89.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS* = 0x8C8B.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT* = 0x8C8B.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV* = 0x8C8B.GLenum
  GL_INTERLEAVED_ATTRIBS* = 0x8C8C.GLenum
  GL_INTERLEAVED_ATTRIBS_EXT* = 0x8C8C.GLenum
  GL_INTERLEAVED_ATTRIBS_NV* = 0x8C8C.GLenum
  GL_SEPARATE_ATTRIBS* = 0x8C8D.GLenum
  GL_SEPARATE_ATTRIBS_EXT* = 0x8C8D.GLenum
  GL_SEPARATE_ATTRIBS_NV* = 0x8C8D.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_EXT* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_NV* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING* = 0x8C8F.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT* = 0x8C8F.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV* = 0x8C8F.GLenum
  GL_ATC_RGB_AMD* = 0x8C92.GLenum
  GL_ATC_RGBA_EXPLICIT_ALPHA_AMD* = 0x8C93.GLenum
  GL_POINT_SPRITE_COORD_ORIGIN* = 0x8CA0.GLenum
  GL_LOWER_LEFT* = 0x8CA1.GLenum
  GL_LOWER_LEFT_EXT* = 0x8CA1.GLenum
  GL_UPPER_LEFT* = 0x8CA2.GLenum
  GL_UPPER_LEFT_EXT* = 0x8CA2.GLenum
  GL_STENCIL_BACK_REF* = 0x8CA3.GLenum
  GL_STENCIL_BACK_VALUE_MASK* = 0x8CA4.GLenum
  GL_STENCIL_BACK_WRITEMASK* = 0x8CA5.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING_ANGLE* = 0x8CA6.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING_APPLE* = 0x8CA6.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING_EXT* = 0x8CA6.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING_NV* = 0x8CA6.GLenum
  GL_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_FRAMEBUFFER_BINDING_ANGLE* = 0x8CA6.GLenum
  GL_FRAMEBUFFER_BINDING_EXT* = 0x8CA6.GLenum
  GL_FRAMEBUFFER_BINDING_OES* = 0x8CA6.GLenum
  GL_RENDERBUFFER_BINDING* = 0x8CA7.GLenum
  GL_RENDERBUFFER_BINDING_ANGLE* = 0x8CA7.GLenum
  GL_RENDERBUFFER_BINDING_EXT* = 0x8CA7.GLenum
  GL_RENDERBUFFER_BINDING_OES* = 0x8CA7.GLenum
  GL_READ_FRAMEBUFFER* = 0x8CA8.GLenum
  GL_READ_FRAMEBUFFER_ANGLE* = 0x8CA8.GLenum
  GL_READ_FRAMEBUFFER_APPLE* = 0x8CA8.GLenum
  GL_READ_FRAMEBUFFER_EXT* = 0x8CA8.GLenum
  GL_READ_FRAMEBUFFER_NV* = 0x8CA8.GLenum
  GL_DRAW_FRAMEBUFFER* = 0x8CA9.GLenum
  GL_DRAW_FRAMEBUFFER_ANGLE* = 0x8CA9.GLenum
  GL_DRAW_FRAMEBUFFER_APPLE* = 0x8CA9.GLenum
  GL_DRAW_FRAMEBUFFER_EXT* = 0x8CA9.GLenum
  GL_DRAW_FRAMEBUFFER_NV* = 0x8CA9.GLenum
  GL_READ_FRAMEBUFFER_BINDING* = 0x8CAA.GLenum
  GL_READ_FRAMEBUFFER_BINDING_ANGLE* = 0x8CAA.GLenum
  GL_READ_FRAMEBUFFER_BINDING_APPLE* = 0x8CAA.GLenum
  GL_READ_FRAMEBUFFER_BINDING_EXT* = 0x8CAA.GLenum
  GL_READ_FRAMEBUFFER_BINDING_NV* = 0x8CAA.GLenum
  GL_RENDERBUFFER_COVERAGE_SAMPLES_NV* = 0x8CAB.GLenum
  GL_RENDERBUFFER_SAMPLES* = 0x8CAB.GLenum
  GL_RENDERBUFFER_SAMPLES_ANGLE* = 0x8CAB.GLenum
  GL_RENDERBUFFER_SAMPLES_APPLE* = 0x8CAB.GLenum
  GL_RENDERBUFFER_SAMPLES_EXT* = 0x8CAB.GLenum
  GL_RENDERBUFFER_SAMPLES_NV* = 0x8CAB.GLenum
  GL_DEPTH_COMPONENT32F* = 0x8CAC.GLenum
  GL_DEPTH32F_STENCIL8* = 0x8CAD.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE* = 0x8CD0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT* = 0x8CD0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES* = 0x8CD0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME* = 0x8CD1.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT* = 0x8CD1.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES* = 0x8CD1.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL* = 0x8CD2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT* = 0x8CD2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES* = 0x8CD2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE* = 0x8CD3.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT* = 0x8CD3.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES* = 0x8CD3.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT* = 0x8CD4.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES* = 0x8CD4.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER* = 0x8CD4.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT* = 0x8CD4.GLenum
  GL_FRAMEBUFFER_COMPLETE* = 0x8CD5.GLenum
  GL_FRAMEBUFFER_COMPLETE_EXT* = 0x8CD5.GLenum
  GL_FRAMEBUFFER_COMPLETE_OES* = 0x8CD5.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT* = 0x8CD6.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT* = 0x8CD6.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES* = 0x8CD6.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT* = 0x8CD7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT* = 0x8CD7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES* = 0x8CD7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS* = 0x8CD9.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT* = 0x8CD9.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES* = 0x8CD9.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT* = 0x8CDA.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES* = 0x8CDA.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER* = 0x8CDB.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT* = 0x8CDB.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES* = 0x8CDB.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER* = 0x8CDC.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT* = 0x8CDC.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES* = 0x8CDC.GLenum
  GL_FRAMEBUFFER_UNSUPPORTED* = 0x8CDD.GLenum
  GL_FRAMEBUFFER_UNSUPPORTED_EXT* = 0x8CDD.GLenum
  GL_FRAMEBUFFER_UNSUPPORTED_OES* = 0x8CDD.GLenum
  GL_MAX_COLOR_ATTACHMENTS* = 0x8CDF.GLenum
  GL_MAX_COLOR_ATTACHMENTS_EXT* = 0x8CDF.GLenum
  GL_MAX_COLOR_ATTACHMENTS_NV* = 0x8CDF.GLenum
  GL_COLOR_ATTACHMENT0* = 0x8CE0.GLenum
  GL_COLOR_ATTACHMENT0_EXT* = 0x8CE0.GLenum
  GL_COLOR_ATTACHMENT0_NV* = 0x8CE0.GLenum
  GL_COLOR_ATTACHMENT0_OES* = 0x8CE0.GLenum
  GL_COLOR_ATTACHMENT1* = 0x8CE1.GLenum
  GL_COLOR_ATTACHMENT1_EXT* = 0x8CE1.GLenum
  GL_COLOR_ATTACHMENT1_NV* = 0x8CE1.GLenum
  GL_COLOR_ATTACHMENT2* = 0x8CE2.GLenum
  GL_COLOR_ATTACHMENT2_EXT* = 0x8CE2.GLenum
  GL_COLOR_ATTACHMENT2_NV* = 0x8CE2.GLenum
  GL_COLOR_ATTACHMENT3* = 0x8CE3.GLenum
  GL_COLOR_ATTACHMENT3_EXT* = 0x8CE3.GLenum
  GL_COLOR_ATTACHMENT3_NV* = 0x8CE3.GLenum
  GL_COLOR_ATTACHMENT4* = 0x8CE4.GLenum
  GL_COLOR_ATTACHMENT4_EXT* = 0x8CE4.GLenum
  GL_COLOR_ATTACHMENT4_NV* = 0x8CE4.GLenum
  GL_COLOR_ATTACHMENT5* = 0x8CE5.GLenum
  GL_COLOR_ATTACHMENT5_EXT* = 0x8CE5.GLenum
  GL_COLOR_ATTACHMENT5_NV* = 0x8CE5.GLenum
  GL_COLOR_ATTACHMENT6* = 0x8CE6.GLenum
  GL_COLOR_ATTACHMENT6_EXT* = 0x8CE6.GLenum
  GL_COLOR_ATTACHMENT6_NV* = 0x8CE6.GLenum
  GL_COLOR_ATTACHMENT7* = 0x8CE7.GLenum
  GL_COLOR_ATTACHMENT7_EXT* = 0x8CE7.GLenum
  GL_COLOR_ATTACHMENT7_NV* = 0x8CE7.GLenum
  GL_COLOR_ATTACHMENT8* = 0x8CE8.GLenum
  GL_COLOR_ATTACHMENT8_EXT* = 0x8CE8.GLenum
  GL_COLOR_ATTACHMENT8_NV* = 0x8CE8.GLenum
  GL_COLOR_ATTACHMENT9* = 0x8CE9.GLenum
  GL_COLOR_ATTACHMENT9_EXT* = 0x8CE9.GLenum
  GL_COLOR_ATTACHMENT9_NV* = 0x8CE9.GLenum
  GL_COLOR_ATTACHMENT10* = 0x8CEA.GLenum
  GL_COLOR_ATTACHMENT10_EXT* = 0x8CEA.GLenum
  GL_COLOR_ATTACHMENT10_NV* = 0x8CEA.GLenum
  GL_COLOR_ATTACHMENT11* = 0x8CEB.GLenum
  GL_COLOR_ATTACHMENT11_EXT* = 0x8CEB.GLenum
  GL_COLOR_ATTACHMENT11_NV* = 0x8CEB.GLenum
  GL_COLOR_ATTACHMENT12* = 0x8CEC.GLenum
  GL_COLOR_ATTACHMENT12_EXT* = 0x8CEC.GLenum
  GL_COLOR_ATTACHMENT12_NV* = 0x8CEC.GLenum
  GL_COLOR_ATTACHMENT13* = 0x8CED.GLenum
  GL_COLOR_ATTACHMENT13_EXT* = 0x8CED.GLenum
  GL_COLOR_ATTACHMENT13_NV* = 0x8CED.GLenum
  GL_COLOR_ATTACHMENT14* = 0x8CEE.GLenum
  GL_COLOR_ATTACHMENT14_EXT* = 0x8CEE.GLenum
  GL_COLOR_ATTACHMENT14_NV* = 0x8CEE.GLenum
  GL_COLOR_ATTACHMENT15* = 0x8CEF.GLenum
  GL_COLOR_ATTACHMENT15_EXT* = 0x8CEF.GLenum
  GL_COLOR_ATTACHMENT15_NV* = 0x8CEF.GLenum
  GL_COLOR_ATTACHMENT16* = 0x8CF0.GLenum
  GL_COLOR_ATTACHMENT17* = 0x8CF1.GLenum
  GL_COLOR_ATTACHMENT18* = 0x8CF2.GLenum
  GL_COLOR_ATTACHMENT19* = 0x8CF3.GLenum
  GL_COLOR_ATTACHMENT20* = 0x8CF4.GLenum
  GL_COLOR_ATTACHMENT21* = 0x8CF5.GLenum
  GL_COLOR_ATTACHMENT22* = 0x8CF6.GLenum
  GL_COLOR_ATTACHMENT23* = 0x8CF7.GLenum
  GL_COLOR_ATTACHMENT24* = 0x8CF8.GLenum
  GL_COLOR_ATTACHMENT25* = 0x8CF9.GLenum
  GL_COLOR_ATTACHMENT26* = 0x8CFA.GLenum
  GL_COLOR_ATTACHMENT27* = 0x8CFB.GLenum
  GL_COLOR_ATTACHMENT28* = 0x8CFC.GLenum
  GL_COLOR_ATTACHMENT29* = 0x8CFD.GLenum
  GL_COLOR_ATTACHMENT30* = 0x8CFE.GLenum
  GL_COLOR_ATTACHMENT31* = 0x8CFF.GLenum
  GL_DEPTH_ATTACHMENT* = 0x8D00.GLenum
  GL_DEPTH_ATTACHMENT_EXT* = 0x8D00.GLenum
  GL_DEPTH_ATTACHMENT_OES* = 0x8D00.GLenum
  GL_STENCIL_ATTACHMENT* = 0x8D20.GLenum
  GL_STENCIL_ATTACHMENT_EXT* = 0x8D20.GLenum
  GL_STENCIL_ATTACHMENT_OES* = 0x8D20.GLenum
  GL_FRAMEBUFFER* = 0x8D40.GLenum
  GL_FRAMEBUFFER_EXT* = 0x8D40.GLenum
  GL_FRAMEBUFFER_OES* = 0x8D40.GLenum
  GL_RENDERBUFFER* = 0x8D41.GLenum
  GL_RENDERBUFFER_EXT* = 0x8D41.GLenum
  GL_RENDERBUFFER_OES* = 0x8D41.GLenum
  GL_RENDERBUFFER_WIDTH* = 0x8D42.GLenum
  GL_RENDERBUFFER_WIDTH_EXT* = 0x8D42.GLenum
  GL_RENDERBUFFER_WIDTH_OES* = 0x8D42.GLenum
  GL_RENDERBUFFER_HEIGHT* = 0x8D43.GLenum
  GL_RENDERBUFFER_HEIGHT_EXT* = 0x8D43.GLenum
  GL_RENDERBUFFER_HEIGHT_OES* = 0x8D43.GLenum
  GL_RENDERBUFFER_INTERNAL_FORMAT* = 0x8D44.GLenum
  GL_RENDERBUFFER_INTERNAL_FORMAT_EXT* = 0x8D44.GLenum
  GL_RENDERBUFFER_INTERNAL_FORMAT_OES* = 0x8D44.GLenum
  GL_STENCIL_INDEX1* = 0x8D46.GLenum
  GL_STENCIL_INDEX1_EXT* = 0x8D46.GLenum
  GL_STENCIL_INDEX1_OES* = 0x8D46.GLenum
  GL_STENCIL_INDEX4* = 0x8D47.GLenum
  GL_STENCIL_INDEX4_EXT* = 0x8D47.GLenum
  GL_STENCIL_INDEX4_OES* = 0x8D47.GLenum
  GL_STENCIL_INDEX8* = 0x8D48.GLenum
  GL_STENCIL_INDEX8_EXT* = 0x8D48.GLenum
  GL_STENCIL_INDEX8_OES* = 0x8D48.GLenum
  GL_STENCIL_INDEX16* = 0x8D49.GLenum
  GL_STENCIL_INDEX16_EXT* = 0x8D49.GLenum
  GL_RENDERBUFFER_RED_SIZE* = 0x8D50.GLenum
  GL_RENDERBUFFER_RED_SIZE_EXT* = 0x8D50.GLenum
  GL_RENDERBUFFER_RED_SIZE_OES* = 0x8D50.GLenum
  GL_RENDERBUFFER_GREEN_SIZE* = 0x8D51.GLenum
  GL_RENDERBUFFER_GREEN_SIZE_EXT* = 0x8D51.GLenum
  GL_RENDERBUFFER_GREEN_SIZE_OES* = 0x8D51.GLenum
  GL_RENDERBUFFER_BLUE_SIZE* = 0x8D52.GLenum
  GL_RENDERBUFFER_BLUE_SIZE_EXT* = 0x8D52.GLenum
  GL_RENDERBUFFER_BLUE_SIZE_OES* = 0x8D52.GLenum
  GL_RENDERBUFFER_ALPHA_SIZE* = 0x8D53.GLenum
  GL_RENDERBUFFER_ALPHA_SIZE_EXT* = 0x8D53.GLenum
  GL_RENDERBUFFER_ALPHA_SIZE_OES* = 0x8D53.GLenum
  GL_RENDERBUFFER_DEPTH_SIZE* = 0x8D54.GLenum
  GL_RENDERBUFFER_DEPTH_SIZE_EXT* = 0x8D54.GLenum
  GL_RENDERBUFFER_DEPTH_SIZE_OES* = 0x8D54.GLenum
  GL_RENDERBUFFER_STENCIL_SIZE* = 0x8D55.GLenum
  GL_RENDERBUFFER_STENCIL_SIZE_EXT* = 0x8D55.GLenum
  GL_RENDERBUFFER_STENCIL_SIZE_OES* = 0x8D55.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE* = 0x8D56.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE* = 0x8D56.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE* = 0x8D56.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT* = 0x8D56.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV* = 0x8D56.GLenum
  GL_MAX_SAMPLES* = 0x8D57.GLenum
  GL_MAX_SAMPLES_ANGLE* = 0x8D57.GLenum
  GL_MAX_SAMPLES_APPLE* = 0x8D57.GLenum
  GL_MAX_SAMPLES_EXT* = 0x8D57.GLenum
  GL_MAX_SAMPLES_NV* = 0x8D57.GLenum
  GL_TEXTURE_GEN_STR_OES* = 0x8D60.GLenum
  GL_HALF_FLOAT_OES* = 0x8D61.GLenum
  GL_RGB565_OES* = 0x8D62.GLenum
  GL_RGB565* = 0x8D62.GLenum
  GL_ETC1_RGB8_OES* = 0x8D64.GLenum
  GL_TEXTURE_EXTERNAL_OES* = 0x8D65.GLenum
  GL_SAMPLER_EXTERNAL_OES* = 0x8D66.GLenum
  GL_TEXTURE_BINDING_EXTERNAL_OES* = 0x8D67.GLenum
  GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES* = 0x8D68.GLenum
  GL_PRIMITIVE_RESTART_FIXED_INDEX* = 0x8D69.GLenum
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE* = 0x8D6A.GLenum
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT* = 0x8D6A.GLenum
  GL_MAX_ELEMENT_INDEX* = 0x8D6B.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT* = 0x8D6C.GLenum
  GL_RGBA32UI* = 0x8D70.GLenum
  GL_RGBA32UI_EXT* = 0x8D70.GLenum
  GL_RGB32UI* = 0x8D71.GLenum
  GL_RGB32UI_EXT* = 0x8D71.GLenum
  GL_ALPHA32UI_EXT* = 0x8D72.GLenum
  GL_INTENSITY32UI_EXT* = 0x8D73.GLenum
  GL_LUMINANCE32UI_EXT* = 0x8D74.GLenum
  GL_LUMINANCE_ALPHA32UI_EXT* = 0x8D75.GLenum
  GL_RGBA16UI* = 0x8D76.GLenum
  GL_RGBA16UI_EXT* = 0x8D76.GLenum
  GL_RGB16UI* = 0x8D77.GLenum
  GL_RGB16UI_EXT* = 0x8D77.GLenum
  GL_ALPHA16UI_EXT* = 0x8D78.GLenum
  GL_INTENSITY16UI_EXT* = 0x8D79.GLenum
  GL_LUMINANCE16UI_EXT* = 0x8D7A.GLenum
  GL_LUMINANCE_ALPHA16UI_EXT* = 0x8D7B.GLenum
  GL_RGBA8UI* = 0x8D7C.GLenum
  GL_RGBA8UI_EXT* = 0x8D7C.GLenum
  GL_RGB8UI* = 0x8D7D.GLenum
  GL_RGB8UI_EXT* = 0x8D7D.GLenum
  GL_ALPHA8UI_EXT* = 0x8D7E.GLenum
  GL_INTENSITY8UI_EXT* = 0x8D7F.GLenum
  GL_LUMINANCE8UI_EXT* = 0x8D80.GLenum
  GL_LUMINANCE_ALPHA8UI_EXT* = 0x8D81.GLenum
  GL_RGBA32I* = 0x8D82.GLenum
  GL_RGBA32I_EXT* = 0x8D82.GLenum
  GL_RGB32I* = 0x8D83.GLenum
  GL_RGB32I_EXT* = 0x8D83.GLenum
  GL_ALPHA32I_EXT* = 0x8D84.GLenum
  GL_INTENSITY32I_EXT* = 0x8D85.GLenum
  GL_LUMINANCE32I_EXT* = 0x8D86.GLenum
  GL_LUMINANCE_ALPHA32I_EXT* = 0x8D87.GLenum
  GL_RGBA16I* = 0x8D88.GLenum
  GL_RGBA16I_EXT* = 0x8D88.GLenum
  GL_RGB16I* = 0x8D89.GLenum
  GL_RGB16I_EXT* = 0x8D89.GLenum
  GL_ALPHA16I_EXT* = 0x8D8A.GLenum
  GL_INTENSITY16I_EXT* = 0x8D8B.GLenum
  GL_LUMINANCE16I_EXT* = 0x8D8C.GLenum
  GL_LUMINANCE_ALPHA16I_EXT* = 0x8D8D.GLenum
  GL_RGBA8I* = 0x8D8E.GLenum
  GL_RGBA8I_EXT* = 0x8D8E.GLenum
  GL_RGB8I* = 0x8D8F.GLenum
  GL_RGB8I_EXT* = 0x8D8F.GLenum
  GL_ALPHA8I_EXT* = 0x8D90.GLenum
  GL_INTENSITY8I_EXT* = 0x8D91.GLenum
  GL_LUMINANCE8I_EXT* = 0x8D92.GLenum
  GL_LUMINANCE_ALPHA8I_EXT* = 0x8D93.GLenum
  GL_RED_INTEGER* = 0x8D94.GLenum
  GL_RED_INTEGER_EXT* = 0x8D94.GLenum
  GL_GREEN_INTEGER* = 0x8D95.GLenum
  GL_GREEN_INTEGER_EXT* = 0x8D95.GLenum
  GL_BLUE_INTEGER* = 0x8D96.GLenum
  GL_BLUE_INTEGER_EXT* = 0x8D96.GLenum
  GL_ALPHA_INTEGER* = 0x8D97.GLenum
  GL_ALPHA_INTEGER_EXT* = 0x8D97.GLenum
  GL_RGB_INTEGER* = 0x8D98.GLenum
  GL_RGB_INTEGER_EXT* = 0x8D98.GLenum
  GL_RGBA_INTEGER* = 0x8D99.GLenum
  GL_RGBA_INTEGER_EXT* = 0x8D99.GLenum
  GL_BGR_INTEGER* = 0x8D9A.GLenum
  GL_BGR_INTEGER_EXT* = 0x8D9A.GLenum
  GL_BGRA_INTEGER* = 0x8D9B.GLenum
  GL_BGRA_INTEGER_EXT* = 0x8D9B.GLenum
  GL_LUMINANCE_INTEGER_EXT* = 0x8D9C.GLenum
  GL_LUMINANCE_ALPHA_INTEGER_EXT* = 0x8D9D.GLenum
  GL_RGBA_INTEGER_MODE_EXT* = 0x8D9E.GLenum
  GL_INT_2_10_10_10_REV* = 0x8D9F.GLenum
  GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV* = 0x8DA0.GLenum
  GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV* = 0x8DA1.GLenum
  GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV* = 0x8DA2.GLenum
  GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV* = 0x8DA3.GLenum
  GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV* = 0x8DA4.GLenum
  GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV* = 0x8DA5.GLenum
  GL_MAX_PROGRAM_GENERIC_RESULTS_NV* = 0x8DA6.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS* = 0x8DA8.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB* = 0x8DA8.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT* = 0x8DA8.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES* = 0x8DA8.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB* = 0x8DA9.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT* = 0x8DA9.GLenum
  GL_LAYER_NV* = 0x8DAA.GLenum
  GL_DEPTH_COMPONENT32F_NV* = 0x8DAB.GLenum
  GL_DEPTH32F_STENCIL8_NV* = 0x8DAC.GLenum
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV* = 0x8DAD.GLenum
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV* = 0x8DAD.GLenum
  GL_SHADER_INCLUDE_ARB* = 0x8DAE.GLenum
  GL_DEPTH_BUFFER_FLOAT_MODE_NV* = 0x8DAF.GLenum
  GL_FRAMEBUFFER_SRGB* = 0x8DB9.GLenum
  GL_FRAMEBUFFER_SRGB_EXT* = 0x8DB9.GLenum
  GL_FRAMEBUFFER_SRGB_CAPABLE_EXT* = 0x8DBA.GLenum
  GL_COMPRESSED_RED_RGTC1* = 0x8DBB.GLenum
  GL_COMPRESSED_RED_RGTC1_EXT* = 0x8DBB.GLenum
  GL_COMPRESSED_SIGNED_RED_RGTC1* = 0x8DBC.GLenum
  GL_COMPRESSED_SIGNED_RED_RGTC1_EXT* = 0x8DBC.GLenum
  GL_COMPRESSED_RED_GREEN_RGTC2_EXT* = 0x8DBD.GLenum
  GL_COMPRESSED_RG_RGTC2* = 0x8DBD.GLenum
  GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT* = 0x8DBE.GLenum
  GL_COMPRESSED_SIGNED_RG_RGTC2* = 0x8DBE.GLenum
  GL_SAMPLER_1D_ARRAY* = 0x8DC0.GLenum
  GL_SAMPLER_1D_ARRAY_EXT* = 0x8DC0.GLenum
  GL_SAMPLER_2D_ARRAY* = 0x8DC1.GLenum
  GL_SAMPLER_2D_ARRAY_EXT* = 0x8DC1.GLenum
  GL_SAMPLER_BUFFER* = 0x8DC2.GLenum
  GL_SAMPLER_BUFFER_EXT* = 0x8DC2.GLenum
  GL_SAMPLER_BUFFER_OES* = 0x8DC2.GLenum
  GL_SAMPLER_1D_ARRAY_SHADOW* = 0x8DC3.GLenum
  GL_SAMPLER_1D_ARRAY_SHADOW_EXT* = 0x8DC3.GLenum
  GL_SAMPLER_2D_ARRAY_SHADOW* = 0x8DC4.GLenum
  GL_SAMPLER_2D_ARRAY_SHADOW_EXT* = 0x8DC4.GLenum
  GL_SAMPLER_2D_ARRAY_SHADOW_NV* = 0x8DC4.GLenum
  GL_SAMPLER_CUBE_SHADOW* = 0x8DC5.GLenum
  GL_SAMPLER_CUBE_SHADOW_EXT* = 0x8DC5.GLenum
  GL_SAMPLER_CUBE_SHADOW_NV* = 0x8DC5.GLenum
  GL_UNSIGNED_INT_VEC2* = 0x8DC6.GLenum
  GL_UNSIGNED_INT_VEC2_EXT* = 0x8DC6.GLenum
  GL_UNSIGNED_INT_VEC3* = 0x8DC7.GLenum
  GL_UNSIGNED_INT_VEC3_EXT* = 0x8DC7.GLenum
  GL_UNSIGNED_INT_VEC4* = 0x8DC8.GLenum
  GL_UNSIGNED_INT_VEC4_EXT* = 0x8DC8.GLenum
  GL_INT_SAMPLER_1D* = 0x8DC9.GLenum
  GL_INT_SAMPLER_1D_EXT* = 0x8DC9.GLenum
  GL_INT_SAMPLER_2D* = 0x8DCA.GLenum
  GL_INT_SAMPLER_2D_EXT* = 0x8DCA.GLenum
  GL_INT_SAMPLER_3D* = 0x8DCB.GLenum
  GL_INT_SAMPLER_3D_EXT* = 0x8DCB.GLenum
  GL_INT_SAMPLER_CUBE* = 0x8DCC.GLenum
  GL_INT_SAMPLER_CUBE_EXT* = 0x8DCC.GLenum
  GL_INT_SAMPLER_2D_RECT* = 0x8DCD.GLenum
  GL_INT_SAMPLER_2D_RECT_EXT* = 0x8DCD.GLenum
  GL_INT_SAMPLER_1D_ARRAY* = 0x8DCE.GLenum
  GL_INT_SAMPLER_1D_ARRAY_EXT* = 0x8DCE.GLenum
  GL_INT_SAMPLER_2D_ARRAY* = 0x8DCF.GLenum
  GL_INT_SAMPLER_2D_ARRAY_EXT* = 0x8DCF.GLenum
  GL_INT_SAMPLER_BUFFER* = 0x8DD0.GLenum
  GL_INT_SAMPLER_BUFFER_EXT* = 0x8DD0.GLenum
  GL_INT_SAMPLER_BUFFER_OES* = 0x8DD0.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D* = 0x8DD1.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D_EXT* = 0x8DD1.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D* = 0x8DD2.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_EXT* = 0x8DD2.GLenum
  GL_UNSIGNED_INT_SAMPLER_3D* = 0x8DD3.GLenum
  GL_UNSIGNED_INT_SAMPLER_3D_EXT* = 0x8DD3.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE* = 0x8DD4.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_EXT* = 0x8DD4.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_RECT* = 0x8DD5.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT* = 0x8DD5.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY* = 0x8DD6.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT* = 0x8DD6.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY* = 0x8DD7.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT* = 0x8DD7.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER* = 0x8DD8.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT* = 0x8DD8.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER_OES* = 0x8DD8.GLenum
  GL_GEOMETRY_SHADER* = 0x8DD9.GLenum
  GL_GEOMETRY_SHADER_ARB* = 0x8DD9.GLenum
  GL_GEOMETRY_SHADER_EXT* = 0x8DD9.GLenum
  GL_GEOMETRY_SHADER_OES* = 0x8DD9.GLenum
  GL_GEOMETRY_VERTICES_OUT_ARB* = 0x8DDA.GLenum
  GL_GEOMETRY_VERTICES_OUT_EXT* = 0x8DDA.GLenum
  GL_GEOMETRY_INPUT_TYPE_ARB* = 0x8DDB.GLenum
  GL_GEOMETRY_INPUT_TYPE_EXT* = 0x8DDB.GLenum
  GL_GEOMETRY_OUTPUT_TYPE_ARB* = 0x8DDC.GLenum
  GL_GEOMETRY_OUTPUT_TYPE_EXT* = 0x8DDC.GLenum
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB* = 0x8DDD.GLenum
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT* = 0x8DDD.GLenum
  GL_MAX_VERTEX_VARYING_COMPONENTS_ARB* = 0x8DDE.GLenum
  GL_MAX_VERTEX_VARYING_COMPONENTS_EXT* = 0x8DDE.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS* = 0x8DE1.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB* = 0x8DE1.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT* = 0x8DE1.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES* = 0x8DE1.GLenum
  GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT* = 0x8DE2.GLenum
  GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT* = 0x8DE3.GLenum
  GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT* = 0x8DE4.GLenum
  GL_ACTIVE_SUBROUTINES* = 0x8DE5.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORMS* = 0x8DE6.GLenum
  GL_MAX_SUBROUTINES* = 0x8DE7.GLenum
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS* = 0x8DE8.GLenum
  GL_NAMED_STRING_LENGTH_ARB* = 0x8DE9.GLenum
  GL_NAMED_STRING_TYPE_ARB* = 0x8DEA.GLenum
  GL_MAX_BINDABLE_UNIFORM_SIZE_EXT* = 0x8DED.GLenum
  GL_UNIFORM_BUFFER_EXT* = 0x8DEE.GLenum
  GL_UNIFORM_BUFFER_BINDING_EXT* = 0x8DEF.GLenum
  GL_LOW_FLOAT* = 0x8DF0.GLenum
  GL_MEDIUM_FLOAT* = 0x8DF1.GLenum
  GL_HIGH_FLOAT* = 0x8DF2.GLenum
  GL_LOW_INT* = 0x8DF3.GLenum
  GL_MEDIUM_INT* = 0x8DF4.GLenum
  GL_HIGH_INT* = 0x8DF5.GLenum
  GL_UNSIGNED_INT_10_10_10_2_OES* = 0x8DF6.GLenum
  GL_INT_10_10_10_2_OES* = 0x8DF7.GLenum
  GL_SHADER_BINARY_FORMATS* = 0x8DF8.GLenum
  GL_NUM_SHADER_BINARY_FORMATS* = 0x8DF9.GLenum
  GL_SHADER_COMPILER* = 0x8DFA.GLenum
  GL_MAX_VERTEX_UNIFORM_VECTORS* = 0x8DFB.GLenum
  GL_MAX_VARYING_VECTORS* = 0x8DFC.GLenum
  GL_MAX_FRAGMENT_UNIFORM_VECTORS* = 0x8DFD.GLenum
  GL_RENDERBUFFER_COLOR_SAMPLES_NV* = 0x8E10.GLenum
  GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV* = 0x8E11.GLenum
  GL_MULTISAMPLE_COVERAGE_MODES_NV* = 0x8E12.GLenum
  GL_QUERY_WAIT* = 0x8E13.GLenum
  GL_QUERY_WAIT_NV* = 0x8E13.GLenum
  GL_QUERY_NO_WAIT* = 0x8E14.GLenum
  GL_QUERY_NO_WAIT_NV* = 0x8E14.GLenum
  GL_QUERY_BY_REGION_WAIT* = 0x8E15.GLenum
  GL_QUERY_BY_REGION_WAIT_NV* = 0x8E15.GLenum
  GL_QUERY_BY_REGION_NO_WAIT* = 0x8E16.GLenum
  GL_QUERY_BY_REGION_NO_WAIT_NV* = 0x8E16.GLenum
  GL_QUERY_WAIT_INVERTED* = 0x8E17.GLenum
  GL_QUERY_NO_WAIT_INVERTED* = 0x8E18.GLenum
  GL_QUERY_BY_REGION_WAIT_INVERTED* = 0x8E19.GLenum
  GL_QUERY_BY_REGION_NO_WAIT_INVERTED* = 0x8E1A.GLenum
  GL_POLYGON_OFFSET_CLAMP* = 0x8E1B.GLenum
  GL_POLYGON_OFFSET_CLAMP_EXT* = 0x8E1B.GLenum
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS* = 0x8E1E.GLenum
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT* = 0x8E1E.GLenum
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES* = 0x8E1E.GLenum
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS* = 0x8E1F.GLenum
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT* = 0x8E1F.GLenum
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES* = 0x8E1F.GLenum
  GL_COLOR_SAMPLES_NV* = 0x8E20.GLenum
  GL_TRANSFORM_FEEDBACK* = 0x8E22.GLenum
  GL_TRANSFORM_FEEDBACK_NV* = 0x8E22.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED* = 0x8E23.GLenum
  GL_TRANSFORM_FEEDBACK_PAUSED* = 0x8E23.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV* = 0x8E23.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_ACTIVE* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_BINDING* = 0x8E25.GLenum
  GL_TRANSFORM_FEEDBACK_BINDING_NV* = 0x8E25.GLenum
  GL_FRAME_NV* = 0x8E26.GLenum
  GL_FIELDS_NV* = 0x8E27.GLenum
  GL_CURRENT_TIME_NV* = 0x8E28.GLenum
  GL_TIMESTAMP* = 0x8E28.GLenum
  GL_TIMESTAMP_EXT* = 0x8E28.GLenum
  GL_NUM_FILL_STREAMS_NV* = 0x8E29.GLenum
  GL_PRESENT_TIME_NV* = 0x8E2A.GLenum
  GL_PRESENT_DURATION_NV* = 0x8E2B.GLenum
  GL_DEPTH_COMPONENT16_NONLINEAR_NV* = 0x8E2C.GLenum
  GL_PROGRAM_MATRIX_EXT* = 0x8E2D.GLenum
  GL_TRANSPOSE_PROGRAM_MATRIX_EXT* = 0x8E2E.GLenum
  GL_PROGRAM_MATRIX_STACK_DEPTH_EXT* = 0x8E2F.GLenum
  GL_TEXTURE_SWIZZLE_R* = 0x8E42.GLenum
  GL_TEXTURE_SWIZZLE_R_EXT* = 0x8E42.GLenum
  GL_TEXTURE_SWIZZLE_G* = 0x8E43.GLenum
  GL_TEXTURE_SWIZZLE_G_EXT* = 0x8E43.GLenum
  GL_TEXTURE_SWIZZLE_B* = 0x8E44.GLenum
  GL_TEXTURE_SWIZZLE_B_EXT* = 0x8E44.GLenum
  GL_TEXTURE_SWIZZLE_A* = 0x8E45.GLenum
  GL_TEXTURE_SWIZZLE_A_EXT* = 0x8E45.GLenum
  GL_TEXTURE_SWIZZLE_RGBA* = 0x8E46.GLenum
  GL_TEXTURE_SWIZZLE_RGBA_EXT* = 0x8E46.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS* = 0x8E47.GLenum
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH* = 0x8E48.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH* = 0x8E49.GLenum
  GL_NUM_COMPATIBLE_SUBROUTINES* = 0x8E4A.GLenum
  GL_COMPATIBLE_SUBROUTINES* = 0x8E4B.GLenum
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION* = 0x8E4C.GLenum
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT* = 0x8E4C.GLenum
  GL_FIRST_VERTEX_CONVENTION* = 0x8E4D.GLenum
  GL_FIRST_VERTEX_CONVENTION_EXT* = 0x8E4D.GLenum
  GL_FIRST_VERTEX_CONVENTION_OES* = 0x8E4D.GLenum
  GL_LAST_VERTEX_CONVENTION* = 0x8E4E.GLenum
  GL_LAST_VERTEX_CONVENTION_EXT* = 0x8E4E.GLenum
  GL_LAST_VERTEX_CONVENTION_OES* = 0x8E4E.GLenum
  GL_PROVOKING_VERTEX* = 0x8E4F.GLenum
  GL_PROVOKING_VERTEX_EXT* = 0x8E4F.GLenum
  GL_SAMPLE_POSITION* = 0x8E50.GLenum
  GL_SAMPLE_POSITION_NV* = 0x8E50.GLenum
  GL_SAMPLE_LOCATION_ARB* = 0x8E50.GLenum
  GL_SAMPLE_LOCATION_NV* = 0x8E50.GLenum
  GL_SAMPLE_MASK* = 0x8E51.GLenum
  GL_SAMPLE_MASK_NV* = 0x8E51.GLenum
  GL_SAMPLE_MASK_VALUE* = 0x8E52.GLenum
  GL_SAMPLE_MASK_VALUE_NV* = 0x8E52.GLenum
  GL_TEXTURE_BINDING_RENDERBUFFER_NV* = 0x8E53.GLenum
  GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV* = 0x8E54.GLenum
  GL_TEXTURE_RENDERBUFFER_NV* = 0x8E55.GLenum
  GL_SAMPLER_RENDERBUFFER_NV* = 0x8E56.GLenum
  GL_INT_SAMPLER_RENDERBUFFER_NV* = 0x8E57.GLenum
  GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV* = 0x8E58.GLenum
  GL_MAX_SAMPLE_MASK_WORDS* = 0x8E59.GLenum
  GL_MAX_SAMPLE_MASK_WORDS_NV* = 0x8E59.GLenum
  GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV* = 0x8E5A.GLenum
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS* = 0x8E5A.GLenum
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT* = 0x8E5A.GLenum
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES* = 0x8E5A.GLenum
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET* = 0x8E5B.GLenum
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES* = 0x8E5B.GLenum
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV* = 0x8E5B.GLenum
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET* = 0x8E5C.GLenum
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES* = 0x8E5C.GLenum
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV* = 0x8E5C.GLenum
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS* = 0x8E5D.GLenum
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES* = 0x8E5D.GLenum
  GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV* = 0x8E5D.GLenum
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET* = 0x8E5E.GLenum
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB* = 0x8E5E.GLenum
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV* = 0x8E5E.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET* = 0x8E5F.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB* = 0x8E5F.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV* = 0x8E5F.GLenum
  GL_MAX_MESH_UNIFORM_BLOCKS_NV* = 0x8E60.GLenum
  GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV* = 0x8E61.GLenum
  GL_MAX_MESH_IMAGE_UNIFORMS_NV* = 0x8E62.GLenum
  GL_MAX_MESH_UNIFORM_COMPONENTS_NV* = 0x8E63.GLenum
  GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV* = 0x8E64.GLenum
  GL_MAX_MESH_ATOMIC_COUNTERS_NV* = 0x8E65.GLenum
  GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV* = 0x8E66.GLenum
  GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV* = 0x8E67.GLenum
  GL_MAX_TASK_UNIFORM_BLOCKS_NV* = 0x8E68.GLenum
  GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV* = 0x8E69.GLenum
  GL_MAX_TASK_IMAGE_UNIFORMS_NV* = 0x8E6A.GLenum
  GL_MAX_TASK_UNIFORM_COMPONENTS_NV* = 0x8E6B.GLenum
  GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV* = 0x8E6C.GLenum
  GL_MAX_TASK_ATOMIC_COUNTERS_NV* = 0x8E6D.GLenum
  GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV* = 0x8E6E.GLenum
  GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV* = 0x8E6F.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS* = 0x8E70.GLenum
  GL_MAX_VERTEX_STREAMS* = 0x8E71.GLenum
  GL_PATCH_VERTICES* = 0x8E72.GLenum
  GL_PATCH_VERTICES_EXT* = 0x8E72.GLenum
  GL_PATCH_VERTICES_OES* = 0x8E72.GLenum
  GL_PATCH_DEFAULT_INNER_LEVEL* = 0x8E73.GLenum
  GL_PATCH_DEFAULT_INNER_LEVEL_EXT* = 0x8E73.GLenum
  GL_PATCH_DEFAULT_OUTER_LEVEL* = 0x8E74.GLenum
  GL_PATCH_DEFAULT_OUTER_LEVEL_EXT* = 0x8E74.GLenum
  GL_TESS_CONTROL_OUTPUT_VERTICES* = 0x8E75.GLenum
  GL_TESS_CONTROL_OUTPUT_VERTICES_EXT* = 0x8E75.GLenum
  GL_TESS_CONTROL_OUTPUT_VERTICES_OES* = 0x8E75.GLenum
  GL_TESS_GEN_MODE* = 0x8E76.GLenum
  GL_TESS_GEN_MODE_EXT* = 0x8E76.GLenum
  GL_TESS_GEN_MODE_OES* = 0x8E76.GLenum
  GL_TESS_GEN_SPACING* = 0x8E77.GLenum
  GL_TESS_GEN_SPACING_EXT* = 0x8E77.GLenum
  GL_TESS_GEN_SPACING_OES* = 0x8E77.GLenum
  GL_TESS_GEN_VERTEX_ORDER* = 0x8E78.GLenum
  GL_TESS_GEN_VERTEX_ORDER_EXT* = 0x8E78.GLenum
  GL_TESS_GEN_VERTEX_ORDER_OES* = 0x8E78.GLenum
  GL_TESS_GEN_POINT_MODE* = 0x8E79.GLenum
  GL_TESS_GEN_POINT_MODE_EXT* = 0x8E79.GLenum
  GL_TESS_GEN_POINT_MODE_OES* = 0x8E79.GLenum
  GL_ISOLINES* = 0x8E7A.GLenum
  GL_ISOLINES_EXT* = 0x8E7A.GLenum
  GL_ISOLINES_OES* = 0x8E7A.GLenum
  GL_FRACTIONAL_ODD* = 0x8E7B.GLenum
  GL_FRACTIONAL_ODD_EXT* = 0x8E7B.GLenum
  GL_FRACTIONAL_ODD_OES* = 0x8E7B.GLenum
  GL_FRACTIONAL_EVEN* = 0x8E7C.GLenum
  GL_FRACTIONAL_EVEN_EXT* = 0x8E7C.GLenum
  GL_FRACTIONAL_EVEN_OES* = 0x8E7C.GLenum
  GL_MAX_PATCH_VERTICES* = 0x8E7D.GLenum
  GL_MAX_PATCH_VERTICES_EXT* = 0x8E7D.GLenum
  GL_MAX_PATCH_VERTICES_OES* = 0x8E7D.GLenum
  GL_MAX_TESS_GEN_LEVEL* = 0x8E7E.GLenum
  GL_MAX_TESS_GEN_LEVEL_EXT* = 0x8E7E.GLenum
  GL_MAX_TESS_GEN_LEVEL_OES* = 0x8E7E.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS* = 0x8E7F.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT* = 0x8E7F.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES* = 0x8E7F.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS* = 0x8E80.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT* = 0x8E80.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES* = 0x8E80.GLenum
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS* = 0x8E81.GLenum
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT* = 0x8E81.GLenum
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES* = 0x8E81.GLenum
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS* = 0x8E82.GLenum
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT* = 0x8E82.GLenum
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES* = 0x8E82.GLenum
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS* = 0x8E83.GLenum
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT* = 0x8E83.GLenum
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES* = 0x8E83.GLenum
  GL_MAX_TESS_PATCH_COMPONENTS* = 0x8E84.GLenum
  GL_MAX_TESS_PATCH_COMPONENTS_EXT* = 0x8E84.GLenum
  GL_MAX_TESS_PATCH_COMPONENTS_OES* = 0x8E84.GLenum
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS* = 0x8E85.GLenum
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT* = 0x8E85.GLenum
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES* = 0x8E85.GLenum
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS* = 0x8E86.GLenum
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT* = 0x8E86.GLenum
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES* = 0x8E86.GLenum
  GL_TESS_EVALUATION_SHADER* = 0x8E87.GLenum
  GL_TESS_EVALUATION_SHADER_EXT* = 0x8E87.GLenum
  GL_TESS_EVALUATION_SHADER_OES* = 0x8E87.GLenum
  GL_TESS_CONTROL_SHADER* = 0x8E88.GLenum
  GL_TESS_CONTROL_SHADER_EXT* = 0x8E88.GLenum
  GL_TESS_CONTROL_SHADER_OES* = 0x8E88.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS* = 0x8E89.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT* = 0x8E89.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES* = 0x8E89.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS* = 0x8E8A.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT* = 0x8E8A.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES* = 0x8E8A.GLenum
  GL_COMPRESSED_RGBA_BPTC_UNORM* = 0x8E8C.GLenum
  GL_COMPRESSED_RGBA_BPTC_UNORM_ARB* = 0x8E8C.GLenum
  GL_COMPRESSED_RGBA_BPTC_UNORM_EXT* = 0x8E8C.GLenum
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM* = 0x8E8D.GLenum
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB* = 0x8E8D.GLenum
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT* = 0x8E8D.GLenum
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT* = 0x8E8E.GLenum
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB* = 0x8E8E.GLenum
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT* = 0x8E8E.GLenum
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT* = 0x8E8F.GLenum
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB* = 0x8E8F.GLenum
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT* = 0x8E8F.GLenum
  GL_COVERAGE_COMPONENT_NV* = 0x8ED0.GLenum
  GL_COVERAGE_COMPONENT4_NV* = 0x8ED1.GLenum
  GL_COVERAGE_ATTACHMENT_NV* = 0x8ED2.GLenum
  GL_COVERAGE_BUFFERS_NV* = 0x8ED3.GLenum
  GL_COVERAGE_SAMPLES_NV* = 0x8ED4.GLenum
  GL_COVERAGE_ALL_FRAGMENTS_NV* = 0x8ED5.GLenum
  GL_COVERAGE_EDGE_FRAGMENTS_NV* = 0x8ED6.GLenum
  GL_COVERAGE_AUTOMATIC_NV* = 0x8ED7.GLenum
  GL_INCLUSIVE_EXT* = 0x8F10.GLenum
  GL_EXCLUSIVE_EXT* = 0x8F11.GLenum
  GL_WINDOW_RECTANGLE_EXT* = 0x8F12.GLenum
  GL_WINDOW_RECTANGLE_MODE_EXT* = 0x8F13.GLenum
  GL_MAX_WINDOW_RECTANGLES_EXT* = 0x8F14.GLenum
  GL_NUM_WINDOW_RECTANGLES_EXT* = 0x8F15.GLenum
  GL_BUFFER_GPU_ADDRESS_NV* = 0x8F1D.GLenum
  GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV* = 0x8F1E.GLenum
  GL_ELEMENT_ARRAY_UNIFIED_NV* = 0x8F1F.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV* = 0x8F20.GLenum
  GL_VERTEX_ARRAY_ADDRESS_NV* = 0x8F21.GLenum
  GL_NORMAL_ARRAY_ADDRESS_NV* = 0x8F22.GLenum
  GL_COLOR_ARRAY_ADDRESS_NV* = 0x8F23.GLenum
  GL_INDEX_ARRAY_ADDRESS_NV* = 0x8F24.GLenum
  GL_TEXTURE_COORD_ARRAY_ADDRESS_NV* = 0x8F25.GLenum
  GL_EDGE_FLAG_ARRAY_ADDRESS_NV* = 0x8F26.GLenum
  GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV* = 0x8F27.GLenum
  GL_FOG_COORD_ARRAY_ADDRESS_NV* = 0x8F28.GLenum
  GL_ELEMENT_ARRAY_ADDRESS_NV* = 0x8F29.GLenum
  GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV* = 0x8F2A.GLenum
  GL_VERTEX_ARRAY_LENGTH_NV* = 0x8F2B.GLenum
  GL_NORMAL_ARRAY_LENGTH_NV* = 0x8F2C.GLenum
  GL_COLOR_ARRAY_LENGTH_NV* = 0x8F2D.GLenum
  GL_INDEX_ARRAY_LENGTH_NV* = 0x8F2E.GLenum
  GL_TEXTURE_COORD_ARRAY_LENGTH_NV* = 0x8F2F.GLenum
  GL_EDGE_FLAG_ARRAY_LENGTH_NV* = 0x8F30.GLenum
  GL_SECONDARY_COLOR_ARRAY_LENGTH_NV* = 0x8F31.GLenum
  GL_FOG_COORD_ARRAY_LENGTH_NV* = 0x8F32.GLenum
  GL_ELEMENT_ARRAY_LENGTH_NV* = 0x8F33.GLenum
  GL_GPU_ADDRESS_NV* = 0x8F34.GLenum
  GL_MAX_SHADER_BUFFER_ADDRESS_NV* = 0x8F35.GLenum
  GL_COPY_READ_BUFFER* = 0x8F36.GLenum
  GL_COPY_READ_BUFFER_NV* = 0x8F36.GLenum
  GL_COPY_READ_BUFFER_BINDING* = 0x8F36.GLenum
  GL_COPY_WRITE_BUFFER* = 0x8F37.GLenum
  GL_COPY_WRITE_BUFFER_NV* = 0x8F37.GLenum
  GL_COPY_WRITE_BUFFER_BINDING* = 0x8F37.GLenum
  GL_MAX_IMAGE_UNITS* = 0x8F38.GLenum
  GL_MAX_IMAGE_UNITS_EXT* = 0x8F38.GLenum
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS* = 0x8F39.GLenum
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT* = 0x8F39.GLenum
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES* = 0x8F39.GLenum
  GL_IMAGE_BINDING_NAME* = 0x8F3A.GLenum
  GL_IMAGE_BINDING_NAME_EXT* = 0x8F3A.GLenum
  GL_IMAGE_BINDING_LEVEL* = 0x8F3B.GLenum
  GL_IMAGE_BINDING_LEVEL_EXT* = 0x8F3B.GLenum
  GL_IMAGE_BINDING_LAYERED* = 0x8F3C.GLenum
  GL_IMAGE_BINDING_LAYERED_EXT* = 0x8F3C.GLenum
  GL_IMAGE_BINDING_LAYER* = 0x8F3D.GLenum
  GL_IMAGE_BINDING_LAYER_EXT* = 0x8F3D.GLenum
  GL_IMAGE_BINDING_ACCESS* = 0x8F3E.GLenum
  GL_IMAGE_BINDING_ACCESS_EXT* = 0x8F3E.GLenum
  GL_DRAW_INDIRECT_BUFFER* = 0x8F3F.GLenum
  GL_DRAW_INDIRECT_UNIFIED_NV* = 0x8F40.GLenum
  GL_DRAW_INDIRECT_ADDRESS_NV* = 0x8F41.GLenum
  GL_DRAW_INDIRECT_LENGTH_NV* = 0x8F42.GLenum
  GL_DRAW_INDIRECT_BUFFER_BINDING* = 0x8F43.GLenum
  GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV* = 0x8F44.GLenum
  GL_MAX_PROGRAM_SUBROUTINE_NUM_NV* = 0x8F45.GLenum
  GL_DOUBLE_MAT2* = 0x8F46.GLenum
  GL_DOUBLE_MAT2_EXT* = 0x8F46.GLenum
  GL_DOUBLE_MAT3* = 0x8F47.GLenum
  GL_DOUBLE_MAT3_EXT* = 0x8F47.GLenum
  GL_DOUBLE_MAT4* = 0x8F48.GLenum
  GL_DOUBLE_MAT4_EXT* = 0x8F48.GLenum
  GL_DOUBLE_MAT2x3* = 0x8F49.GLenum
  GL_DOUBLE_MAT2x3_EXT* = 0x8F49.GLenum
  GL_DOUBLE_MAT2x4* = 0x8F4A.GLenum
  GL_DOUBLE_MAT2x4_EXT* = 0x8F4A.GLenum
  GL_DOUBLE_MAT3x2* = 0x8F4B.GLenum
  GL_DOUBLE_MAT3x2_EXT* = 0x8F4B.GLenum
  GL_DOUBLE_MAT3x4* = 0x8F4C.GLenum
  GL_DOUBLE_MAT3x4_EXT* = 0x8F4C.GLenum
  GL_DOUBLE_MAT4x2* = 0x8F4D.GLenum
  GL_DOUBLE_MAT4x2_EXT* = 0x8F4D.GLenum
  GL_DOUBLE_MAT4x3* = 0x8F4E.GLenum
  GL_DOUBLE_MAT4x3_EXT* = 0x8F4E.GLenum
  GL_VERTEX_BINDING_BUFFER* = 0x8F4F.GLenum
  GL_MALI_SHADER_BINARY_ARM* = 0x8F60.GLenum
  GL_MALI_PROGRAM_BINARY_ARM* = 0x8F61.GLenum
  GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT* = 0x8F63.GLenum
  GL_SHADER_PIXEL_LOCAL_STORAGE_EXT* = 0x8F64.GLenum
  GL_FETCH_PER_SAMPLE_ARM* = 0x8F65.GLenum
  GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM* = 0x8F66.GLenum
  GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT* = 0x8F67.GLenum
  GL_TEXTURE_ASTC_DECODE_PRECISION_EXT* = 0x8F69.GLenum
  GL_RED_SNORM* = 0x8F90.GLenum
  GL_RG_SNORM* = 0x8F91.GLenum
  GL_RGB_SNORM* = 0x8F92.GLenum
  GL_RGBA_SNORM* = 0x8F93.GLenum
  GL_R8_SNORM* = 0x8F94.GLenum
  GL_RG8_SNORM* = 0x8F95.GLenum
  GL_RGB8_SNORM* = 0x8F96.GLenum
  GL_RGBA8_SNORM* = 0x8F97.GLenum
  GL_R16_SNORM* = 0x8F98.GLenum
  GL_R16_SNORM_EXT* = 0x8F98.GLenum
  GL_RG16_SNORM* = 0x8F99.GLenum
  GL_RG16_SNORM_EXT* = 0x8F99.GLenum
  GL_RGB16_SNORM* = 0x8F9A.GLenum
  GL_RGB16_SNORM_EXT* = 0x8F9A.GLenum
  GL_RGBA16_SNORM* = 0x8F9B.GLenum
  GL_RGBA16_SNORM_EXT* = 0x8F9B.GLenum
  GL_SIGNED_NORMALIZED* = 0x8F9C.GLenum
  GL_PRIMITIVE_RESTART* = 0x8F9D.GLenum
  GL_PRIMITIVE_RESTART_INDEX* = 0x8F9E.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB* = 0x8F9F.GLenum
  GL_PERFMON_GLOBAL_MODE_QCOM* = 0x8FA0.GLenum
  GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM* = 0x8FA1.GLenum
  GL_BINNING_CONTROL_HINT_QCOM* = 0x8FB0.GLenum
  GL_CPU_OPTIMIZED_QCOM* = 0x8FB1.GLenum
  GL_GPU_OPTIMIZED_QCOM* = 0x8FB2.GLenum
  GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM* = 0x8FB3.GLenum
  GL_GPU_DISJOINT_EXT* = 0x8FBB.GLenum
  GL_SR8_EXT* = 0x8FBD.GLenum
  GL_SRG8_EXT* = 0x8FBE.GLenum
  GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT* = 0x8FBF.GLenum
  GL_SHADER_BINARY_VIV* = 0x8FC4.GLenum
  GL_INT8_NV* = 0x8FE0.GLenum
  GL_INT8_VEC2_NV* = 0x8FE1.GLenum
  GL_INT8_VEC3_NV* = 0x8FE2.GLenum
  GL_INT8_VEC4_NV* = 0x8FE3.GLenum
  GL_INT16_NV* = 0x8FE4.GLenum
  GL_INT16_VEC2_NV* = 0x8FE5.GLenum
  GL_INT16_VEC3_NV* = 0x8FE6.GLenum
  GL_INT16_VEC4_NV* = 0x8FE7.GLenum
  GL_INT64_VEC2_ARB* = 0x8FE9.GLenum
  GL_INT64_VEC2_NV* = 0x8FE9.GLenum
  GL_INT64_VEC3_ARB* = 0x8FEA.GLenum
  GL_INT64_VEC3_NV* = 0x8FEA.GLenum
  GL_INT64_VEC4_ARB* = 0x8FEB.GLenum
  GL_INT64_VEC4_NV* = 0x8FEB.GLenum
  GL_UNSIGNED_INT8_NV* = 0x8FEC.GLenum
  GL_UNSIGNED_INT8_VEC2_NV* = 0x8FED.GLenum
  GL_UNSIGNED_INT8_VEC3_NV* = 0x8FEE.GLenum
  GL_UNSIGNED_INT8_VEC4_NV* = 0x8FEF.GLenum
  GL_UNSIGNED_INT16_NV* = 0x8FF0.GLenum
  GL_UNSIGNED_INT16_VEC2_NV* = 0x8FF1.GLenum
  GL_UNSIGNED_INT16_VEC3_NV* = 0x8FF2.GLenum
  GL_UNSIGNED_INT16_VEC4_NV* = 0x8FF3.GLenum
  GL_UNSIGNED_INT64_VEC2_ARB* = 0x8FF5.GLenum
  GL_UNSIGNED_INT64_VEC2_NV* = 0x8FF5.GLenum
  GL_UNSIGNED_INT64_VEC3_ARB* = 0x8FF6.GLenum
  GL_UNSIGNED_INT64_VEC3_NV* = 0x8FF6.GLenum
  GL_UNSIGNED_INT64_VEC4_ARB* = 0x8FF7.GLenum
  GL_UNSIGNED_INT64_VEC4_NV* = 0x8FF7.GLenum
  GL_FLOAT16_NV* = 0x8FF8.GLenum
  GL_FLOAT16_VEC2_NV* = 0x8FF9.GLenum
  GL_FLOAT16_VEC3_NV* = 0x8FFA.GLenum
  GL_FLOAT16_VEC4_NV* = 0x8FFB.GLenum
  GL_DOUBLE_VEC2* = 0x8FFC.GLenum
  GL_DOUBLE_VEC2_EXT* = 0x8FFC.GLenum
  GL_DOUBLE_VEC3* = 0x8FFD.GLenum
  GL_DOUBLE_VEC3_EXT* = 0x8FFD.GLenum
  GL_DOUBLE_VEC4* = 0x8FFE.GLenum
  GL_DOUBLE_VEC4_EXT* = 0x8FFE.GLenum
  GL_SAMPLER_BUFFER_AMD* = 0x9001.GLenum
  GL_INT_SAMPLER_BUFFER_AMD* = 0x9002.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD* = 0x9003.GLenum
  GL_TESSELLATION_MODE_AMD* = 0x9004.GLenum
  GL_TESSELLATION_FACTOR_AMD* = 0x9005.GLenum
  GL_DISCRETE_AMD* = 0x9006.GLenum
  GL_CONTINUOUS_AMD* = 0x9007.GLenum
  GL_TEXTURE_CUBE_MAP_ARRAY* = 0x9009.GLenum
  GL_TEXTURE_CUBE_MAP_ARRAY_ARB* = 0x9009.GLenum
  GL_TEXTURE_CUBE_MAP_ARRAY_EXT* = 0x9009.GLenum
  GL_TEXTURE_CUBE_MAP_ARRAY_OES* = 0x9009.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY* = 0x900A.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB* = 0x900A.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT* = 0x900A.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES* = 0x900A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY* = 0x900B.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB* = 0x900B.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY* = 0x900C.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_ARB* = 0x900C.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_EXT* = 0x900C.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_OES* = 0x900C.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW* = 0x900D.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB* = 0x900D.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT* = 0x900D.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES* = 0x900D.GLenum
  GL_INT_SAMPLER_CUBE_MAP_ARRAY* = 0x900E.GLenum
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB* = 0x900E.GLenum
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT* = 0x900E.GLenum
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES* = 0x900E.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY* = 0x900F.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB* = 0x900F.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT* = 0x900F.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES* = 0x900F.GLenum
  GL_ALPHA_SNORM* = 0x9010.GLenum
  GL_LUMINANCE_SNORM* = 0x9011.GLenum
  GL_LUMINANCE_ALPHA_SNORM* = 0x9012.GLenum
  GL_INTENSITY_SNORM* = 0x9013.GLenum
  GL_ALPHA8_SNORM* = 0x9014.GLenum
  GL_LUMINANCE8_SNORM* = 0x9015.GLenum
  GL_LUMINANCE8_ALPHA8_SNORM* = 0x9016.GLenum
  GL_INTENSITY8_SNORM* = 0x9017.GLenum
  GL_ALPHA16_SNORM* = 0x9018.GLenum
  GL_LUMINANCE16_SNORM* = 0x9019.GLenum
  GL_LUMINANCE16_ALPHA16_SNORM* = 0x901A.GLenum
  GL_INTENSITY16_SNORM* = 0x901B.GLenum
  GL_FACTOR_MIN_AMD* = 0x901C.GLenum
  GL_FACTOR_MAX_AMD* = 0x901D.GLenum
  GL_DEPTH_CLAMP_NEAR_AMD* = 0x901E.GLenum
  GL_DEPTH_CLAMP_FAR_AMD* = 0x901F.GLenum
  GL_VIDEO_BUFFER_NV* = 0x9020.GLenum
  GL_VIDEO_BUFFER_BINDING_NV* = 0x9021.GLenum
  GL_FIELD_UPPER_NV* = 0x9022.GLenum
  GL_FIELD_LOWER_NV* = 0x9023.GLenum
  GL_NUM_VIDEO_CAPTURE_STREAMS_NV* = 0x9024.GLenum
  GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV* = 0x9025.GLenum
  GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV* = 0x9026.GLenum
  GL_LAST_VIDEO_CAPTURE_STATUS_NV* = 0x9027.GLenum
  GL_VIDEO_BUFFER_PITCH_NV* = 0x9028.GLenum
  GL_VIDEO_COLOR_CONVERSION_MATRIX_NV* = 0x9029.GLenum
  GL_VIDEO_COLOR_CONVERSION_MAX_NV* = 0x902A.GLenum
  GL_VIDEO_COLOR_CONVERSION_MIN_NV* = 0x902B.GLenum
  GL_VIDEO_COLOR_CONVERSION_OFFSET_NV* = 0x902C.GLenum
  GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV* = 0x902D.GLenum
  GL_PARTIAL_SUCCESS_NV* = 0x902E.GLenum
  GL_SUCCESS_NV* = 0x902F.GLenum
  GL_FAILURE_NV* = 0x9030.GLenum
  GL_YCBYCR8_422_NV* = 0x9031.GLenum
  GL_YCBAYCR8A_4224_NV* = 0x9032.GLenum
  GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV* = 0x9033.GLenum
  GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV* = 0x9034.GLenum
  GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV* = 0x9035.GLenum
  GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV* = 0x9036.GLenum
  GL_Z4Y12Z4CB12Z4CR12_444_NV* = 0x9037.GLenum
  GL_VIDEO_CAPTURE_FRAME_WIDTH_NV* = 0x9038.GLenum
  GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV* = 0x9039.GLenum
  GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV* = 0x903A.GLenum
  GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV* = 0x903B.GLenum
  GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV* = 0x903C.GLenum
  GL_TEXTURE_COVERAGE_SAMPLES_NV* = 0x9045.GLenum
  GL_TEXTURE_COLOR_SAMPLES_NV* = 0x9046.GLenum
  GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX* = 0x9047.GLenum
  GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX* = 0x9048.GLenum
  GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX* = 0x9049.GLenum
  GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX* = 0x904A.GLenum
  GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX* = 0x904B.GLenum
  GL_IMAGE_1D* = 0x904C.GLenum
  GL_IMAGE_1D_EXT* = 0x904C.GLenum
  GL_IMAGE_2D* = 0x904D.GLenum
  GL_IMAGE_2D_EXT* = 0x904D.GLenum
  GL_IMAGE_3D* = 0x904E.GLenum
  GL_IMAGE_3D_EXT* = 0x904E.GLenum
  GL_IMAGE_2D_RECT* = 0x904F.GLenum
  GL_IMAGE_2D_RECT_EXT* = 0x904F.GLenum
  GL_IMAGE_CUBE* = 0x9050.GLenum
  GL_IMAGE_CUBE_EXT* = 0x9050.GLenum
  GL_IMAGE_BUFFER* = 0x9051.GLenum
  GL_IMAGE_BUFFER_EXT* = 0x9051.GLenum
  GL_IMAGE_BUFFER_OES* = 0x9051.GLenum
  GL_IMAGE_1D_ARRAY* = 0x9052.GLenum
  GL_IMAGE_1D_ARRAY_EXT* = 0x9052.GLenum
  GL_IMAGE_2D_ARRAY* = 0x9053.GLenum
  GL_IMAGE_2D_ARRAY_EXT* = 0x9053.GLenum
  GL_IMAGE_CUBE_MAP_ARRAY* = 0x9054.GLenum
  GL_IMAGE_CUBE_MAP_ARRAY_EXT* = 0x9054.GLenum
  GL_IMAGE_CUBE_MAP_ARRAY_OES* = 0x9054.GLenum
  GL_IMAGE_2D_MULTISAMPLE* = 0x9055.GLenum
  GL_IMAGE_2D_MULTISAMPLE_EXT* = 0x9055.GLenum
  GL_IMAGE_2D_MULTISAMPLE_ARRAY* = 0x9056.GLenum
  GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT* = 0x9056.GLenum
  GL_INT_IMAGE_1D* = 0x9057.GLenum
  GL_INT_IMAGE_1D_EXT* = 0x9057.GLenum
  GL_INT_IMAGE_2D* = 0x9058.GLenum
  GL_INT_IMAGE_2D_EXT* = 0x9058.GLenum
  GL_INT_IMAGE_3D* = 0x9059.GLenum
  GL_INT_IMAGE_3D_EXT* = 0x9059.GLenum
  GL_INT_IMAGE_2D_RECT* = 0x905A.GLenum
  GL_INT_IMAGE_2D_RECT_EXT* = 0x905A.GLenum
  GL_INT_IMAGE_CUBE* = 0x905B.GLenum
  GL_INT_IMAGE_CUBE_EXT* = 0x905B.GLenum
  GL_INT_IMAGE_BUFFER* = 0x905C.GLenum
  GL_INT_IMAGE_BUFFER_EXT* = 0x905C.GLenum
  GL_INT_IMAGE_BUFFER_OES* = 0x905C.GLenum
  GL_INT_IMAGE_1D_ARRAY* = 0x905D.GLenum
  GL_INT_IMAGE_1D_ARRAY_EXT* = 0x905D.GLenum
  GL_INT_IMAGE_2D_ARRAY* = 0x905E.GLenum
  GL_INT_IMAGE_2D_ARRAY_EXT* = 0x905E.GLenum
  GL_INT_IMAGE_CUBE_MAP_ARRAY* = 0x905F.GLenum
  GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT* = 0x905F.GLenum
  GL_INT_IMAGE_CUBE_MAP_ARRAY_OES* = 0x905F.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE* = 0x9060.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE_EXT* = 0x9060.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY* = 0x9061.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT* = 0x9061.GLenum
  GL_UNSIGNED_INT_IMAGE_1D* = 0x9062.GLenum
  GL_UNSIGNED_INT_IMAGE_1D_EXT* = 0x9062.GLenum
  GL_UNSIGNED_INT_IMAGE_2D* = 0x9063.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_EXT* = 0x9063.GLenum
  GL_UNSIGNED_INT_IMAGE_3D* = 0x9064.GLenum
  GL_UNSIGNED_INT_IMAGE_3D_EXT* = 0x9064.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_RECT* = 0x9065.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT* = 0x9065.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE* = 0x9066.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE_EXT* = 0x9066.GLenum
  GL_UNSIGNED_INT_IMAGE_BUFFER* = 0x9067.GLenum
  GL_UNSIGNED_INT_IMAGE_BUFFER_EXT* = 0x9067.GLenum
  GL_UNSIGNED_INT_IMAGE_BUFFER_OES* = 0x9067.GLenum
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY* = 0x9068.GLenum
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT* = 0x9068.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY* = 0x9069.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT* = 0x9069.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY* = 0x906A.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT* = 0x906A.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES* = 0x906A.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE* = 0x906B.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT* = 0x906B.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY* = 0x906C.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT* = 0x906C.GLenum
  GL_MAX_IMAGE_SAMPLES* = 0x906D.GLenum
  GL_MAX_IMAGE_SAMPLES_EXT* = 0x906D.GLenum
  GL_IMAGE_BINDING_FORMAT* = 0x906E.GLenum
  GL_IMAGE_BINDING_FORMAT_EXT* = 0x906E.GLenum
  GL_RGB10_A2UI* = 0x906F.GLenum
  GL_PATH_FORMAT_SVG_NV* = 0x9070.GLenum
  GL_PATH_FORMAT_PS_NV* = 0x9071.GLenum
  GL_STANDARD_FONT_NAME_NV* = 0x9072.GLenum
  GL_SYSTEM_FONT_NAME_NV* = 0x9073.GLenum
  GL_FILE_NAME_NV* = 0x9074.GLenum
  GL_PATH_STROKE_WIDTH_NV* = 0x9075.GLenum
  GL_PATH_END_CAPS_NV* = 0x9076.GLenum
  GL_PATH_INITIAL_END_CAP_NV* = 0x9077.GLenum
  GL_PATH_TERMINAL_END_CAP_NV* = 0x9078.GLenum
  GL_PATH_JOIN_STYLE_NV* = 0x9079.GLenum
  GL_PATH_MITER_LIMIT_NV* = 0x907A.GLenum
  GL_PATH_DASH_CAPS_NV* = 0x907B.GLenum
  GL_PATH_INITIAL_DASH_CAP_NV* = 0x907C.GLenum
  GL_PATH_TERMINAL_DASH_CAP_NV* = 0x907D.GLenum
  GL_PATH_DASH_OFFSET_NV* = 0x907E.GLenum
  GL_PATH_CLIENT_LENGTH_NV* = 0x907F.GLenum
  GL_PATH_FILL_MODE_NV* = 0x9080.GLenum
  GL_PATH_FILL_MASK_NV* = 0x9081.GLenum
  GL_PATH_FILL_COVER_MODE_NV* = 0x9082.GLenum
  GL_PATH_STROKE_COVER_MODE_NV* = 0x9083.GLenum
  GL_PATH_STROKE_MASK_NV* = 0x9084.GLenum
  GL_COUNT_UP_NV* = 0x9088.GLenum
  GL_COUNT_DOWN_NV* = 0x9089.GLenum
  GL_PATH_OBJECT_BOUNDING_BOX_NV* = 0x908A.GLenum
  GL_CONVEX_HULL_NV* = 0x908B.GLenum
  GL_BOUNDING_BOX_NV* = 0x908D.GLenum
  GL_TRANSLATE_X_NV* = 0x908E.GLenum
  GL_TRANSLATE_Y_NV* = 0x908F.GLenum
  GL_TRANSLATE_2D_NV* = 0x9090.GLenum
  GL_TRANSLATE_3D_NV* = 0x9091.GLenum
  GL_AFFINE_2D_NV* = 0x9092.GLenum
  GL_AFFINE_3D_NV* = 0x9094.GLenum
  GL_TRANSPOSE_AFFINE_2D_NV* = 0x9096.GLenum
  GL_TRANSPOSE_AFFINE_3D_NV* = 0x9098.GLenum
  GL_UTF8_NV* = 0x909A.GLenum
  GL_UTF16_NV* = 0x909B.GLenum
  GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV* = 0x909C.GLenum
  GL_PATH_COMMAND_COUNT_NV* = 0x909D.GLenum
  GL_PATH_COORD_COUNT_NV* = 0x909E.GLenum
  GL_PATH_DASH_ARRAY_COUNT_NV* = 0x909F.GLenum
  GL_PATH_COMPUTED_LENGTH_NV* = 0x90A0.GLenum
  GL_PATH_FILL_BOUNDING_BOX_NV* = 0x90A1.GLenum
  GL_PATH_STROKE_BOUNDING_BOX_NV* = 0x90A2.GLenum
  GL_SQUARE_NV* = 0x90A3.GLenum
  GL_ROUND_NV* = 0x90A4.GLenum
  GL_TRIANGULAR_NV* = 0x90A5.GLenum
  GL_BEVEL_NV* = 0x90A6.GLenum
  GL_MITER_REVERT_NV* = 0x90A7.GLenum
  GL_MITER_TRUNCATE_NV* = 0x90A8.GLenum
  GL_SKIP_MISSING_GLYPH_NV* = 0x90A9.GLenum
  GL_USE_MISSING_GLYPH_NV* = 0x90AA.GLenum
  GL_PATH_ERROR_POSITION_NV* = 0x90AB.GLenum
  GL_PATH_FOG_GEN_MODE_NV* = 0x90AC.GLenum
  GL_ACCUM_ADJACENT_PAIRS_NV* = 0x90AD.GLenum
  GL_ADJACENT_PAIRS_NV* = 0x90AE.GLenum
  GL_FIRST_TO_REST_NV* = 0x90AF.GLenum
  GL_PATH_GEN_MODE_NV* = 0x90B0.GLenum
  GL_PATH_GEN_COEFF_NV* = 0x90B1.GLenum
  GL_PATH_GEN_COLOR_FORMAT_NV* = 0x90B2.GLenum
  GL_PATH_GEN_COMPONENTS_NV* = 0x90B3.GLenum
  GL_PATH_DASH_OFFSET_RESET_NV* = 0x90B4.GLenum
  GL_MOVE_TO_RESETS_NV* = 0x90B5.GLenum
  GL_MOVE_TO_CONTINUES_NV* = 0x90B6.GLenum
  GL_PATH_STENCIL_FUNC_NV* = 0x90B7.GLenum
  GL_PATH_STENCIL_REF_NV* = 0x90B8.GLenum
  GL_PATH_STENCIL_VALUE_MASK_NV* = 0x90B9.GLenum
  GL_SCALED_RESOLVE_FASTEST_EXT* = 0x90BA.GLenum
  GL_SCALED_RESOLVE_NICEST_EXT* = 0x90BB.GLenum
  GL_MIN_MAP_BUFFER_ALIGNMENT* = 0x90BC.GLenum
  GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV* = 0x90BD.GLenum
  GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV* = 0x90BE.GLenum
  GL_PATH_COVER_DEPTH_FUNC_NV* = 0x90BF.GLenum
  GL_IMAGE_FORMAT_COMPATIBILITY_TYPE* = 0x90C7.GLenum
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE* = 0x90C8.GLenum
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS* = 0x90C9.GLenum
  GL_MAX_VERTEX_IMAGE_UNIFORMS* = 0x90CA.GLenum
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS* = 0x90CB.GLenum
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT* = 0x90CB.GLenum
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES* = 0x90CB.GLenum
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS* = 0x90CC.GLenum
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT* = 0x90CC.GLenum
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES* = 0x90CC.GLenum
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS* = 0x90CD.GLenum
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT* = 0x90CD.GLenum
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES* = 0x90CD.GLenum
  GL_MAX_FRAGMENT_IMAGE_UNIFORMS* = 0x90CE.GLenum
  GL_MAX_COMBINED_IMAGE_UNIFORMS* = 0x90CF.GLenum
  GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV* = 0x90D0.GLenum
  GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV* = 0x90D1.GLenum
  GL_SHADER_STORAGE_BUFFER* = 0x90D2.GLenum
  GL_SHADER_STORAGE_BUFFER_BINDING* = 0x90D3.GLenum
  GL_SHADER_STORAGE_BUFFER_START* = 0x90D4.GLenum
  GL_SHADER_STORAGE_BUFFER_SIZE* = 0x90D5.GLenum
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS* = 0x90D6.GLenum
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS* = 0x90D7.GLenum
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT* = 0x90D7.GLenum
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES* = 0x90D7.GLenum
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS* = 0x90D8.GLenum
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT* = 0x90D8.GLenum
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES* = 0x90D8.GLenum
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS* = 0x90D9.GLenum
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT* = 0x90D9.GLenum
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES* = 0x90D9.GLenum
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS* = 0x90DA.GLenum
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS* = 0x90DB.GLenum
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS* = 0x90DC.GLenum
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS* = 0x90DD.GLenum
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE* = 0x90DE.GLenum
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT* = 0x90DF.GLenum
  GL_SYNC_X11_FENCE_EXT* = 0x90E1.GLenum
  GL_DEPTH_STENCIL_TEXTURE_MODE* = 0x90EA.GLenum
  GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS* = 0x90EB.GLenum
  GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB* = 0x90EB.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER* = 0x90EC.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER* = 0x90ED.GLenum
  GL_DISPATCH_INDIRECT_BUFFER* = 0x90EE.GLenum
  GL_DISPATCH_INDIRECT_BUFFER_BINDING* = 0x90EF.GLenum
  GL_COLOR_ATTACHMENT_EXT* = 0x90F0.GLenum
  GL_MULTIVIEW_EXT* = 0x90F1.GLenum
  GL_MAX_MULTIVIEW_BUFFERS_EXT* = 0x90F2.GLenum
  GL_CONTEXT_ROBUST_ACCESS* = 0x90F3.GLenum
  GL_CONTEXT_ROBUST_ACCESS_EXT* = 0x90F3.GLenum
  GL_CONTEXT_ROBUST_ACCESS_KHR* = 0x90F3.GLenum
  GL_COMPUTE_PROGRAM_NV* = 0x90FB.GLenum
  GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV* = 0x90FC.GLenum
  GL_TEXTURE_2D_MULTISAMPLE* = 0x9100.GLenum
  GL_PROXY_TEXTURE_2D_MULTISAMPLE* = 0x9101.GLenum
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY* = 0x9102.GLenum
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES* = 0x9102.GLenum
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY* = 0x9103.GLenum
  GL_TEXTURE_BINDING_2D_MULTISAMPLE* = 0x9104.GLenum
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY* = 0x9105.GLenum
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES* = 0x9105.GLenum
  GL_TEXTURE_SAMPLES* = 0x9106.GLenum
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS* = 0x9107.GLenum
  GL_SAMPLER_2D_MULTISAMPLE* = 0x9108.GLenum
  GL_INT_SAMPLER_2D_MULTISAMPLE* = 0x9109.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE* = 0x910A.GLenum
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910B.GLenum
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES* = 0x910B.GLenum
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910C.GLenum
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES* = 0x910C.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910D.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES* = 0x910D.GLenum
  GL_MAX_COLOR_TEXTURE_SAMPLES* = 0x910E.GLenum
  GL_MAX_DEPTH_TEXTURE_SAMPLES* = 0x910F.GLenum
  GL_MAX_INTEGER_SAMPLES* = 0x9110.GLenum
  GL_MAX_SERVER_WAIT_TIMEOUT* = 0x9111.GLenum
  GL_MAX_SERVER_WAIT_TIMEOUT_APPLE* = 0x9111.GLenum
  GL_OBJECT_TYPE* = 0x9112.GLenum
  GL_OBJECT_TYPE_APPLE* = 0x9112.GLenum
  GL_SYNC_CONDITION* = 0x9113.GLenum
  GL_SYNC_CONDITION_APPLE* = 0x9113.GLenum
  GL_SYNC_STATUS* = 0x9114.GLenum
  GL_SYNC_STATUS_APPLE* = 0x9114.GLenum
  GL_SYNC_FLAGS* = 0x9115.GLenum
  GL_SYNC_FLAGS_APPLE* = 0x9115.GLenum
  GL_SYNC_FENCE* = 0x9116.GLenum
  GL_SYNC_FENCE_APPLE* = 0x9116.GLenum
  GL_SYNC_GPU_COMMANDS_COMPLETE* = 0x9117.GLenum
  GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE* = 0x9117.GLenum
  GL_UNSIGNALED* = 0x9118.GLenum
  GL_UNSIGNALED_APPLE* = 0x9118.GLenum
  GL_SIGNALED* = 0x9119.GLenum
  GL_SIGNALED_APPLE* = 0x9119.GLenum
  GL_ALREADY_SIGNALED* = 0x911A.GLenum
  GL_ALREADY_SIGNALED_APPLE* = 0x911A.GLenum
  GL_TIMEOUT_EXPIRED* = 0x911B.GLenum
  GL_TIMEOUT_EXPIRED_APPLE* = 0x911B.GLenum
  GL_CONDITION_SATISFIED* = 0x911C.GLenum
  GL_CONDITION_SATISFIED_APPLE* = 0x911C.GLenum
  GL_WAIT_FAILED* = 0x911D.GLenum
  GL_WAIT_FAILED_APPLE* = 0x911D.GLenum
  GL_BUFFER_ACCESS_FLAGS* = 0x911F.GLenum
  GL_BUFFER_MAP_LENGTH* = 0x9120.GLenum
  GL_BUFFER_MAP_OFFSET* = 0x9121.GLenum
  GL_MAX_VERTEX_OUTPUT_COMPONENTS* = 0x9122.GLenum
  GL_MAX_GEOMETRY_INPUT_COMPONENTS* = 0x9123.GLenum
  GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT* = 0x9123.GLenum
  GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES* = 0x9123.GLenum
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS* = 0x9124.GLenum
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT* = 0x9124.GLenum
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES* = 0x9124.GLenum
  GL_MAX_FRAGMENT_INPUT_COMPONENTS* = 0x9125.GLenum
  GL_CONTEXT_PROFILE_MASK* = 0x9126.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_WIDTH* = 0x9127.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_HEIGHT* = 0x9128.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_DEPTH* = 0x9129.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_SIZE* = 0x912A.GLenum
  GL_PACK_COMPRESSED_BLOCK_WIDTH* = 0x912B.GLenum
  GL_PACK_COMPRESSED_BLOCK_HEIGHT* = 0x912C.GLenum
  GL_PACK_COMPRESSED_BLOCK_DEPTH* = 0x912D.GLenum
  GL_PACK_COMPRESSED_BLOCK_SIZE* = 0x912E.GLenum
  GL_TEXTURE_IMMUTABLE_FORMAT* = 0x912F.GLenum
  GL_TEXTURE_IMMUTABLE_FORMAT_EXT* = 0x912F.GLenum
  GL_SGX_PROGRAM_BINARY_IMG* = 0x9130.GLenum
  GL_RENDERBUFFER_SAMPLES_IMG* = 0x9133.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG* = 0x9134.GLenum
  GL_MAX_SAMPLES_IMG* = 0x9135.GLenum
  GL_TEXTURE_SAMPLES_IMG* = 0x9136.GLenum
  GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG* = 0x9137.GLenum
  GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG* = 0x9138.GLenum
  GL_CUBIC_IMG* = 0x9139.GLenum
  GL_CUBIC_MIPMAP_NEAREST_IMG* = 0x913A.GLenum
  GL_CUBIC_MIPMAP_LINEAR_IMG* = 0x913B.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG* = 0x913C.GLenum
  GL_NUM_DOWNSAMPLE_SCALES_IMG* = 0x913D.GLenum
  GL_DOWNSAMPLE_SCALES_IMG* = 0x913E.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG* = 0x913F.GLenum
  GL_MAX_DEBUG_MESSAGE_LENGTH* = 0x9143.GLenum
  GL_MAX_DEBUG_MESSAGE_LENGTH_AMD* = 0x9143.GLenum
  GL_MAX_DEBUG_MESSAGE_LENGTH_ARB* = 0x9143.GLenum
  GL_MAX_DEBUG_MESSAGE_LENGTH_KHR* = 0x9143.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES* = 0x9144.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES_AMD* = 0x9144.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES_ARB* = 0x9144.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES_KHR* = 0x9144.GLenum
  GL_DEBUG_LOGGED_MESSAGES* = 0x9145.GLenum
  GL_DEBUG_LOGGED_MESSAGES_AMD* = 0x9145.GLenum
  GL_DEBUG_LOGGED_MESSAGES_ARB* = 0x9145.GLenum
  GL_DEBUG_LOGGED_MESSAGES_KHR* = 0x9145.GLenum
  GL_DEBUG_SEVERITY_HIGH* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_HIGH_AMD* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_HIGH_ARB* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_HIGH_KHR* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_MEDIUM* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_MEDIUM_AMD* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_MEDIUM_ARB* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_MEDIUM_KHR* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_LOW* = 0x9148.GLenum
  GL_DEBUG_SEVERITY_LOW_AMD* = 0x9148.GLenum
  GL_DEBUG_SEVERITY_LOW_ARB* = 0x9148.GLenum
  GL_DEBUG_SEVERITY_LOW_KHR* = 0x9148.GLenum
  GL_DEBUG_CATEGORY_API_ERROR_AMD* = 0x9149.GLenum
  GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD* = 0x914A.GLenum
  GL_DEBUG_CATEGORY_DEPRECATION_AMD* = 0x914B.GLenum
  GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD* = 0x914C.GLenum
  GL_DEBUG_CATEGORY_PERFORMANCE_AMD* = 0x914D.GLenum
  GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD* = 0x914E.GLenum
  GL_DEBUG_CATEGORY_APPLICATION_AMD* = 0x914F.GLenum
  GL_DEBUG_CATEGORY_OTHER_AMD* = 0x9150.GLenum
  GL_BUFFER_OBJECT_EXT* = 0x9151.GLenum
  GL_DATA_BUFFER_AMD* = 0x9151.GLenum
  GL_PERFORMANCE_MONITOR_AMD* = 0x9152.GLenum
  GL_QUERY_OBJECT_AMD* = 0x9153.GLenum
  GL_QUERY_OBJECT_EXT* = 0x9153.GLenum
  GL_VERTEX_ARRAY_OBJECT_AMD* = 0x9154.GLenum
  GL_VERTEX_ARRAY_OBJECT_EXT* = 0x9154.GLenum
  GL_SAMPLER_OBJECT_AMD* = 0x9155.GLenum
  GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD* = 0x9160.GLenum
  GL_QUERY_BUFFER* = 0x9192.GLenum
  GL_QUERY_BUFFER_AMD* = 0x9192.GLenum
  GL_QUERY_BUFFER_BINDING* = 0x9193.GLenum
  GL_QUERY_BUFFER_BINDING_AMD* = 0x9193.GLenum
  GL_QUERY_RESULT_NO_WAIT* = 0x9194.GLenum
  GL_QUERY_RESULT_NO_WAIT_AMD* = 0x9194.GLenum
  GL_VIRTUAL_PAGE_SIZE_X_ARB* = 0x9195.GLenum
  GL_VIRTUAL_PAGE_SIZE_X_EXT* = 0x9195.GLenum
  GL_VIRTUAL_PAGE_SIZE_X_AMD* = 0x9195.GLenum
  GL_VIRTUAL_PAGE_SIZE_Y_ARB* = 0x9196.GLenum
  GL_VIRTUAL_PAGE_SIZE_Y_EXT* = 0x9196.GLenum
  GL_VIRTUAL_PAGE_SIZE_Y_AMD* = 0x9196.GLenum
  GL_VIRTUAL_PAGE_SIZE_Z_ARB* = 0x9197.GLenum
  GL_VIRTUAL_PAGE_SIZE_Z_EXT* = 0x9197.GLenum
  GL_VIRTUAL_PAGE_SIZE_Z_AMD* = 0x9197.GLenum
  GL_MAX_SPARSE_TEXTURE_SIZE_ARB* = 0x9198.GLenum
  GL_MAX_SPARSE_TEXTURE_SIZE_EXT* = 0x9198.GLenum
  GL_MAX_SPARSE_TEXTURE_SIZE_AMD* = 0x9198.GLenum
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB* = 0x9199.GLenum
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT* = 0x9199.GLenum
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD* = 0x9199.GLenum
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS* = 0x919A.GLenum
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB* = 0x919A.GLenum
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT* = 0x919A.GLenum
  GL_MIN_SPARSE_LEVEL_AMD* = 0x919B.GLenum
  GL_MIN_LOD_WARNING_AMD* = 0x919C.GLenum
  GL_TEXTURE_BUFFER_OFFSET* = 0x919D.GLenum
  GL_TEXTURE_BUFFER_OFFSET_EXT* = 0x919D.GLenum
  GL_TEXTURE_BUFFER_OFFSET_OES* = 0x919D.GLenum
  GL_TEXTURE_BUFFER_SIZE* = 0x919E.GLenum
  GL_TEXTURE_BUFFER_SIZE_EXT* = 0x919E.GLenum
  GL_TEXTURE_BUFFER_SIZE_OES* = 0x919E.GLenum
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT* = 0x919F.GLenum
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT* = 0x919F.GLenum
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES* = 0x919F.GLenum
  GL_STREAM_RASTERIZATION_AMD* = 0x91A0.GLenum
  GL_VERTEX_ELEMENT_SWIZZLE_AMD* = 0x91A4.GLenum
  GL_VERTEX_ID_SWIZZLE_AMD* = 0x91A5.GLenum
  GL_TEXTURE_SPARSE_ARB* = 0x91A6.GLenum
  GL_TEXTURE_SPARSE_EXT* = 0x91A6.GLenum
  GL_VIRTUAL_PAGE_SIZE_INDEX_ARB* = 0x91A7.GLenum
  GL_VIRTUAL_PAGE_SIZE_INDEX_EXT* = 0x91A7.GLenum
  GL_NUM_VIRTUAL_PAGE_SIZES_ARB* = 0x91A8.GLenum
  GL_NUM_VIRTUAL_PAGE_SIZES_EXT* = 0x91A8.GLenum
  GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB* = 0x91A9.GLenum
  GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT* = 0x91A9.GLenum
  GL_NUM_SPARSE_LEVELS_ARB* = 0x91AA.GLenum
  GL_NUM_SPARSE_LEVELS_EXT* = 0x91AA.GLenum
  GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD* = 0x91AE.GLenum
  GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD* = 0x91AF.GLenum
  GL_MAX_SHADER_COMPILER_THREADS_KHR* = 0x91B0.GLenum
  GL_MAX_SHADER_COMPILER_THREADS_ARB* = 0x91B0.GLenum
  GL_COMPLETION_STATUS_KHR* = 0x91B1.GLenum
  GL_COMPLETION_STATUS_ARB* = 0x91B1.GLenum
  GL_RENDERBUFFER_STORAGE_SAMPLES_AMD* = 0x91B2.GLenum
  GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD* = 0x91B3.GLenum
  GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD* = 0x91B4.GLenum
  GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD* = 0x91B5.GLenum
  GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD* = 0x91B6.GLenum
  GL_SUPPORTED_MULTISAMPLE_MODES_AMD* = 0x91B7.GLenum
  GL_COMPUTE_SHADER* = 0x91B9.GLenum
  GL_MAX_COMPUTE_UNIFORM_BLOCKS* = 0x91BB.GLenum
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS* = 0x91BC.GLenum
  GL_MAX_COMPUTE_IMAGE_UNIFORMS* = 0x91BD.GLenum
  GL_MAX_COMPUTE_WORK_GROUP_COUNT* = 0x91BE.GLenum
  GL_MAX_COMPUTE_WORK_GROUP_SIZE* = 0x91BF.GLenum
  GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB* = 0x91BF.GLenum
  GL_FLOAT16_MAT2_AMD* = 0x91C5.GLenum
  GL_FLOAT16_MAT3_AMD* = 0x91C6.GLenum
  GL_FLOAT16_MAT4_AMD* = 0x91C7.GLenum
  GL_FLOAT16_MAT2x3_AMD* = 0x91C8.GLenum
  GL_FLOAT16_MAT2x4_AMD* = 0x91C9.GLenum
  GL_FLOAT16_MAT3x2_AMD* = 0x91CA.GLenum
  GL_FLOAT16_MAT3x4_AMD* = 0x91CB.GLenum
  GL_FLOAT16_MAT4x2_AMD* = 0x91CC.GLenum
  GL_FLOAT16_MAT4x3_AMD* = 0x91CD.GLenum
  GL_UNPACK_FLIP_Y_WEBGL* = 0x9240.GLenum
  GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL* = 0x9241.GLenum
  GL_CONTEXT_LOST_WEBGL* = 0x9242.GLenum
  GL_UNPACK_COLORSPACE_CONVERSION_WEBGL* = 0x9243.GLenum
  GL_BROWSER_DEFAULT_WEBGL* = 0x9244.GLenum
  GL_SHADER_BINARY_DMP* = 0x9250.GLenum
  GL_SMAPHS30_PROGRAM_BINARY_DMP* = 0x9251.GLenum
  GL_SMAPHS_PROGRAM_BINARY_DMP* = 0x9252.GLenum
  GL_DMP_PROGRAM_BINARY_DMP* = 0x9253.GLenum
  GL_GCCSO_SHADER_BINARY_FJ* = 0x9260.GLenum
  GL_COMPRESSED_R11_EAC* = 0x9270.GLenum
  GL_COMPRESSED_R11_EAC_OES* = 0x9270.GLenum
  GL_COMPRESSED_SIGNED_R11_EAC* = 0x9271.GLenum
  GL_COMPRESSED_SIGNED_R11_EAC_OES* = 0x9271.GLenum
  GL_COMPRESSED_RG11_EAC* = 0x9272.GLenum
  GL_COMPRESSED_RG11_EAC_OES* = 0x9272.GLenum
  GL_COMPRESSED_SIGNED_RG11_EAC* = 0x9273.GLenum
  GL_COMPRESSED_SIGNED_RG11_EAC_OES* = 0x9273.GLenum
  GL_COMPRESSED_RGB8_ETC2* = 0x9274.GLenum
  GL_COMPRESSED_RGB8_ETC2_OES* = 0x9274.GLenum
  GL_COMPRESSED_SRGB8_ETC2* = 0x9275.GLenum
  GL_COMPRESSED_SRGB8_ETC2_OES* = 0x9275.GLenum
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2* = 0x9276.GLenum
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES* = 0x9276.GLenum
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2* = 0x9277.GLenum
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES* = 0x9277.GLenum
  GL_COMPRESSED_RGBA8_ETC2_EAC* = 0x9278.GLenum
  GL_COMPRESSED_RGBA8_ETC2_EAC_OES* = 0x9278.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC* = 0x9279.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES* = 0x9279.GLenum
  GL_BLEND_PREMULTIPLIED_SRC_NV* = 0x9280.GLenum
  GL_BLEND_OVERLAP_NV* = 0x9281.GLenum
  GL_UNCORRELATED_NV* = 0x9282.GLenum
  GL_DISJOINT_NV* = 0x9283.GLenum
  GL_CONJOINT_NV* = 0x9284.GLenum
  GL_BLEND_ADVANCED_COHERENT_KHR* = 0x9285.GLenum
  GL_BLEND_ADVANCED_COHERENT_NV* = 0x9285.GLenum
  GL_SRC_NV* = 0x9286.GLenum
  GL_DST_NV* = 0x9287.GLenum
  GL_SRC_OVER_NV* = 0x9288.GLenum
  GL_DST_OVER_NV* = 0x9289.GLenum
  GL_SRC_IN_NV* = 0x928A.GLenum
  GL_DST_IN_NV* = 0x928B.GLenum
  GL_SRC_OUT_NV* = 0x928C.GLenum
  GL_DST_OUT_NV* = 0x928D.GLenum
  GL_SRC_ATOP_NV* = 0x928E.GLenum
  GL_DST_ATOP_NV* = 0x928F.GLenum
  GL_PLUS_NV* = 0x9291.GLenum
  GL_PLUS_DARKER_NV* = 0x9292.GLenum
  GL_MULTIPLY* = 0x9294.GLenum
  GL_MULTIPLY_KHR* = 0x9294.GLenum
  GL_MULTIPLY_NV* = 0x9294.GLenum
  GL_SCREEN* = 0x9295.GLenum
  GL_SCREEN_KHR* = 0x9295.GLenum
  GL_SCREEN_NV* = 0x9295.GLenum
  GL_OVERLAY* = 0x9296.GLenum
  GL_OVERLAY_KHR* = 0x9296.GLenum
  GL_OVERLAY_NV* = 0x9296.GLenum
  GL_DARKEN* = 0x9297.GLenum
  GL_DARKEN_KHR* = 0x9297.GLenum
  GL_DARKEN_NV* = 0x9297.GLenum
  GL_LIGHTEN* = 0x9298.GLenum
  GL_LIGHTEN_KHR* = 0x9298.GLenum
  GL_LIGHTEN_NV* = 0x9298.GLenum
  GL_COLORDODGE* = 0x9299.GLenum
  GL_COLORDODGE_KHR* = 0x9299.GLenum
  GL_COLORDODGE_NV* = 0x9299.GLenum
  GL_COLORBURN* = 0x929A.GLenum
  GL_COLORBURN_KHR* = 0x929A.GLenum
  GL_COLORBURN_NV* = 0x929A.GLenum
  GL_HARDLIGHT* = 0x929B.GLenum
  GL_HARDLIGHT_KHR* = 0x929B.GLenum
  GL_HARDLIGHT_NV* = 0x929B.GLenum
  GL_SOFTLIGHT* = 0x929C.GLenum
  GL_SOFTLIGHT_KHR* = 0x929C.GLenum
  GL_SOFTLIGHT_NV* = 0x929C.GLenum
  GL_DIFFERENCE* = 0x929E.GLenum
  GL_DIFFERENCE_KHR* = 0x929E.GLenum
  GL_DIFFERENCE_NV* = 0x929E.GLenum
  GL_MINUS_NV* = 0x929F.GLenum
  GL_EXCLUSION* = 0x92A0.GLenum
  GL_EXCLUSION_KHR* = 0x92A0.GLenum
  GL_EXCLUSION_NV* = 0x92A0.GLenum
  GL_CONTRAST_NV* = 0x92A1.GLenum
  GL_INVERT_RGB_NV* = 0x92A3.GLenum
  GL_LINEARDODGE_NV* = 0x92A4.GLenum
  GL_LINEARBURN_NV* = 0x92A5.GLenum
  GL_VIVIDLIGHT_NV* = 0x92A6.GLenum
  GL_LINEARLIGHT_NV* = 0x92A7.GLenum
  GL_PINLIGHT_NV* = 0x92A8.GLenum
  GL_HARDMIX_NV* = 0x92A9.GLenum
  GL_HSL_HUE* = 0x92AD.GLenum
  GL_HSL_HUE_KHR* = 0x92AD.GLenum
  GL_HSL_HUE_NV* = 0x92AD.GLenum
  GL_HSL_SATURATION* = 0x92AE.GLenum
  GL_HSL_SATURATION_KHR* = 0x92AE.GLenum
  GL_HSL_SATURATION_NV* = 0x92AE.GLenum
  GL_HSL_COLOR* = 0x92AF.GLenum
  GL_HSL_COLOR_KHR* = 0x92AF.GLenum
  GL_HSL_COLOR_NV* = 0x92AF.GLenum
  GL_HSL_LUMINOSITY* = 0x92B0.GLenum
  GL_HSL_LUMINOSITY_KHR* = 0x92B0.GLenum
  GL_HSL_LUMINOSITY_NV* = 0x92B0.GLenum
  GL_PLUS_CLAMPED_NV* = 0x92B1.GLenum
  GL_PLUS_CLAMPED_ALPHA_NV* = 0x92B2.GLenum
  GL_MINUS_CLAMPED_NV* = 0x92B3.GLenum
  GL_INVERT_OVG_NV* = 0x92B4.GLenum
  GL_MAX_LGPU_GPUS_NVX* = 0x92BA.GLenum
  GL_MULTICAST_GPUS_NV* = 0x92BA.GLenum
  GL_PURGED_CONTEXT_RESET_NV* = 0x92BB.GLenum
  GL_PRIMITIVE_BOUNDING_BOX_ARB* = 0x92BE.GLenum
  GL_PRIMITIVE_BOUNDING_BOX* = 0x92BE.GLenum
  GL_PRIMITIVE_BOUNDING_BOX_EXT* = 0x92BE.GLenum
  GL_PRIMITIVE_BOUNDING_BOX_OES* = 0x92BE.GLenum
  GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV* = 0x92BF.GLenum
  GL_ATOMIC_COUNTER_BUFFER* = 0x92C0.GLenum
  GL_ATOMIC_COUNTER_BUFFER_BINDING* = 0x92C1.GLenum
  GL_ATOMIC_COUNTER_BUFFER_START* = 0x92C2.GLenum
  GL_ATOMIC_COUNTER_BUFFER_SIZE* = 0x92C3.GLenum
  GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE* = 0x92C4.GLenum
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS* = 0x92C5.GLenum
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES* = 0x92C6.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER* = 0x92C7.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER* = 0x92C8.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER* = 0x92C9.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER* = 0x92CA.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER* = 0x92CB.GLenum
  GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS* = 0x92CC.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS* = 0x92CD.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT* = 0x92CD.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES* = 0x92CD.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS* = 0x92CE.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT* = 0x92CE.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES* = 0x92CE.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS* = 0x92CF.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT* = 0x92CF.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES* = 0x92CF.GLenum
  GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS* = 0x92D0.GLenum
  GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS* = 0x92D1.GLenum
  GL_MAX_VERTEX_ATOMIC_COUNTERS* = 0x92D2.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS* = 0x92D3.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT* = 0x92D3.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES* = 0x92D3.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS* = 0x92D4.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT* = 0x92D4.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES* = 0x92D4.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS* = 0x92D5.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT* = 0x92D5.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES* = 0x92D5.GLenum
  GL_MAX_FRAGMENT_ATOMIC_COUNTERS* = 0x92D6.GLenum
  GL_MAX_COMBINED_ATOMIC_COUNTERS* = 0x92D7.GLenum
  GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE* = 0x92D8.GLenum
  GL_ACTIVE_ATOMIC_COUNTER_BUFFERS* = 0x92D9.GLenum
  GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX* = 0x92DA.GLenum
  GL_UNSIGNED_INT_ATOMIC_COUNTER* = 0x92DB.GLenum
  GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS* = 0x92DC.GLenum
  GL_FRAGMENT_COVERAGE_TO_COLOR_NV* = 0x92DD.GLenum
  GL_FRAGMENT_COVERAGE_COLOR_NV* = 0x92DE.GLenum
  GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV* = 0x92DF.GLenum
  GL_DEBUG_OUTPUT* = 0x92E0.GLenum
  GL_DEBUG_OUTPUT_KHR* = 0x92E0.GLenum
  GL_UNIFORM* = 0x92E1.GLenum
  GL_UNIFORM_BLOCK* = 0x92E2.GLenum
  GL_PROGRAM_INPUT* = 0x92E3.GLenum
  GL_PROGRAM_OUTPUT* = 0x92E4.GLenum
  GL_BUFFER_VARIABLE* = 0x92E5.GLenum
  GL_SHADER_STORAGE_BLOCK* = 0x92E6.GLenum
  GL_IS_PER_PATCH* = 0x92E7.GLenum
  GL_IS_PER_PATCH_EXT* = 0x92E7.GLenum
  GL_IS_PER_PATCH_OES* = 0x92E7.GLenum
  GL_VERTEX_SUBROUTINE* = 0x92E8.GLenum
  GL_TESS_CONTROL_SUBROUTINE* = 0x92E9.GLenum
  GL_TESS_EVALUATION_SUBROUTINE* = 0x92EA.GLenum
  GL_GEOMETRY_SUBROUTINE* = 0x92EB.GLenum
  GL_FRAGMENT_SUBROUTINE* = 0x92EC.GLenum
  GL_COMPUTE_SUBROUTINE* = 0x92ED.GLenum
  GL_VERTEX_SUBROUTINE_UNIFORM* = 0x92EE.GLenum
  GL_TESS_CONTROL_SUBROUTINE_UNIFORM* = 0x92EF.GLenum
  GL_TESS_EVALUATION_SUBROUTINE_UNIFORM* = 0x92F0.GLenum
  GL_GEOMETRY_SUBROUTINE_UNIFORM* = 0x92F1.GLenum
  GL_FRAGMENT_SUBROUTINE_UNIFORM* = 0x92F2.GLenum
  GL_COMPUTE_SUBROUTINE_UNIFORM* = 0x92F3.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING* = 0x92F4.GLenum
  GL_ACTIVE_RESOURCES* = 0x92F5.GLenum
  GL_MAX_NAME_LENGTH* = 0x92F6.GLenum
  GL_MAX_NUM_ACTIVE_VARIABLES* = 0x92F7.GLenum
  GL_MAX_NUM_COMPATIBLE_SUBROUTINES* = 0x92F8.GLenum
  GL_NAME_LENGTH* = 0x92F9.GLenum
  GL_TYPE* = 0x92FA.GLenum
  GL_ARRAY_SIZE* = 0x92FB.GLenum
  GL_OFFSET* = 0x92FC.GLenum
  GL_BLOCK_INDEX* = 0x92FD.GLenum
  GL_ARRAY_STRIDE* = 0x92FE.GLenum
  GL_MATRIX_STRIDE* = 0x92FF.GLenum
  GL_IS_ROW_MAJOR* = 0x9300.GLenum
  GL_ATOMIC_COUNTER_BUFFER_INDEX* = 0x9301.GLenum
  GL_BUFFER_BINDING* = 0x9302.GLenum
  GL_BUFFER_DATA_SIZE* = 0x9303.GLenum
  GL_NUM_ACTIVE_VARIABLES* = 0x9304.GLenum
  GL_ACTIVE_VARIABLES* = 0x9305.GLenum
  GL_REFERENCED_BY_VERTEX_SHADER* = 0x9306.GLenum
  GL_REFERENCED_BY_TESS_CONTROL_SHADER* = 0x9307.GLenum
  GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT* = 0x9307.GLenum
  GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES* = 0x9307.GLenum
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER* = 0x9308.GLenum
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT* = 0x9308.GLenum
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES* = 0x9308.GLenum
  GL_REFERENCED_BY_GEOMETRY_SHADER* = 0x9309.GLenum
  GL_REFERENCED_BY_GEOMETRY_SHADER_EXT* = 0x9309.GLenum
  GL_REFERENCED_BY_GEOMETRY_SHADER_OES* = 0x9309.GLenum
  GL_REFERENCED_BY_FRAGMENT_SHADER* = 0x930A.GLenum
  GL_REFERENCED_BY_COMPUTE_SHADER* = 0x930B.GLenum
  GL_TOP_LEVEL_ARRAY_SIZE* = 0x930C.GLenum
  GL_TOP_LEVEL_ARRAY_STRIDE* = 0x930D.GLenum
  GL_LOCATION* = 0x930E.GLenum
  GL_LOCATION_INDEX* = 0x930F.GLenum
  GL_LOCATION_INDEX_EXT* = 0x930F.GLenum
  GL_FRAMEBUFFER_DEFAULT_WIDTH* = 0x9310.GLenum
  GL_FRAMEBUFFER_DEFAULT_HEIGHT* = 0x9311.GLenum
  GL_FRAMEBUFFER_DEFAULT_LAYERS* = 0x9312.GLenum
  GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT* = 0x9312.GLenum
  GL_FRAMEBUFFER_DEFAULT_LAYERS_OES* = 0x9312.GLenum
  GL_FRAMEBUFFER_DEFAULT_SAMPLES* = 0x9313.GLenum
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS* = 0x9314.GLenum
  GL_MAX_FRAMEBUFFER_WIDTH* = 0x9315.GLenum
  GL_MAX_FRAMEBUFFER_HEIGHT* = 0x9316.GLenum
  GL_MAX_FRAMEBUFFER_LAYERS* = 0x9317.GLenum
  GL_MAX_FRAMEBUFFER_LAYERS_EXT* = 0x9317.GLenum
  GL_MAX_FRAMEBUFFER_LAYERS_OES* = 0x9317.GLenum
  GL_MAX_FRAMEBUFFER_SAMPLES* = 0x9318.GLenum
  GL_RASTER_MULTISAMPLE_EXT* = 0x9327.GLenum
  GL_RASTER_SAMPLES_EXT* = 0x9328.GLenum
  GL_MAX_RASTER_SAMPLES_EXT* = 0x9329.GLenum
  GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT* = 0x932A.GLenum
  GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT* = 0x932B.GLenum
  GL_EFFECTIVE_RASTER_SAMPLES_EXT* = 0x932C.GLenum
  GL_DEPTH_SAMPLES_NV* = 0x932D.GLenum
  GL_STENCIL_SAMPLES_NV* = 0x932E.GLenum
  GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV* = 0x932F.GLenum
  GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV* = 0x9330.GLenum
  GL_COVERAGE_MODULATION_TABLE_NV* = 0x9331.GLenum
  GL_COVERAGE_MODULATION_NV* = 0x9332.GLenum
  GL_COVERAGE_MODULATION_TABLE_SIZE_NV* = 0x9333.GLenum
  GL_WARP_SIZE_NV* = 0x9339.GLenum
  GL_WARPS_PER_SM_NV* = 0x933A.GLenum
  GL_SM_COUNT_NV* = 0x933B.GLenum
  GL_FILL_RECTANGLE_NV* = 0x933C.GLenum
  GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB* = 0x933D.GLenum
  GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV* = 0x933D.GLenum
  GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB* = 0x933E.GLenum
  GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV* = 0x933E.GLenum
  GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB* = 0x933F.GLenum
  GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV* = 0x933F.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB* = 0x9340.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV* = 0x9340.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB* = 0x9341.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_NV* = 0x9341.GLenum
  GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB* = 0x9342.GLenum
  GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV* = 0x9342.GLenum
  GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB* = 0x9343.GLenum
  GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV* = 0x9343.GLenum
  GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB* = 0x9344.GLenum
  GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB* = 0x9345.GLenum
  GL_CONSERVATIVE_RASTERIZATION_NV* = 0x9346.GLenum
  GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV* = 0x9347.GLenum
  GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV* = 0x9348.GLenum
  GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV* = 0x9349.GLenum
  GL_LOCATION_COMPONENT* = 0x934A.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_INDEX* = 0x934B.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE* = 0x934C.GLenum
  GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV* = 0x934D.GLenum
  GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV* = 0x934E.GLenum
  GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV* = 0x934F.GLenum
  GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV* = 0x9350.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV* = 0x9351.GLenum
  GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV* = 0x9352.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV* = 0x9353.GLenum
  GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV* = 0x9354.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV* = 0x9355.GLenum
  GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV* = 0x9356.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV* = 0x9357.GLenum
  GL_VIEWPORT_SWIZZLE_X_NV* = 0x9358.GLenum
  GL_VIEWPORT_SWIZZLE_Y_NV* = 0x9359.GLenum
  GL_VIEWPORT_SWIZZLE_Z_NV* = 0x935A.GLenum
  GL_VIEWPORT_SWIZZLE_W_NV* = 0x935B.GLenum
  GL_CLIP_ORIGIN* = 0x935C.GLenum
  GL_CLIP_ORIGIN_EXT* = 0x935C.GLenum
  GL_CLIP_DEPTH_MODE* = 0x935D.GLenum
  GL_CLIP_DEPTH_MODE_EXT* = 0x935D.GLenum
  GL_NEGATIVE_ONE_TO_ONE* = 0x935E.GLenum
  GL_NEGATIVE_ONE_TO_ONE_EXT* = 0x935E.GLenum
  GL_ZERO_TO_ONE* = 0x935F.GLenum
  GL_ZERO_TO_ONE_EXT* = 0x935F.GLenum
  GL_CLEAR_TEXTURE* = 0x9365.GLenum
  GL_TEXTURE_REDUCTION_MODE_ARB* = 0x9366.GLenum
  GL_TEXTURE_REDUCTION_MODE_EXT* = 0x9366.GLenum
  GL_WEIGHTED_AVERAGE_ARB* = 0x9367.GLenum
  GL_WEIGHTED_AVERAGE_EXT* = 0x9367.GLenum
  GL_FONT_GLYPHS_AVAILABLE_NV* = 0x9368.GLenum
  GL_FONT_TARGET_UNAVAILABLE_NV* = 0x9369.GLenum
  GL_FONT_UNAVAILABLE_NV* = 0x936A.GLenum
  GL_FONT_UNINTELLIGIBLE_NV* = 0x936B.GLenum
  GL_STANDARD_FONT_FORMAT_NV* = 0x936C.GLenum
  GL_FRAGMENT_INPUT_NV* = 0x936D.GLenum
  GL_UNIFORM_BUFFER_UNIFIED_NV* = 0x936E.GLenum
  GL_UNIFORM_BUFFER_ADDRESS_NV* = 0x936F.GLenum
  GL_UNIFORM_BUFFER_LENGTH_NV* = 0x9370.GLenum
  GL_MULTISAMPLES_NV* = 0x9371.GLenum
  GL_SUPERSAMPLE_SCALE_X_NV* = 0x9372.GLenum
  GL_SUPERSAMPLE_SCALE_Y_NV* = 0x9373.GLenum
  GL_CONFORMANT_NV* = 0x9374.GLenum
  GL_CONSERVATIVE_RASTER_DILATE_NV* = 0x9379.GLenum
  GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV* = 0x937A.GLenum
  GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV* = 0x937B.GLenum
  GL_VIEWPORT_POSITION_W_SCALE_NV* = 0x937C.GLenum
  GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV* = 0x937D.GLenum
  GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV* = 0x937E.GLenum
  GL_REPRESENTATIVE_FRAGMENT_TEST_NV* = 0x937F.GLenum
  GL_NUM_SAMPLE_COUNTS* = 0x9380.GLenum
  GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB* = 0x9381.GLenum
  GL_MULTISAMPLE_LINE_WIDTH_RANGE* = 0x9381.GLenum
  GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB* = 0x9382.GLenum
  GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY* = 0x9382.GLenum
  GL_VIEW_CLASS_EAC_R11* = 0x9383.GLenum
  GL_VIEW_CLASS_EAC_RG11* = 0x9384.GLenum
  GL_VIEW_CLASS_ETC2_RGB* = 0x9385.GLenum
  GL_VIEW_CLASS_ETC2_RGBA* = 0x9386.GLenum
  GL_VIEW_CLASS_ETC2_EAC_RGBA* = 0x9387.GLenum
  GL_VIEW_CLASS_ASTC_4x4_RGBA* = 0x9388.GLenum
  GL_VIEW_CLASS_ASTC_5x4_RGBA* = 0x9389.GLenum
  GL_VIEW_CLASS_ASTC_5x5_RGBA* = 0x938A.GLenum
  GL_VIEW_CLASS_ASTC_6x5_RGBA* = 0x938B.GLenum
  GL_VIEW_CLASS_ASTC_6x6_RGBA* = 0x938C.GLenum
  GL_VIEW_CLASS_ASTC_8x5_RGBA* = 0x938D.GLenum
  GL_VIEW_CLASS_ASTC_8x6_RGBA* = 0x938E.GLenum
  GL_VIEW_CLASS_ASTC_8x8_RGBA* = 0x938F.GLenum
  GL_VIEW_CLASS_ASTC_10x5_RGBA* = 0x9390.GLenum
  GL_VIEW_CLASS_ASTC_10x6_RGBA* = 0x9391.GLenum
  GL_VIEW_CLASS_ASTC_10x8_RGBA* = 0x9392.GLenum
  GL_VIEW_CLASS_ASTC_10x10_RGBA* = 0x9393.GLenum
  GL_VIEW_CLASS_ASTC_12x10_RGBA* = 0x9394.GLenum
  GL_VIEW_CLASS_ASTC_12x12_RGBA* = 0x9395.GLenum
  GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE* = 0x93A0.GLenum
  GL_BGRA8_EXT* = 0x93A1.GLenum
  GL_TEXTURE_USAGE_ANGLE* = 0x93A2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_ANGLE* = 0x93A3.GLenum
  GL_PACK_REVERSE_ROW_ORDER_ANGLE* = 0x93A4.GLenum
  GL_PROGRAM_BINARY_ANGLE* = 0x93A6.GLenum
  GL_COMPRESSED_RGBA_ASTC_4x4* = 0x93B0.GLenum
  GL_COMPRESSED_RGBA_ASTC_4x4_KHR* = 0x93B0.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x4* = 0x93B1.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x4_KHR* = 0x93B1.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x5* = 0x93B2.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x5_KHR* = 0x93B2.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x5* = 0x93B3.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x5_KHR* = 0x93B3.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x6* = 0x93B4.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x6_KHR* = 0x93B4.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x5* = 0x93B5.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x5_KHR* = 0x93B5.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x6* = 0x93B6.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x6_KHR* = 0x93B6.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x8* = 0x93B7.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x8_KHR* = 0x93B7.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x5* = 0x93B8.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x5_KHR* = 0x93B8.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x6* = 0x93B9.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x6_KHR* = 0x93B9.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x8* = 0x93BA.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x8_KHR* = 0x93BA.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x10* = 0x93BB.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x10_KHR* = 0x93BB.GLenum
  GL_COMPRESSED_RGBA_ASTC_12x10* = 0x93BC.GLenum
  GL_COMPRESSED_RGBA_ASTC_12x10_KHR* = 0x93BC.GLenum
  GL_COMPRESSED_RGBA_ASTC_12x12* = 0x93BD.GLenum
  GL_COMPRESSED_RGBA_ASTC_12x12_KHR* = 0x93BD.GLenum
  GL_COMPRESSED_RGBA_ASTC_3x3x3_OES* = 0x93C0.GLenum
  GL_COMPRESSED_RGBA_ASTC_4x3x3_OES* = 0x93C1.GLenum
  GL_COMPRESSED_RGBA_ASTC_4x4x3_OES* = 0x93C2.GLenum
  GL_COMPRESSED_RGBA_ASTC_4x4x4_OES* = 0x93C3.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x4x4_OES* = 0x93C4.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x5x4_OES* = 0x93C5.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x5x5_OES* = 0x93C6.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x5x5_OES* = 0x93C7.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x6x5_OES* = 0x93C8.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x6x6_OES* = 0x93C9.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4* = 0x93D0.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR* = 0x93D0.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4* = 0x93D1.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR* = 0x93D1.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5* = 0x93D2.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR* = 0x93D2.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5* = 0x93D3.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR* = 0x93D3.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6* = 0x93D4.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR* = 0x93D4.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5* = 0x93D5.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR* = 0x93D5.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6* = 0x93D6.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR* = 0x93D6.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8* = 0x93D7.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR* = 0x93D7.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5* = 0x93D8.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR* = 0x93D8.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6* = 0x93D9.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR* = 0x93D9.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8* = 0x93DA.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR* = 0x93DA.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10* = 0x93DB.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR* = 0x93DB.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10* = 0x93DC.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR* = 0x93DC.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12* = 0x93DD.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR* = 0x93DD.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES* = 0x93E0.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES* = 0x93E1.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES* = 0x93E2.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES* = 0x93E3.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES* = 0x93E4.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES* = 0x93E5.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES* = 0x93E6.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES* = 0x93E7.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES* = 0x93E8.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES* = 0x93E9.GLenum
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG* = 0x93F0.GLenum
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG* = 0x93F1.GLenum
  GL_PERFQUERY_COUNTER_EVENT_INTEL* = 0x94F0.GLenum
  GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL* = 0x94F1.GLenum
  GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL* = 0x94F2.GLenum
  GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL* = 0x94F3.GLenum
  GL_PERFQUERY_COUNTER_RAW_INTEL* = 0x94F4.GLenum
  GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL* = 0x94F5.GLenum
  GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL* = 0x94F8.GLenum
  GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL* = 0x94F9.GLenum
  GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL* = 0x94FA.GLenum
  GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL* = 0x94FB.GLenum
  GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL* = 0x94FC.GLenum
  GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL* = 0x94FD.GLenum
  GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL* = 0x94FE.GLenum
  GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL* = 0x94FF.GLenum
  GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL* = 0x9500.GLenum
  GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT* = 0x9530.GLenum
  GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT* = 0x9531.GLenum
  GL_SUBGROUP_SIZE_KHR* = 0x9532.GLenum
  GL_SUBGROUP_SUPPORTED_STAGES_KHR* = 0x9533.GLenum
  GL_SUBGROUP_SUPPORTED_FEATURES_KHR* = 0x9534.GLenum
  GL_SUBGROUP_QUAD_ALL_STAGES_KHR* = 0x9535.GLenum
  GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV* = 0x9536.GLenum
  GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV* = 0x9537.GLenum
  GL_MAX_MESH_OUTPUT_VERTICES_NV* = 0x9538.GLenum
  GL_MAX_MESH_OUTPUT_PRIMITIVES_NV* = 0x9539.GLenum
  GL_MAX_TASK_OUTPUT_COUNT_NV* = 0x953A.GLenum
  GL_MAX_MESH_WORK_GROUP_SIZE_NV* = 0x953B.GLenum
  GL_MAX_TASK_WORK_GROUP_SIZE_NV* = 0x953C.GLenum
  GL_MAX_DRAW_MESH_TASKS_COUNT_NV* = 0x953D.GLenum
  GL_MESH_WORK_GROUP_SIZE_NV* = 0x953E.GLenum
  GL_TASK_WORK_GROUP_SIZE_NV* = 0x953F.GLenum
  GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV* = 0x9540.GLenum
  GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV* = 0x9542.GLenum
  GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV* = 0x9543.GLenum
  GL_QUERY_RESOURCE_SYS_RESERVED_NV* = 0x9544.GLenum
  GL_QUERY_RESOURCE_TEXTURE_NV* = 0x9545.GLenum
  GL_QUERY_RESOURCE_RENDERBUFFER_NV* = 0x9546.GLenum
  GL_QUERY_RESOURCE_BUFFEROBJECT_NV* = 0x9547.GLenum
  GL_PER_GPU_STORAGE_NV* = 0x9548.GLenum
  GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV* = 0x9549.GLenum
  GL_UPLOAD_GPU_MASK_NVX* = 0x954A.GLenum
  GL_CONSERVATIVE_RASTER_MODE_NV* = 0x954D.GLenum
  GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV* = 0x954E.GLenum
  GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV* = 0x954F.GLenum
  GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV* = 0x9550.GLenum
  GL_SHADER_BINARY_FORMAT_SPIR_V* = 0x9551.GLenum
  GL_SHADER_BINARY_FORMAT_SPIR_V_ARB* = 0x9551.GLenum
  GL_SPIR_V_BINARY* = 0x9552.GLenum
  GL_SPIR_V_BINARY_ARB* = 0x9552.GLenum
  GL_SPIR_V_EXTENSIONS* = 0x9553.GLenum
  GL_NUM_SPIR_V_EXTENSIONS* = 0x9554.GLenum
  GL_SCISSOR_TEST_EXCLUSIVE_NV* = 0x9555.GLenum
  GL_SCISSOR_BOX_EXCLUSIVE_NV* = 0x9556.GLenum
  GL_MAX_MESH_VIEWS_NV* = 0x9557.GLenum
  GL_RENDER_GPU_MASK_NV* = 0x9558.GLenum
  GL_MESH_SHADER_NV* = 0x9559.GLenum
  GL_TASK_SHADER_NV* = 0x955A.GLenum
  GL_SHADING_RATE_IMAGE_BINDING_NV* = 0x955B.GLenum
  GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV* = 0x955C.GLenum
  GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV* = 0x955D.GLenum
  GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV* = 0x955E.GLenum
  GL_MAX_COARSE_FRAGMENT_SAMPLES_NV* = 0x955F.GLenum
  GL_SHADING_RATE_IMAGE_NV* = 0x9563.GLenum
  GL_SHADING_RATE_NO_INVOCATIONS_NV* = 0x9564.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV* = 0x9565.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV* = 0x9566.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV* = 0x9567.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV* = 0x9568.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV* = 0x9569.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV* = 0x956A.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV* = 0x956B.GLenum
  GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV* = 0x956C.GLenum
  GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV* = 0x956D.GLenum
  GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV* = 0x956E.GLenum
  GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV* = 0x956F.GLenum
  GL_MESH_VERTICES_OUT_NV* = 0x9579.GLenum
  GL_MESH_PRIMITIVES_OUT_NV* = 0x957A.GLenum
  GL_MESH_OUTPUT_TYPE_NV* = 0x957B.GLenum
  GL_MESH_SUBROUTINE_NV* = 0x957C.GLenum
  GL_TASK_SUBROUTINE_NV* = 0x957D.GLenum
  GL_MESH_SUBROUTINE_UNIFORM_NV* = 0x957E.GLenum
  GL_TASK_SUBROUTINE_UNIFORM_NV* = 0x957F.GLenum
  GL_TEXTURE_TILING_EXT* = 0x9580.GLenum
  GL_DEDICATED_MEMORY_OBJECT_EXT* = 0x9581.GLenum
  GL_NUM_TILING_TYPES_EXT* = 0x9582.GLenum
  GL_TILING_TYPES_EXT* = 0x9583.GLenum
  GL_OPTIMAL_TILING_EXT* = 0x9584.GLenum
  GL_LINEAR_TILING_EXT* = 0x9585.GLenum
  GL_HANDLE_TYPE_OPAQUE_FD_EXT* = 0x9586.GLenum
  GL_HANDLE_TYPE_OPAQUE_WIN32_EXT* = 0x9587.GLenum
  GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT* = 0x9588.GLenum
  GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT* = 0x9589.GLenum
  GL_HANDLE_TYPE_D3D12_RESOURCE_EXT* = 0x958A.GLenum
  GL_HANDLE_TYPE_D3D11_IMAGE_EXT* = 0x958B.GLenum
  GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT* = 0x958C.GLenum
  GL_LAYOUT_GENERAL_EXT* = 0x958D.GLenum
  GL_LAYOUT_COLOR_ATTACHMENT_EXT* = 0x958E.GLenum
  GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT* = 0x958F.GLenum
  GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT* = 0x9590.GLenum
  GL_LAYOUT_SHADER_READ_ONLY_EXT* = 0x9591.GLenum
  GL_LAYOUT_TRANSFER_SRC_EXT* = 0x9592.GLenum
  GL_LAYOUT_TRANSFER_DST_EXT* = 0x9593.GLenum
  GL_HANDLE_TYPE_D3D12_FENCE_EXT* = 0x9594.GLenum
  GL_D3D12_FENCE_VALUE_EXT* = 0x9595.GLenum
  GL_NUM_DEVICE_UUIDS_EXT* = 0x9596.GLenum
  GL_DEVICE_UUID_EXT* = 0x9597.GLenum
  GL_DRIVER_UUID_EXT* = 0x9598.GLenum
  GL_DEVICE_LUID_EXT* = 0x9599.GLenum
  GL_DEVICE_NODE_MASK_EXT* = 0x959A.GLenum
  GL_PROTECTED_MEMORY_OBJECT_EXT* = 0x959B.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV* = 0x959C.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV* = 0x959D.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV* = 0x959E.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV* = 0x959F.GLenum
  GL_REFERENCED_BY_MESH_SHADER_NV* = 0x95A0.GLenum
  GL_REFERENCED_BY_TASK_SHADER_NV* = 0x95A1.GLenum
  GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV* = 0x95A2.GLenum
  GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV* = 0x95A3.GLenum
  GL_ATTACHED_MEMORY_OBJECT_NV* = 0x95A4.GLenum
  GL_ATTACHED_MEMORY_OFFSET_NV* = 0x95A5.GLenum
  GL_MEMORY_ATTACHABLE_ALIGNMENT_NV* = 0x95A6.GLenum
  GL_MEMORY_ATTACHABLE_SIZE_NV* = 0x95A7.GLenum
  GL_MEMORY_ATTACHABLE_NV* = 0x95A8.GLenum
  GL_DETACHED_MEMORY_INCARNATION_NV* = 0x95A9.GLenum
  GL_DETACHED_TEXTURES_NV* = 0x95AA.GLenum
  GL_DETACHED_BUFFERS_NV* = 0x95AB.GLenum
  GL_MAX_DETACHED_TEXTURES_NV* = 0x95AC.GLenum
  GL_MAX_DETACHED_BUFFERS_NV* = 0x95AD.GLenum
  GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV* = 0x95AE.GLenum
  GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV* = 0x95AF.GLenum
  GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV* = 0x95B0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR* = 0x9630.GLenum
  GL_MAX_VIEWS_OVR* = 0x9631.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR* = 0x9632.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR* = 0x9633.GLenum
  GL_GS_SHADER_BINARY_MTK* = 0x9640.GLenum
  GL_GS_PROGRAM_BINARY_MTK* = 0x9641.GLenum
  GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT* = 0x9650.GLenum
  GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT* = 0x9651.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT* = 0x9652.GLenum
  GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM* = 0x96A2.GLenum
  GL_VALIDATE_SHADER_BINARY_QCOM* = 0x96A3.GLenum
  GL_RASTER_POSITION_UNCLIPPED_IBM* = 0x19262.GLenum
  GL_CULL_VERTEX_IBM* = 103050.GLenum
  GL_ALL_STATIC_DATA_IBM* = 103060.GLenum
  GL_STATIC_VERTEX_ARRAY_IBM* = 103061.GLenum
  GL_VERTEX_ARRAY_LIST_IBM* = 103070.GLenum
  GL_NORMAL_ARRAY_LIST_IBM* = 103071.GLenum
  GL_COLOR_ARRAY_LIST_IBM* = 103072.GLenum
  GL_INDEX_ARRAY_LIST_IBM* = 103073.GLenum
  GL_TEXTURE_COORD_ARRAY_LIST_IBM* = 103074.GLenum
  GL_EDGE_FLAG_ARRAY_LIST_IBM* = 103075.GLenum
  GL_FOG_COORDINATE_ARRAY_LIST_IBM* = 103076.GLenum
  GL_SECONDARY_COLOR_ARRAY_LIST_IBM* = 103077.GLenum
  GL_VERTEX_ARRAY_LIST_STRIDE_IBM* = 103080.GLenum
  GL_NORMAL_ARRAY_LIST_STRIDE_IBM* = 103081.GLenum
  GL_COLOR_ARRAY_LIST_STRIDE_IBM* = 103082.GLenum
  GL_INDEX_ARRAY_LIST_STRIDE_IBM* = 103083.GLenum
  GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM* = 103084.GLenum
  GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM* = 103085.GLenum
  GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM* = 103086.GLenum
  GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM* = 103087.GLenum
  GL_PREFER_DOUBLEBUFFER_HINT_PGI* = 0x1A1F8.GLenum
  GL_CONSERVE_MEMORY_HINT_PGI* = 0x1A1FD.GLenum
  GL_RECLAIM_MEMORY_HINT_PGI* = 0x1A1FE.GLenum
  GL_NATIVE_GRAPHICS_HANDLE_PGI* = 0x1A202.GLenum
  GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI* = 0x1A203.GLenum
  GL_NATIVE_GRAPHICS_END_HINT_PGI* = 0x1A204.GLenum
  GL_ALWAYS_FAST_HINT_PGI* = 0x1A20C.GLenum
  GL_ALWAYS_SOFT_HINT_PGI* = 0x1A20D.GLenum
  GL_ALLOW_DRAW_OBJ_HINT_PGI* = 0x1A20E.GLenum
  GL_ALLOW_DRAW_WIN_HINT_PGI* = 0x1A20F.GLenum
  GL_ALLOW_DRAW_FRG_HINT_PGI* = 0x1A210.GLenum
  GL_ALLOW_DRAW_MEM_HINT_PGI* = 0x1A211.GLenum
  GL_STRICT_DEPTHFUNC_HINT_PGI* = 0x1A216.GLenum
  GL_STRICT_LIGHTING_HINT_PGI* = 0x1A217.GLenum
  GL_STRICT_SCISSOR_HINT_PGI* = 0x1A218.GLenum
  GL_FULL_STIPPLE_HINT_PGI* = 0x1A219.GLenum
  GL_CLIP_NEAR_HINT_PGI* = 0x1A220.GLenum
  GL_CLIP_FAR_HINT_PGI* = 0x1A221.GLenum
  GL_WIDE_LINE_HINT_PGI* = 0x1A222.GLenum
  GL_BACK_NORMALS_HINT_PGI* = 0x1A223.GLenum
  GL_VERTEX_DATA_HINT_PGI* = 0x1A22A.GLenum
  GL_VERTEX_CONSISTENT_HINT_PGI* = 0x1A22B.GLenum
  GL_MATERIAL_SIDE_HINT_PGI* = 0x1A22C.GLenum
  GL_MAX_VERTEX_HINT_PGI* = 0x1A22D.GLenum

# Procs
var
  glAccum*: proc(op: GLenum, value: GLfloat): void {.stdcall.}
  glAccumxOES*: proc(op: GLenum, value: GLfixed): void {.stdcall.}
  glActiveProgramEXT*: proc(program: GLuint): void {.stdcall.}
  glActiveShaderProgram*: proc(pipeline: GLuint, program: GLuint): void {.stdcall.}
  glActiveShaderProgramEXT*: proc(pipeline: GLuint, program: GLuint): void {.stdcall.}
  glActiveStencilFaceEXT*: proc(face: GLenum): void {.stdcall.}
  glActiveTexture*: proc(texture: GLenum): void {.stdcall.}
  glActiveTextureARB*: proc(texture: GLenum): void {.stdcall.}
  glActiveVaryingNV*: proc(program: GLuint, name: cstring): void {.stdcall.}
  glAlphaFragmentOp1ATI*: proc(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint): void {.stdcall.}
  glAlphaFragmentOp2ATI*: proc(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint): void {.stdcall.}
  glAlphaFragmentOp3ATI*: proc(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint): void {.stdcall.}
  glAlphaFunc*: proc(`func`: GLenum, `ref`: GLfloat): void {.stdcall.}
  glAlphaFuncQCOM*: proc(`func`: GLenum, `ref`: GLclampf): void {.stdcall.}
  glAlphaFuncx*: proc(`func`: GLenum, `ref`: GLfixed): void {.stdcall.}
  glAlphaFuncxOES*: proc(`func`: GLenum, `ref`: GLfixed): void {.stdcall.}
  glAlphaToCoverageDitherControlNV*: proc(mode: GLenum): void {.stdcall.}
  glApplyFramebufferAttachmentCMAAINTEL*: proc(): void {.stdcall.}
  glApplyTextureEXT*: proc(mode: GLenum): void {.stdcall.}
  glAcquireKeyedMutexWin32EXT*: proc(memory: GLuint, key: GLuint64, timeout: GLuint): GLboolean {.stdcall.}
  glAreProgramsResidentNV*: proc(n: GLsizei, programs: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}
  glAreTexturesResident*: proc(n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}
  glAreTexturesResidentEXT*: proc(n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}
  glArrayElement*: proc(i: GLint): void {.stdcall.}
  glArrayElementEXT*: proc(i: GLint): void {.stdcall.}
  glArrayObjectATI*: proc(array: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint): void {.stdcall.}
  glAsyncCopyBufferSubDataNVX*: proc(waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}
  glAsyncCopyImageSubDataNVX*: proc(waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, waitValueArray: ptr GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}
  glAsyncMarkerSGIX*: proc(marker: GLuint): void {.stdcall.}
  glAttachObjectARB*: proc(containerObj: GLhandleARB, obj: GLhandleARB): void {.stdcall.}
  glAttachShader*: proc(program: GLuint, shader: GLuint): void {.stdcall.}
  glBegin*: proc(mode: GLenum): void {.stdcall.}
  glBeginConditionalRender*: proc(id: GLuint, mode: GLenum): void {.stdcall.}
  glBeginConditionalRenderNV*: proc(id: GLuint, mode: GLenum): void {.stdcall.}
  glBeginConditionalRenderNVX*: proc(id: GLuint): void {.stdcall.}
  glBeginFragmentShaderATI*: proc(): void {.stdcall.}
  glBeginOcclusionQueryNV*: proc(id: GLuint): void {.stdcall.}
  glBeginPerfMonitorAMD*: proc(monitor: GLuint): void {.stdcall.}
  glBeginPerfQueryINTEL*: proc(queryHandle: GLuint): void {.stdcall.}
  glBeginQuery*: proc(target: GLenum, id: GLuint): void {.stdcall.}
  glBeginQueryARB*: proc(target: GLenum, id: GLuint): void {.stdcall.}
  glBeginQueryEXT*: proc(target: GLenum, id: GLuint): void {.stdcall.}
  glBeginQueryIndexed*: proc(target: GLenum, index: GLuint, id: GLuint): void {.stdcall.}
  glBeginTransformFeedback*: proc(primitiveMode: GLenum): void {.stdcall.}
  glBeginTransformFeedbackEXT*: proc(primitiveMode: GLenum): void {.stdcall.}
  glBeginTransformFeedbackNV*: proc(primitiveMode: GLenum): void {.stdcall.}
  glBeginVertexShaderEXT*: proc(): void {.stdcall.}
  glBeginVideoCaptureNV*: proc(video_capture_slot: GLuint): void {.stdcall.}
  glBindAttribLocation*: proc(program: GLuint, index: GLuint, name: cstring): void {.stdcall.}
  glBindAttribLocationARB*: proc(programObj: GLhandleARB, index: GLuint, name: ptr GLcharARB): void {.stdcall.}
  glBindBuffer*: proc(target: GLenum, buffer: GLuint): void {.stdcall.}
  glBindBufferARB*: proc(target: GLenum, buffer: GLuint): void {.stdcall.}
  glBindBufferBase*: proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}
  glBindBufferBaseEXT*: proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}
  glBindBufferBaseNV*: proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}
  glBindBufferOffsetEXT*: proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr): void {.stdcall.}
  glBindBufferOffsetNV*: proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr): void {.stdcall.}
  glBindBufferRange*: proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glBindBufferRangeEXT*: proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glBindBufferRangeNV*: proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glBindBuffersBase*: proc(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint): void {.stdcall.}
  glBindBuffersRange*: proc(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr): void {.stdcall.}
  glBindFragDataLocation*: proc(program: GLuint, color: GLuint, name: cstring): void {.stdcall.}
  glBindFragDataLocationEXT*: proc(program: GLuint, color: GLuint, name: cstring): void {.stdcall.}
  glBindFragDataLocationIndexed*: proc(program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring): void {.stdcall.}
  glBindFragDataLocationIndexedEXT*: proc(program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring): void {.stdcall.}
  glBindFragmentShaderATI*: proc(id: GLuint): void {.stdcall.}
  glBindFramebuffer*: proc(target: GLenum, framebuffer: GLuint): void {.stdcall.}
  glBindFramebufferEXT*: proc(target: GLenum, framebuffer: GLuint): void {.stdcall.}
  glBindFramebufferOES*: proc(target: GLenum, framebuffer: GLuint): void {.stdcall.}
  glBindImageTexture*: proc(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum): void {.stdcall.}
  glBindImageTextureEXT*: proc(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint): void {.stdcall.}
  glBindImageTextures*: proc(first: GLuint, count: GLsizei, textures: ptr GLuint): void {.stdcall.}
  glBindLightParameterEXT*: proc(light: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindMaterialParameterEXT*: proc(face: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindMultiTextureEXT*: proc(texunit: GLenum, target: GLenum, texture: GLuint): void {.stdcall.}
  glBindParameterEXT*: proc(value: GLenum): GLuint {.stdcall.}
  glBindProgramARB*: proc(target: GLenum, program: GLuint): void {.stdcall.}
  glBindProgramNV*: proc(target: GLenum, id: GLuint): void {.stdcall.}
  glBindProgramPipeline*: proc(pipeline: GLuint): void {.stdcall.}
  glBindProgramPipelineEXT*: proc(pipeline: GLuint): void {.stdcall.}
  glBindRenderbuffer*: proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glBindRenderbufferEXT*: proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glBindRenderbufferOES*: proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glBindSampler*: proc(unit: GLuint, sampler: GLuint): void {.stdcall.}
  glBindSamplers*: proc(first: GLuint, count: GLsizei, samplers: ptr GLuint): void {.stdcall.}
  glBindShadingRateImageNV*: proc(texture: GLuint): void {.stdcall.}
  glBindTexGenParameterEXT*: proc(unit: GLenum, coord: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindTexture*: proc(target: GLenum, texture: GLuint): void {.stdcall.}
  glBindTextureEXT*: proc(target: GLenum, texture: GLuint): void {.stdcall.}
  glBindTextureUnit*: proc(unit: GLuint, texture: GLuint): void {.stdcall.}
  glBindTextureUnitParameterEXT*: proc(unit: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindTextures*: proc(first: GLuint, count: GLsizei, textures: ptr GLuint): void {.stdcall.}
  glBindTransformFeedback*: proc(target: GLenum, id: GLuint): void {.stdcall.}
  glBindTransformFeedbackNV*: proc(target: GLenum, id: GLuint): void {.stdcall.}
  glBindVertexArray*: proc(array: GLuint): void {.stdcall.}
  glBindVertexArrayAPPLE*: proc(array: GLuint): void {.stdcall.}
  glBindVertexArrayOES*: proc(array: GLuint): void {.stdcall.}
  glBindVertexBuffer*: proc(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}
  glBindVertexBuffers*: proc(first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei): void {.stdcall.}
  glBindVertexShaderEXT*: proc(id: GLuint): void {.stdcall.}
  glBindVideoCaptureStreamBufferNV*: proc(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB): void {.stdcall.}
  glBindVideoCaptureStreamTextureNV*: proc(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint): void {.stdcall.}
  glBinormal3bEXT*: proc(bx: GLbyte, by: GLbyte, bz: GLbyte): void {.stdcall.}
  glBinormal3bvEXT*: proc(v: ptr GLbyte): void {.stdcall.}
  glBinormal3dEXT*: proc(bx: GLdouble, by: GLdouble, bz: GLdouble): void {.stdcall.}
  glBinormal3dvEXT*: proc(v: ptr GLdouble): void {.stdcall.}
  glBinormal3fEXT*: proc(bx: GLfloat, by: GLfloat, bz: GLfloat): void {.stdcall.}
  glBinormal3fvEXT*: proc(v: ptr GLfloat): void {.stdcall.}
  glBinormal3iEXT*: proc(bx: GLint, by: GLint, bz: GLint): void {.stdcall.}
  glBinormal3ivEXT*: proc(v: ptr GLint): void {.stdcall.}
  glBinormal3sEXT*: proc(bx: GLshort, by: GLshort, bz: GLshort): void {.stdcall.}
  glBinormal3svEXT*: proc(v: ptr GLshort): void {.stdcall.}
  glBinormalPointerEXT*: proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glBitmap*: proc(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ptr GLubyte): void {.stdcall.}
  glBitmapxOES*: proc(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: ptr GLubyte): void {.stdcall.}
  glBlendBarrier*: proc(): void {.stdcall.}
  glBlendBarrierKHR*: proc(): void {.stdcall.}
  glBlendBarrierNV*: proc(): void {.stdcall.}
  glBlendColor*: proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}
  glBlendColorEXT*: proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}
  glBlendColorxOES*: proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}
  glBlendEquation*: proc(mode: GLenum): void {.stdcall.}
  glBlendEquationEXT*: proc(mode: GLenum): void {.stdcall.}
  glBlendEquationIndexedAMD*: proc(buf: GLuint, mode: GLenum): void {.stdcall.}
  glBlendEquationOES*: proc(mode: GLenum): void {.stdcall.}
  glBlendEquationSeparate*: proc(modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationSeparateEXT*: proc(modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationSeparateIndexedAMD*: proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationSeparateOES*: proc(modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationSeparatei*: proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationSeparateiARB*: proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationSeparateiEXT*: proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationSeparateiOES*: proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}
  glBlendEquationi*: proc(buf: GLuint, mode: GLenum): void {.stdcall.}
  glBlendEquationiARB*: proc(buf: GLuint, mode: GLenum): void {.stdcall.}
  glBlendEquationiEXT*: proc(buf: GLuint, mode: GLenum): void {.stdcall.}
  glBlendEquationiOES*: proc(buf: GLuint, mode: GLenum): void {.stdcall.}
  glBlendFunc*: proc(sfactor: GLenum, dfactor: GLenum): void {.stdcall.}
  glBlendFuncIndexedAMD*: proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}
  glBlendFuncSeparate*: proc(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparateEXT*: proc(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparateINGR*: proc(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparateIndexedAMD*: proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparateOES*: proc(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparatei*: proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparateiARB*: proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparateiEXT*: proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}
  glBlendFuncSeparateiOES*: proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}
  glBlendFunci*: proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}
  glBlendFunciARB*: proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}
  glBlendFunciEXT*: proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}
  glBlendFunciOES*: proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}
  glBlendParameteriNV*: proc(pname: GLenum, value: GLint): void {.stdcall.}
  glBlitFramebuffer*: proc(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}
  glBlitFramebufferANGLE*: proc(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}
  glBlitFramebufferEXT*: proc(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}
  glBlitFramebufferNV*: proc(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}
  glBlitNamedFramebuffer*: proc(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}
  glBufferAddressRangeNV*: proc(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr): void {.stdcall.}
  glBufferAttachMemoryNV*: proc(target: GLenum, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glBufferData*: proc(target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum): void {.stdcall.}
  glBufferDataARB*: proc(target: GLenum, size: GLsizeiptrARB, data: pointer, usage: GLenum): void {.stdcall.}
  glBufferPageCommitmentARB*: proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void {.stdcall.}
  glBufferParameteriAPPLE*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glBufferStorage*: proc(target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}
  glBufferStorageEXT*: proc(target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}
  glBufferStorageExternalEXT*: proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: pointer, flags: GLbitfield): void {.stdcall.}
  glBufferStorageMemEXT*: proc(target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glBufferSubData*: proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glBufferSubDataARB*: proc(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer): void {.stdcall.}
  glCallCommandListNV*: proc(list: GLuint): void {.stdcall.}
  glCallList*: proc(list: GLuint): void {.stdcall.}
  glCallLists*: proc(n: GLsizei, `type`: GLenum, lists: pointer): void {.stdcall.}
  glCheckFramebufferStatus*: proc(target: GLenum): GLenum {.stdcall.}
  glCheckFramebufferStatusEXT*: proc(target: GLenum): GLenum {.stdcall.}
  glCheckFramebufferStatusOES*: proc(target: GLenum): GLenum {.stdcall.}
  glCheckNamedFramebufferStatus*: proc(framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}
  glCheckNamedFramebufferStatusEXT*: proc(framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}
  glClampColor*: proc(target: GLenum, clamp: GLenum): void {.stdcall.}
  glClampColorARB*: proc(target: GLenum, clamp: GLenum): void {.stdcall.}
  glClear*: proc(mask: GLbitfield): void {.stdcall.}
  glClearAccum*: proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}
  glClearAccumxOES*: proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}
  glClearBufferData*: proc(target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearBufferSubData*: proc(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearBufferfi*: proc(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void {.stdcall.}
  glClearBufferfv*: proc(buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat): void {.stdcall.}
  glClearBufferiv*: proc(buffer: GLenum, drawbuffer: GLint, value: ptr GLint): void {.stdcall.}
  glClearBufferuiv*: proc(buffer: GLenum, drawbuffer: GLint, value: ptr GLuint): void {.stdcall.}
  glClearColor*: proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}
  glClearColorIiEXT*: proc(red: GLint, green: GLint, blue: GLint, alpha: GLint): void {.stdcall.}
  glClearColorIuiEXT*: proc(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint): void {.stdcall.}
  glClearColorx*: proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}
  glClearColorxOES*: proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}
  glClearDepth*: proc(depth: GLdouble): void {.stdcall.}
  glClearDepthdNV*: proc(depth: GLdouble): void {.stdcall.}
  glClearDepthf*: proc(d: GLfloat): void {.stdcall.}
  glClearDepthfOES*: proc(depth: GLclampf): void {.stdcall.}
  glClearDepthx*: proc(depth: GLfixed): void {.stdcall.}
  glClearDepthxOES*: proc(depth: GLfixed): void {.stdcall.}
  glClearIndex*: proc(c: GLfloat): void {.stdcall.}
  glClearNamedBufferData*: proc(buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearNamedBufferDataEXT*: proc(buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearNamedBufferSubData*: proc(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearNamedBufferSubDataEXT*: proc(buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearNamedFramebufferfi*: proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void {.stdcall.}
  glClearNamedFramebufferfv*: proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat): void {.stdcall.}
  glClearNamedFramebufferiv*: proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint): void {.stdcall.}
  glClearNamedFramebufferuiv*: proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint): void {.stdcall.}
  glClearPixelLocalStorageuiEXT*: proc(offset: GLsizei, n: GLsizei, values: ptr GLuint): void {.stdcall.}
  glClearStencil*: proc(s: GLint): void {.stdcall.}
  glClearTexImage*: proc(texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearTexImageEXT*: proc(texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearTexSubImage*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClearTexSubImageEXT*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glClientActiveTexture*: proc(texture: GLenum): void {.stdcall.}
  glClientActiveTextureARB*: proc(texture: GLenum): void {.stdcall.}
  glClientActiveVertexStreamATI*: proc(stream: GLenum): void {.stdcall.}
  glClientAttribDefaultEXT*: proc(mask: GLbitfield): void {.stdcall.}
  glClientWaitSemaphoreui64NVX*: proc(fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64): void {.stdcall.}
  glClientWaitSync*: proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}
  glClientWaitSyncAPPLE*: proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}
  glClipControl*: proc(origin: GLenum, depth: GLenum): void {.stdcall.}
  glClipControlEXT*: proc(origin: GLenum, depth: GLenum): void {.stdcall.}
  glClipPlane*: proc(plane: GLenum, equation: ptr GLdouble): void {.stdcall.}
  glClipPlanef*: proc(p: GLenum, eqn: ptr GLfloat): void {.stdcall.}
  glClipPlanefIMG*: proc(p: GLenum, eqn: ptr GLfloat): void {.stdcall.}
  glClipPlanefOES*: proc(plane: GLenum, equation: ptr GLfloat): void {.stdcall.}
  glClipPlanex*: proc(plane: GLenum, equation: ptr GLfixed): void {.stdcall.}
  glClipPlanexIMG*: proc(p: GLenum, eqn: ptr GLfixed): void {.stdcall.}
  glClipPlanexOES*: proc(plane: GLenum, equation: ptr GLfixed): void {.stdcall.}
  glColor3b*: proc(red: GLbyte, green: GLbyte, blue: GLbyte): void {.stdcall.}
  glColor3bv*: proc(v: ptr GLbyte): void {.stdcall.}
  glColor3d*: proc(red: GLdouble, green: GLdouble, blue: GLdouble): void {.stdcall.}
  glColor3dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glColor3f*: proc(red: GLfloat, green: GLfloat, blue: GLfloat): void {.stdcall.}
  glColor3fVertex3fSUN*: proc(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glColor3fVertex3fvSUN*: proc(c: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glColor3fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glColor3hNV*: proc(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV): void {.stdcall.}
  glColor3hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glColor3i*: proc(red: GLint, green: GLint, blue: GLint): void {.stdcall.}
  glColor3iv*: proc(v: ptr GLint): void {.stdcall.}
  glColor3s*: proc(red: GLshort, green: GLshort, blue: GLshort): void {.stdcall.}
  glColor3sv*: proc(v: ptr GLshort): void {.stdcall.}
  glColor3ub*: proc(red: GLubyte, green: GLubyte, blue: GLubyte): void {.stdcall.}
  glColor3ubv*: proc(v: ptr GLubyte): void {.stdcall.}
  glColor3ui*: proc(red: GLuint, green: GLuint, blue: GLuint): void {.stdcall.}
  glColor3uiv*: proc(v: ptr GLuint): void {.stdcall.}
  glColor3us*: proc(red: GLushort, green: GLushort, blue: GLushort): void {.stdcall.}
  glColor3usv*: proc(v: ptr GLushort): void {.stdcall.}
  glColor3xOES*: proc(red: GLfixed, green: GLfixed, blue: GLfixed): void {.stdcall.}
  glColor3xvOES*: proc(components: ptr GLfixed): void {.stdcall.}
  glColor4b*: proc(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte): void {.stdcall.}
  glColor4bv*: proc(v: ptr GLbyte): void {.stdcall.}
  glColor4d*: proc(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble): void {.stdcall.}
  glColor4dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glColor4f*: proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}
  glColor4fNormal3fVertex3fSUN*: proc(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glColor4fNormal3fVertex3fvSUN*: proc(c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glColor4fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glColor4hNV*: proc(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV): void {.stdcall.}
  glColor4hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glColor4i*: proc(red: GLint, green: GLint, blue: GLint, alpha: GLint): void {.stdcall.}
  glColor4iv*: proc(v: ptr GLint): void {.stdcall.}
  glColor4s*: proc(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort): void {.stdcall.}
  glColor4sv*: proc(v: ptr GLshort): void {.stdcall.}
  glColor4ub*: proc(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte): void {.stdcall.}
  glColor4ubVertex2fSUN*: proc(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat): void {.stdcall.}
  glColor4ubVertex2fvSUN*: proc(c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}
  glColor4ubVertex3fSUN*: proc(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glColor4ubVertex3fvSUN*: proc(c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}
  glColor4ubv*: proc(v: ptr GLubyte): void {.stdcall.}
  glColor4ui*: proc(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint): void {.stdcall.}
  glColor4uiv*: proc(v: ptr GLuint): void {.stdcall.}
  glColor4us*: proc(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort): void {.stdcall.}
  glColor4usv*: proc(v: ptr GLushort): void {.stdcall.}
  glColor4x*: proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}
  glColor4xOES*: proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}
  glColor4xvOES*: proc(components: ptr GLfixed): void {.stdcall.}
  glColorFormatNV*: proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}
  glColorFragmentOp1ATI*: proc(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint): void {.stdcall.}
  glColorFragmentOp2ATI*: proc(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint): void {.stdcall.}
  glColorFragmentOp3ATI*: proc(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint): void {.stdcall.}
  glColorMask*: proc(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void {.stdcall.}
  glColorMaskIndexedEXT*: proc(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void {.stdcall.}
  glColorMaski*: proc(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void {.stdcall.}
  glColorMaskiEXT*: proc(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void {.stdcall.}
  glColorMaskiOES*: proc(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void {.stdcall.}
  glColorMaterial*: proc(face: GLenum, mode: GLenum): void {.stdcall.}
  glColorP3ui*: proc(`type`: GLenum, color: GLuint): void {.stdcall.}
  glColorP3uiv*: proc(`type`: GLenum, color: ptr GLuint): void {.stdcall.}
  glColorP4ui*: proc(`type`: GLenum, color: GLuint): void {.stdcall.}
  glColorP4uiv*: proc(`type`: GLenum, color: ptr GLuint): void {.stdcall.}
  glColorPointer*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glColorPointerEXT*: proc(size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}
  glColorPointerListIBM*: proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}
  glColorPointervINTEL*: proc(size: GLint, `type`: GLenum, pointer: ptr pointer): void {.stdcall.}
  glColorSubTable*: proc(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glColorSubTableEXT*: proc(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glColorTable*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}
  glColorTableEXT*: proc(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}
  glColorTableParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glColorTableParameterfvSGI*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glColorTableParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glColorTableParameterivSGI*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glColorTableSGI*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}
  glCombinerInputNV*: proc(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum): void {.stdcall.}
  glCombinerOutputNV*: proc(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean): void {.stdcall.}
  glCombinerParameterfNV*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glCombinerParameterfvNV*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glCombinerParameteriNV*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glCombinerParameterivNV*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glCombinerStageParameterfvNV*: proc(stage: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glCommandListSegmentsNV*: proc(list: GLuint, segments: GLuint): void {.stdcall.}
  glCompileCommandListNV*: proc(list: GLuint): void {.stdcall.}
  glCompileShader*: proc(shader: GLuint): void {.stdcall.}
  glCompileShaderARB*: proc(shaderObj: GLhandleARB): void {.stdcall.}
  glCompileShaderIncludeARB*: proc(shader: GLuint, count: GLsizei, path: ptr cstring, length: ptr GLint): void {.stdcall.}
  glCompressedMultiTexImage1DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedMultiTexImage2DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedMultiTexImage3DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedMultiTexSubImage1DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedMultiTexSubImage2DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedMultiTexSubImage3DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedTexImage1D*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexImage1DARB*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexImage2D*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexImage2DARB*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexImage3D*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexImage3DARB*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexImage3DOES*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexSubImage1D*: proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexSubImage1DARB*: proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexSubImage2D*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexSubImage2DARB*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexSubImage3D*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexSubImage3DARB*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTexSubImage3DOES*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTextureImage1DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedTextureImage2DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedTextureImage3DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedTextureSubImage1D*: proc(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTextureSubImage1DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedTextureSubImage2D*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTextureSubImage2DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glCompressedTextureSubImage3D*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}
  glCompressedTextureSubImage3DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}
  glConservativeRasterParameterfNV*: proc(pname: GLenum, value: GLfloat): void {.stdcall.}
  glConservativeRasterParameteriNV*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glConvolutionFilter1D*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}
  glConvolutionFilter1DEXT*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}
  glConvolutionFilter2D*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}
  glConvolutionFilter2DEXT*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}
  glConvolutionParameterf*: proc(target: GLenum, pname: GLenum, params: GLfloat): void {.stdcall.}
  glConvolutionParameterfEXT*: proc(target: GLenum, pname: GLenum, params: GLfloat): void {.stdcall.}
  glConvolutionParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glConvolutionParameterfvEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glConvolutionParameteri*: proc(target: GLenum, pname: GLenum, params: GLint): void {.stdcall.}
  glConvolutionParameteriEXT*: proc(target: GLenum, pname: GLenum, params: GLint): void {.stdcall.}
  glConvolutionParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glConvolutionParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glConvolutionParameterxOES*: proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glConvolutionParameterxvOES*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glCopyBufferSubData*: proc(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glCopyBufferSubDataNV*: proc(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glCopyColorSubTable*: proc(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyColorSubTableEXT*: proc(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyColorTable*: proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyColorTableSGI*: proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyConvolutionFilter1D*: proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyConvolutionFilter1DEXT*: proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyConvolutionFilter2D*: proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyConvolutionFilter2DEXT*: proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyImageSubData*: proc(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void {.stdcall.}
  glCopyImageSubDataEXT*: proc(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void {.stdcall.}
  glCopyImageSubDataNV*: proc(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}
  glCopyImageSubDataOES*: proc(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void {.stdcall.}
  glCopyMultiTexImage1DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}
  glCopyMultiTexImage2DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}
  glCopyMultiTexSubImage1DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyMultiTexSubImage2DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyMultiTexSubImage3DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyNamedBufferSubData*: proc(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glCopyPathNV*: proc(resultPath: GLuint, srcPath: GLuint): void {.stdcall.}
  glCopyPixels*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, `type`: GLenum): void {.stdcall.}
  glCopyTexImage1D*: proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}
  glCopyTexImage1DEXT*: proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}
  glCopyTexImage2D*: proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}
  glCopyTexImage2DEXT*: proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}
  glCopyTexSubImage1D*: proc(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyTexSubImage1DEXT*: proc(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyTexSubImage2D*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTexSubImage2DEXT*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTexSubImage3D*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTexSubImage3DEXT*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTexSubImage3DOES*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTextureImage1DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}
  glCopyTextureImage2DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}
  glCopyTextureLevelsAPPLE*: proc(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei): void {.stdcall.}
  glCopyTextureSubImage1D*: proc(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyTextureSubImage1DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}
  glCopyTextureSubImage2D*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTextureSubImage2DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTextureSubImage3D*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCopyTextureSubImage3DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glCoverFillPathInstancedNV*: proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}
  glCoverFillPathNV*: proc(path: GLuint, coverMode: GLenum): void {.stdcall.}
  glCoverStrokePathInstancedNV*: proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}
  glCoverStrokePathNV*: proc(path: GLuint, coverMode: GLenum): void {.stdcall.}
  glCoverageMaskNV*: proc(mask: GLboolean): void {.stdcall.}
  glCoverageModulationNV*: proc(components: GLenum): void {.stdcall.}
  glCoverageModulationTableNV*: proc(n: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glCoverageOperationNV*: proc(operation: GLenum): void {.stdcall.}
  glCreateBuffers*: proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}
  glCreateCommandListsNV*: proc(n: GLsizei, lists: ptr GLuint): void {.stdcall.}
  glCreateFramebuffers*: proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}
  glCreateMemoryObjectsEXT*: proc(n: GLsizei, memoryObjects: ptr GLuint): void {.stdcall.}
  glCreatePerfQueryINTEL*: proc(queryId: GLuint, queryHandle: ptr GLuint): void {.stdcall.}
  glCreateProgram*: proc(): GLuint {.stdcall.}
  glCreateProgramObjectARB*: proc(): GLhandleARB {.stdcall.}
  glCreateProgramPipelines*: proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}
  glCreateProgressFenceNVX*: proc(): GLuint {.stdcall.}
  glCreateQueries*: proc(target: GLenum, n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glCreateRenderbuffers*: proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}
  glCreateSamplers*: proc(n: GLsizei, samplers: ptr GLuint): void {.stdcall.}
  glCreateShader*: proc(`type`: GLenum): GLuint {.stdcall.}
  glCreateShaderObjectARB*: proc(shaderType: GLenum): GLhandleARB {.stdcall.}
  glCreateShaderProgramEXT*: proc(`type`: GLenum, string: cstring): GLuint {.stdcall.}
  glCreateShaderProgramv*: proc(`type`: GLenum, count: GLsizei, strings: ptr cstring): GLuint {.stdcall.}
  glCreateShaderProgramvEXT*: proc(`type`: GLenum, count: GLsizei, strings: ptr cstring): GLuint {.stdcall.}
  glCreateStatesNV*: proc(n: GLsizei, states: ptr GLuint): void {.stdcall.}
  glCreateSyncFromCLeventARB*: proc(context: ClContext, event: ClEvent, flags: GLbitfield): GLsync {.stdcall.}
  glCreateTextures*: proc(target: GLenum, n: GLsizei, textures: ptr GLuint): void {.stdcall.}
  glCreateTransformFeedbacks*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glCreateVertexArrays*: proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}
  glCullFace*: proc(mode: GLenum): void {.stdcall.}
  glCullParameterdvEXT*: proc(pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glCullParameterfvEXT*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glCurrentPaletteMatrixARB*: proc(index: GLint): void {.stdcall.}
  glCurrentPaletteMatrixOES*: proc(matrixpaletteindex: GLuint): void {.stdcall.}
  glDebugMessageCallback*: proc(callback: GLDEBUGPROC, userParam: pointer): void {.stdcall.}
  glDebugMessageCallbackAMD*: proc(callback: GLDEBUGPROCAMD, userParam: pointer): void {.stdcall.}
  glDebugMessageCallbackARB*: proc(callback: GLDEBUGPROCARB, userParam: pointer): void {.stdcall.}
  glDebugMessageCallbackKHR*: proc(callback: GLDEBUGPROCKHR, userParam: pointer): void {.stdcall.}
  glDebugMessageControl*: proc(source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}
  glDebugMessageControlARB*: proc(source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}
  glDebugMessageControlKHR*: proc(source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}
  glDebugMessageEnableAMD*: proc(category: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}
  glDebugMessageInsert*: proc(source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring): void {.stdcall.}
  glDebugMessageInsertAMD*: proc(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: cstring): void {.stdcall.}
  glDebugMessageInsertARB*: proc(source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring): void {.stdcall.}
  glDebugMessageInsertKHR*: proc(source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring): void {.stdcall.}
  glDeformSGIX*: proc(mask: GLbitfield): void {.stdcall.}
  glDeformationMap3dSGIX*: proc(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: ptr GLdouble): void {.stdcall.}
  glDeformationMap3fSGIX*: proc(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: ptr GLfloat): void {.stdcall.}
  glDeleteAsyncMarkersSGIX*: proc(marker: GLuint, range: GLsizei): void {.stdcall.}
  glDeleteBuffers*: proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}
  glDeleteBuffersARB*: proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}
  glDeleteCommandListsNV*: proc(n: GLsizei, lists: ptr GLuint): void {.stdcall.}
  glDeleteFencesAPPLE*: proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}
  glDeleteFencesNV*: proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}
  glDeleteFragmentShaderATI*: proc(id: GLuint): void {.stdcall.}
  glDeleteFramebuffers*: proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}
  glDeleteFramebuffersEXT*: proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}
  glDeleteFramebuffersOES*: proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}
  glDeleteLists*: proc(list: GLuint, range: GLsizei): void {.stdcall.}
  glDeleteMemoryObjectsEXT*: proc(n: GLsizei, memoryObjects: ptr GLuint): void {.stdcall.}
  glDeleteNamedStringARB*: proc(namelen: GLint, name: cstring): void {.stdcall.}
  glDeleteNamesAMD*: proc(identifier: GLenum, num: GLuint, names: ptr GLuint): void {.stdcall.}
  glDeleteObjectARB*: proc(obj: GLhandleARB): void {.stdcall.}
  glDeleteOcclusionQueriesNV*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glDeletePathsNV*: proc(path: GLuint, range: GLsizei): void {.stdcall.}
  glDeletePerfMonitorsAMD*: proc(n: GLsizei, monitors: ptr GLuint): void {.stdcall.}
  glDeletePerfQueryINTEL*: proc(queryHandle: GLuint): void {.stdcall.}
  glDeleteProgram*: proc(program: GLuint): void {.stdcall.}
  glDeleteProgramPipelines*: proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}
  glDeleteProgramPipelinesEXT*: proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}
  glDeleteProgramsARB*: proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}
  glDeleteProgramsNV*: proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}
  glDeleteQueries*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glDeleteQueriesARB*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glDeleteQueriesEXT*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glDeleteQueryResourceTagNV*: proc(n: GLsizei, tagIds: ptr GLint): void {.stdcall.}
  glDeleteRenderbuffers*: proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}
  glDeleteRenderbuffersEXT*: proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}
  glDeleteRenderbuffersOES*: proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}
  glDeleteSamplers*: proc(count: GLsizei, samplers: ptr GLuint): void {.stdcall.}
  glDeleteSemaphoresEXT*: proc(n: GLsizei, semaphores: ptr GLuint): void {.stdcall.}
  glDeleteShader*: proc(shader: GLuint): void {.stdcall.}
  glDeleteStatesNV*: proc(n: GLsizei, states: ptr GLuint): void {.stdcall.}
  glDeleteSync*: proc(sync: GLsync): void {.stdcall.}
  glDeleteSyncAPPLE*: proc(sync: GLsync): void {.stdcall.}
  glDeleteTextures*: proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}
  glDeleteTexturesEXT*: proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}
  glDeleteTransformFeedbacks*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glDeleteTransformFeedbacksNV*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glDeleteVertexArrays*: proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}
  glDeleteVertexArraysAPPLE*: proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}
  glDeleteVertexArraysOES*: proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}
  glDeleteVertexShaderEXT*: proc(id: GLuint): void {.stdcall.}
  glDepthBoundsEXT*: proc(zmin: GLclampd, zmax: GLclampd): void {.stdcall.}
  glDepthBoundsdNV*: proc(zmin: GLdouble, zmax: GLdouble): void {.stdcall.}
  glDepthFunc*: proc(`func`: GLenum): void {.stdcall.}
  glDepthMask*: proc(flag: GLboolean): void {.stdcall.}
  glDepthRange*: proc(n: GLdouble, f: GLdouble): void {.stdcall.}
  glDepthRangeArrayfvNV*: proc(first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glDepthRangeArrayfvOES*: proc(first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glDepthRangeArrayv*: proc(first: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glDepthRangeIndexed*: proc(index: GLuint, n: GLdouble, f: GLdouble): void {.stdcall.}
  glDepthRangeIndexedfNV*: proc(index: GLuint, n: GLfloat, f: GLfloat): void {.stdcall.}
  glDepthRangeIndexedfOES*: proc(index: GLuint, n: GLfloat, f: GLfloat): void {.stdcall.}
  glDepthRangedNV*: proc(zNear: GLdouble, zFar: GLdouble): void {.stdcall.}
  glDepthRangef*: proc(n: GLfloat, f: GLfloat): void {.stdcall.}
  glDepthRangefOES*: proc(n: GLclampf, f: GLclampf): void {.stdcall.}
  glDepthRangex*: proc(n: GLfixed, f: GLfixed): void {.stdcall.}
  glDepthRangexOES*: proc(n: GLfixed, f: GLfixed): void {.stdcall.}
  glDetachObjectARB*: proc(containerObj: GLhandleARB, attachedObj: GLhandleARB): void {.stdcall.}
  glDetachShader*: proc(program: GLuint, shader: GLuint): void {.stdcall.}
  glDetailTexFuncSGIS*: proc(target: GLenum, n: GLsizei, points: ptr GLfloat): void {.stdcall.}
  glDisable*: proc(cap: GLenum): void {.stdcall.}
  glDisableClientState*: proc(array: GLenum): void {.stdcall.}
  glDisableClientStateIndexedEXT*: proc(array: GLenum, index: GLuint): void {.stdcall.}
  glDisableClientStateiEXT*: proc(array: GLenum, index: GLuint): void {.stdcall.}
  glDisableDriverControlQCOM*: proc(driverControl: GLuint): void {.stdcall.}
  glDisableIndexedEXT*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glDisableVariantClientStateEXT*: proc(id: GLuint): void {.stdcall.}
  glDisableVertexArrayAttrib*: proc(vaobj: GLuint, index: GLuint): void {.stdcall.}
  glDisableVertexArrayAttribEXT*: proc(vaobj: GLuint, index: GLuint): void {.stdcall.}
  glDisableVertexArrayEXT*: proc(vaobj: GLuint, array: GLenum): void {.stdcall.}
  glDisableVertexAttribAPPLE*: proc(index: GLuint, pname: GLenum): void {.stdcall.}
  glDisableVertexAttribArray*: proc(index: GLuint): void {.stdcall.}
  glDisableVertexAttribArrayARB*: proc(index: GLuint): void {.stdcall.}
  glDisablei*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glDisableiEXT*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glDisableiNV*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glDisableiOES*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glDiscardFramebufferEXT*: proc(target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum): void {.stdcall.}
  glDispatchCompute*: proc(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint): void {.stdcall.}
  glDispatchComputeGroupSizeARB*: proc(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint): void {.stdcall.}
  glDispatchComputeIndirect*: proc(indirect: GLintptr): void {.stdcall.}
  glDrawArrays*: proc(mode: GLenum, first: GLint, count: GLsizei): void {.stdcall.}
  glDrawArraysEXT*: proc(mode: GLenum, first: GLint, count: GLsizei): void {.stdcall.}
  glDrawArraysIndirect*: proc(mode: GLenum, indirect: pointer): void {.stdcall.}
  glDrawArraysInstanced*: proc(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei): void {.stdcall.}
  glDrawArraysInstancedANGLE*: proc(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void {.stdcall.}
  glDrawArraysInstancedARB*: proc(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void {.stdcall.}
  glDrawArraysInstancedBaseInstance*: proc(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}
  glDrawArraysInstancedBaseInstanceEXT*: proc(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}
  glDrawArraysInstancedEXT*: proc(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei): void {.stdcall.}
  glDrawArraysInstancedNV*: proc(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void {.stdcall.}
  glDrawBuffer*: proc(buf: GLenum): void {.stdcall.}
  glDrawBuffers*: proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}
  glDrawBuffersARB*: proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}
  glDrawBuffersATI*: proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}
  glDrawBuffersEXT*: proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}
  glDrawBuffersIndexedEXT*: proc(n: GLint, location: ptr GLenum, indices: ptr GLint): void {.stdcall.}
  glDrawBuffersNV*: proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}
  glDrawCommandsAddressNV*: proc(primitiveMode: GLenum, indirects: ptr GLuint64, sizes: ptr GLsizei, count: GLuint): void {.stdcall.}
  glDrawCommandsNV*: proc(primitiveMode: GLenum, buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, count: GLuint): void {.stdcall.}
  glDrawCommandsStatesAddressNV*: proc(indirects: ptr GLuint64, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint): void {.stdcall.}
  glDrawCommandsStatesNV*: proc(buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint): void {.stdcall.}
  glDrawElementArrayAPPLE*: proc(mode: GLenum, first: GLint, count: GLsizei): void {.stdcall.}
  glDrawElementArrayATI*: proc(mode: GLenum, count: GLsizei): void {.stdcall.}
  glDrawElements*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer): void {.stdcall.}
  glDrawElementsBaseVertex*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}
  glDrawElementsBaseVertexEXT*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}
  glDrawElementsBaseVertexOES*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}
  glDrawElementsIndirect*: proc(mode: GLenum, `type`: GLenum, indirect: pointer): void {.stdcall.}
  glDrawElementsInstanced*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei): void {.stdcall.}
  glDrawElementsInstancedANGLE*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei): void {.stdcall.}
  glDrawElementsInstancedARB*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei): void {.stdcall.}
  glDrawElementsInstancedBaseInstance*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}
  glDrawElementsInstancedBaseInstanceEXT*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}
  glDrawElementsInstancedBaseVertex*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint): void {.stdcall.}
  glDrawElementsInstancedBaseVertexBaseInstance*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint): void {.stdcall.}
  glDrawElementsInstancedBaseVertexBaseInstanceEXT*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint): void {.stdcall.}
  glDrawElementsInstancedBaseVertexEXT*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint): void {.stdcall.}
  glDrawElementsInstancedBaseVertexOES*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint): void {.stdcall.}
  glDrawElementsInstancedEXT*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei): void {.stdcall.}
  glDrawElementsInstancedNV*: proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei): void {.stdcall.}
  glDrawMeshArraysSUN*: proc(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei): void {.stdcall.}
  glDrawMeshTasksNV*: proc(first: GLuint, count: GLuint): void {.stdcall.}
  glDrawMeshTasksIndirectNV*: proc(indirect: GLintptr): void {.stdcall.}
  glDrawPixels*: proc(width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glDrawRangeElementArrayAPPLE*: proc(mode: GLenum, start: GLuint, `end`: GLuint, first: GLint, count: GLsizei): void {.stdcall.}
  glDrawRangeElementArrayATI*: proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei): void {.stdcall.}
  glDrawRangeElements*: proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer): void {.stdcall.}
  glDrawRangeElementsBaseVertex*: proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}
  glDrawRangeElementsBaseVertexEXT*: proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}
  glDrawRangeElementsBaseVertexOES*: proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}
  glDrawRangeElementsEXT*: proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer): void {.stdcall.}
  glDrawTexfOES*: proc(x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat): void {.stdcall.}
  glDrawTexfvOES*: proc(coords: ptr GLfloat): void {.stdcall.}
  glDrawTexiOES*: proc(x: GLint, y: GLint, z: GLint, width: GLint, height: GLint): void {.stdcall.}
  glDrawTexivOES*: proc(coords: ptr GLint): void {.stdcall.}
  glDrawTexsOES*: proc(x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort): void {.stdcall.}
  glDrawTexsvOES*: proc(coords: ptr GLshort): void {.stdcall.}
  glDrawTextureNV*: proc(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat): void {.stdcall.}
  glDrawTexxOES*: proc(x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed): void {.stdcall.}
  glDrawTexxvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glDrawTransformFeedback*: proc(mode: GLenum, id: GLuint): void {.stdcall.}
  glDrawTransformFeedbackEXT*: proc(mode: GLenum, id: GLuint): void {.stdcall.}
  glDrawTransformFeedbackInstanced*: proc(mode: GLenum, id: GLuint, instancecount: GLsizei): void {.stdcall.}
  glDrawTransformFeedbackInstancedEXT*: proc(mode: GLenum, id: GLuint, instancecount: GLsizei): void {.stdcall.}
  glDrawTransformFeedbackNV*: proc(mode: GLenum, id: GLuint): void {.stdcall.}
  glDrawTransformFeedbackStream*: proc(mode: GLenum, id: GLuint, stream: GLuint): void {.stdcall.}
  glDrawTransformFeedbackStreamInstanced*: proc(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei): void {.stdcall.}
  glEGLImageTargetRenderbufferStorageOES*: proc(target: GLenum, image: GLeglImageOES): void {.stdcall.}
  glEGLImageTargetTexStorageEXT*: proc(target: GLenum, image: GLeglImageOES, attrib_list: ptr GLint): void {.stdcall.}
  glEGLImageTargetTexture2DOES*: proc(target: GLenum, image: GLeglImageOES): void {.stdcall.}
  glEGLImageTargetTextureStorageEXT*: proc(texture: GLuint, image: GLeglImageOES, attrib_list: ptr GLint): void {.stdcall.}
  glEdgeFlag*: proc(flag: GLboolean): void {.stdcall.}
  glEdgeFlagFormatNV*: proc(stride: GLsizei): void {.stdcall.}
  glEdgeFlagPointer*: proc(stride: GLsizei, pointer: pointer): void {.stdcall.}
  glEdgeFlagPointerEXT*: proc(stride: GLsizei, count: GLsizei, pointer: ptr GLboolean): void {.stdcall.}
  glEdgeFlagPointerListIBM*: proc(stride: GLint, pointer: ptr ptr GLboolean, ptrstride: GLint): void {.stdcall.}
  glEdgeFlagv*: proc(flag: ptr GLboolean): void {.stdcall.}
  glElementPointerAPPLE*: proc(`type`: GLenum, pointer: pointer): void {.stdcall.}
  glElementPointerATI*: proc(`type`: GLenum, pointer: pointer): void {.stdcall.}
  glEnable*: proc(cap: GLenum): void {.stdcall.}
  glEnableClientState*: proc(array: GLenum): void {.stdcall.}
  glEnableClientStateIndexedEXT*: proc(array: GLenum, index: GLuint): void {.stdcall.}
  glEnableClientStateiEXT*: proc(array: GLenum, index: GLuint): void {.stdcall.}
  glEnableDriverControlQCOM*: proc(driverControl: GLuint): void {.stdcall.}
  glEnableIndexedEXT*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glEnableVariantClientStateEXT*: proc(id: GLuint): void {.stdcall.}
  glEnableVertexArrayAttrib*: proc(vaobj: GLuint, index: GLuint): void {.stdcall.}
  glEnableVertexArrayAttribEXT*: proc(vaobj: GLuint, index: GLuint): void {.stdcall.}
  glEnableVertexArrayEXT*: proc(vaobj: GLuint, array: GLenum): void {.stdcall.}
  glEnableVertexAttribAPPLE*: proc(index: GLuint, pname: GLenum): void {.stdcall.}
  glEnableVertexAttribArray*: proc(index: GLuint): void {.stdcall.}
  glEnableVertexAttribArrayARB*: proc(index: GLuint): void {.stdcall.}
  glEnablei*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glEnableiEXT*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glEnableiNV*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glEnableiOES*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glEnd*: proc(): void {.stdcall.}
  glEndConditionalRender*: proc(): void {.stdcall.}
  glEndConditionalRenderNV*: proc(): void {.stdcall.}
  glEndConditionalRenderNVX*: proc(): void {.stdcall.}
  glEndFragmentShaderATI*: proc(): void {.stdcall.}
  glEndList*: proc(): void {.stdcall.}
  glEndOcclusionQueryNV*: proc(): void {.stdcall.}
  glEndPerfMonitorAMD*: proc(monitor: GLuint): void {.stdcall.}
  glEndPerfQueryINTEL*: proc(queryHandle: GLuint): void {.stdcall.}
  glEndQuery*: proc(target: GLenum): void {.stdcall.}
  glEndQueryARB*: proc(target: GLenum): void {.stdcall.}
  glEndQueryEXT*: proc(target: GLenum): void {.stdcall.}
  glEndQueryIndexed*: proc(target: GLenum, index: GLuint): void {.stdcall.}
  glEndTilingQCOM*: proc(preserveMask: GLbitfield): void {.stdcall.}
  glEndTransformFeedback*: proc(): void {.stdcall.}
  glEndTransformFeedbackEXT*: proc(): void {.stdcall.}
  glEndTransformFeedbackNV*: proc(): void {.stdcall.}
  glEndVertexShaderEXT*: proc(): void {.stdcall.}
  glEndVideoCaptureNV*: proc(video_capture_slot: GLuint): void {.stdcall.}
  glEvalCoord1d*: proc(u: GLdouble): void {.stdcall.}
  glEvalCoord1dv*: proc(u: ptr GLdouble): void {.stdcall.}
  glEvalCoord1f*: proc(u: GLfloat): void {.stdcall.}
  glEvalCoord1fv*: proc(u: ptr GLfloat): void {.stdcall.}
  glEvalCoord1xOES*: proc(u: GLfixed): void {.stdcall.}
  glEvalCoord1xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glEvalCoord2d*: proc(u: GLdouble, v: GLdouble): void {.stdcall.}
  glEvalCoord2dv*: proc(u: ptr GLdouble): void {.stdcall.}
  glEvalCoord2f*: proc(u: GLfloat, v: GLfloat): void {.stdcall.}
  glEvalCoord2fv*: proc(u: ptr GLfloat): void {.stdcall.}
  glEvalCoord2xOES*: proc(u: GLfixed, v: GLfixed): void {.stdcall.}
  glEvalCoord2xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glEvalMapsNV*: proc(target: GLenum, mode: GLenum): void {.stdcall.}
  glEvalMesh1*: proc(mode: GLenum, i1: GLint, i2: GLint): void {.stdcall.}
  glEvalMesh2*: proc(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint): void {.stdcall.}
  glEvalPoint1*: proc(i: GLint): void {.stdcall.}
  glEvalPoint2*: proc(i: GLint, j: GLint): void {.stdcall.}
  glEvaluateDepthValuesARB*: proc(): void {.stdcall.}
  glExecuteProgramNV*: proc(target: GLenum, id: GLuint, params: ptr GLfloat): void {.stdcall.}
  glExtGetBufferPointervQCOM*: proc(target: GLenum, params: ptr pointer): void {.stdcall.}
  glExtGetBuffersQCOM*: proc(buffers: ptr GLuint, maxBuffers: GLint, numBuffers: ptr GLint): void {.stdcall.}
  glExtGetFramebuffersQCOM*: proc(framebuffers: ptr GLuint, maxFramebuffers: GLint, numFramebuffers: ptr GLint): void {.stdcall.}
  glExtGetProgramBinarySourceQCOM*: proc(program: GLuint, shadertype: GLenum, source: cstring, length: ptr GLint): void {.stdcall.}
  glExtGetProgramsQCOM*: proc(programs: ptr GLuint, maxPrograms: GLint, numPrograms: ptr GLint): void {.stdcall.}
  glExtGetRenderbuffersQCOM*: proc(renderbuffers: ptr GLuint, maxRenderbuffers: GLint, numRenderbuffers: ptr GLint): void {.stdcall.}
  glExtGetShadersQCOM*: proc(shaders: ptr GLuint, maxShaders: GLint, numShaders: ptr GLint): void {.stdcall.}
  glExtGetTexLevelParameterivQCOM*: proc(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glExtGetTexSubImageQCOM*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, texels: pointer): void {.stdcall.}
  glExtGetTexturesQCOM*: proc(textures: ptr GLuint, maxTextures: GLint, numTextures: ptr GLint): void {.stdcall.}
  glExtIsProgramBinaryQCOM*: proc(program: GLuint): GLboolean {.stdcall.}
  glExtTexObjectStateOverrideiQCOM*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glExtractComponentEXT*: proc(res: GLuint, src: GLuint, num: GLuint): void {.stdcall.}
  glFeedbackBuffer*: proc(size: GLsizei, `type`: GLenum, buffer: ptr GLfloat): void {.stdcall.}
  glFeedbackBufferxOES*: proc(n: GLsizei, `type`: GLenum, buffer: ptr GLfixed): void {.stdcall.}
  glFenceSync*: proc(condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}
  glFenceSyncAPPLE*: proc(condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}
  glFinalCombinerInputNV*: proc(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum): void {.stdcall.}
  glFinish*: proc(): void {.stdcall.}
  glFinishAsyncSGIX*: proc(markerp: ptr GLuint): GLint {.stdcall.}
  glFinishFenceAPPLE*: proc(fence: GLuint): void {.stdcall.}
  glFinishFenceNV*: proc(fence: GLuint): void {.stdcall.}
  glFinishObjectAPPLE*: proc(`object`: GLenum, name: GLint): void {.stdcall.}
  glFinishTextureSUNX*: proc(): void {.stdcall.}
  glFlush*: proc(): void {.stdcall.}
  glFlushMappedBufferRange*: proc(target: GLenum, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}
  glFlushMappedBufferRangeAPPLE*: proc(target: GLenum, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glFlushMappedBufferRangeEXT*: proc(target: GLenum, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}
  glFlushMappedNamedBufferRange*: proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}
  glFlushMappedNamedBufferRangeEXT*: proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}
  glFlushPixelDataRangeNV*: proc(target: GLenum): void {.stdcall.}
  glFlushRasterSGIX*: proc(): void {.stdcall.}
  glFlushStaticDataIBM*: proc(target: GLenum): void {.stdcall.}
  glFlushVertexArrayRangeAPPLE*: proc(length: GLsizei, pointer: pointer): void {.stdcall.}
  glFlushVertexArrayRangeNV*: proc(): void {.stdcall.}
  glFogCoordFormatNV*: proc(`type`: GLenum, stride: GLsizei): void {.stdcall.}
  glFogCoordPointer*: proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glFogCoordPointerEXT*: proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glFogCoordPointerListIBM*: proc(`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}
  glFogCoordd*: proc(coord: GLdouble): void {.stdcall.}
  glFogCoorddEXT*: proc(coord: GLdouble): void {.stdcall.}
  glFogCoorddv*: proc(coord: ptr GLdouble): void {.stdcall.}
  glFogCoorddvEXT*: proc(coord: ptr GLdouble): void {.stdcall.}
  glFogCoordf*: proc(coord: GLfloat): void {.stdcall.}
  glFogCoordfEXT*: proc(coord: GLfloat): void {.stdcall.}
  glFogCoordfv*: proc(coord: ptr GLfloat): void {.stdcall.}
  glFogCoordfvEXT*: proc(coord: ptr GLfloat): void {.stdcall.}
  glFogCoordhNV*: proc(fog: GLhalfNV): void {.stdcall.}
  glFogCoordhvNV*: proc(fog: ptr GLhalfNV): void {.stdcall.}
  glFogFuncSGIS*: proc(n: GLsizei, points: ptr GLfloat): void {.stdcall.}
  glFogf*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glFogfv*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glFogi*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glFogiv*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glFogx*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glFogxOES*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glFogxv*: proc(pname: GLenum, param: ptr GLfixed): void {.stdcall.}
  glFogxvOES*: proc(pname: GLenum, param: ptr GLfixed): void {.stdcall.}
  glFragmentColorMaterialSGIX*: proc(face: GLenum, mode: GLenum): void {.stdcall.}
  glFragmentCoverageColorNV*: proc(color: GLuint): void {.stdcall.}
  glFragmentLightModelfSGIX*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glFragmentLightModelfvSGIX*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glFragmentLightModeliSGIX*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glFragmentLightModelivSGIX*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glFragmentLightfSGIX*: proc(light: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glFragmentLightfvSGIX*: proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glFragmentLightiSGIX*: proc(light: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glFragmentLightivSGIX*: proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glFragmentMaterialfSGIX*: proc(face: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glFragmentMaterialfvSGIX*: proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glFragmentMaterialiSGIX*: proc(face: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glFragmentMaterialivSGIX*: proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glFrameTerminatorGREMEDY*: proc(): void {.stdcall.}
  glFrameZoomSGIX*: proc(factor: GLint): void {.stdcall.}
  glFramebufferDrawBufferEXT*: proc(framebuffer: GLuint, mode: GLenum): void {.stdcall.}
  glFramebufferDrawBuffersEXT*: proc(framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum): void {.stdcall.}
  glFramebufferFetchBarrierEXT*: proc(): void {.stdcall.}
  glFramebufferFetchBarrierQCOM*: proc(): void {.stdcall.}
  glFramebufferFoveationConfigQCOM*: proc(framebuffer: GLuint, numLayers: GLuint, focalPointsPerLayer: GLuint, requestedFeatures: GLuint, providedFeatures: ptr GLuint): void {.stdcall.}
  glFramebufferFoveationParametersQCOM*: proc(framebuffer: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat): void {.stdcall.}
  glFramebufferParameteri*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glFramebufferPixelLocalStorageSizeEXT*: proc(target: GLuint, size: GLsizei): void {.stdcall.}
  glFramebufferReadBufferEXT*: proc(framebuffer: GLuint, mode: GLenum): void {.stdcall.}
  glFramebufferRenderbuffer*: proc(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glFramebufferRenderbufferEXT*: proc(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glFramebufferRenderbufferOES*: proc(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glFramebufferSampleLocationsfvARB*: proc(target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glFramebufferSampleLocationsfvNV*: proc(target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glFramebufferSamplePositionsfvAMD*: proc(target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat): void {.stdcall.}
  glFramebufferTexture*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTexture1D*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTexture1DEXT*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTexture2D*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTexture2DEXT*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTexture2DDownsampleIMG*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, xscale: GLint, yscale: GLint): void {.stdcall.}
  glFramebufferTexture2DMultisampleEXT*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei): void {.stdcall.}
  glFramebufferTexture2DMultisampleIMG*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei): void {.stdcall.}
  glFramebufferTexture2DOES*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTexture3D*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}
  glFramebufferTexture3DEXT*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}
  glFramebufferTexture3DOES*: proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}
  glFramebufferTextureARB*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTextureEXT*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFramebufferTextureFaceARB*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void {.stdcall.}
  glFramebufferTextureFaceEXT*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void {.stdcall.}
  glFramebufferTextureLayer*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}
  glFramebufferTextureLayerARB*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}
  glFramebufferTextureLayerEXT*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}
  glFramebufferTextureLayerDownsampleIMG*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint, xscale: GLint, yscale: GLint): void {.stdcall.}
  glFramebufferTextureMultisampleMultiviewOVR*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, samples: GLsizei, baseViewIndex: GLint, numViews: GLsizei): void {.stdcall.}
  glFramebufferTextureMultiviewOVR*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei): void {.stdcall.}
  glFramebufferTextureOES*: proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glFreeObjectBufferATI*: proc(buffer: GLuint): void {.stdcall.}
  glFrontFace*: proc(mode: GLenum): void {.stdcall.}
  glFrustum*: proc(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}
  glFrustumf*: proc(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat): void {.stdcall.}
  glFrustumfOES*: proc(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat): void {.stdcall.}
  glFrustumx*: proc(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed): void {.stdcall.}
  glFrustumxOES*: proc(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed): void {.stdcall.}
  glGenAsyncMarkersSGIX*: proc(range: GLsizei): GLuint {.stdcall.}
  glGenBuffers*: proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}
  glGenBuffersARB*: proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}
  glGenFencesAPPLE*: proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}
  glGenFencesNV*: proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}
  glGenFragmentShadersATI*: proc(range: GLuint): GLuint {.stdcall.}
  glGenFramebuffers*: proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}
  glGenFramebuffersEXT*: proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}
  glGenFramebuffersOES*: proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}
  glGenLists*: proc(range: GLsizei): GLuint {.stdcall.}
  glGenNamesAMD*: proc(identifier: GLenum, num: GLuint, names: ptr GLuint): void {.stdcall.}
  glGenOcclusionQueriesNV*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glGenPathsNV*: proc(range: GLsizei): GLuint {.stdcall.}
  glGenPerfMonitorsAMD*: proc(n: GLsizei, monitors: ptr GLuint): void {.stdcall.}
  glGenProgramPipelines*: proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}
  glGenProgramPipelinesEXT*: proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}
  glGenProgramsARB*: proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}
  glGenProgramsNV*: proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}
  glGenQueries*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glGenQueriesARB*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glGenQueriesEXT*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glGenQueryResourceTagNV*: proc(n: GLsizei, tagIds: ptr GLint): void {.stdcall.}
  glGenRenderbuffers*: proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}
  glGenRenderbuffersEXT*: proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}
  glGenRenderbuffersOES*: proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}
  glGenSamplers*: proc(count: GLsizei, samplers: ptr GLuint): void {.stdcall.}
  glGenSemaphoresEXT*: proc(n: GLsizei, semaphores: ptr GLuint): void {.stdcall.}
  glGenSymbolsEXT*: proc(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint): GLuint {.stdcall.}
  glGenTextures*: proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}
  glGenTexturesEXT*: proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}
  glGenTransformFeedbacks*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glGenTransformFeedbacksNV*: proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}
  glGenVertexArrays*: proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}
  glGenVertexArraysAPPLE*: proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}
  glGenVertexArraysOES*: proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}
  glGenVertexShadersEXT*: proc(range: GLuint): GLuint {.stdcall.}
  glGenerateMipmap*: proc(target: GLenum): void {.stdcall.}
  glGenerateMipmapEXT*: proc(target: GLenum): void {.stdcall.}
  glGenerateMipmapOES*: proc(target: GLenum): void {.stdcall.}
  glGenerateMultiTexMipmapEXT*: proc(texunit: GLenum, target: GLenum): void {.stdcall.}
  glGenerateTextureMipmap*: proc(texture: GLuint): void {.stdcall.}
  glGenerateTextureMipmapEXT*: proc(texture: GLuint, target: GLenum): void {.stdcall.}
  glGetActiveAtomicCounterBufferiv*: proc(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetActiveAttrib*: proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring): void {.stdcall.}
  glGetActiveAttribARB*: proc(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB): void {.stdcall.}
  glGetActiveSubroutineName*: proc(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}
  glGetActiveSubroutineUniformName*: proc(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}
  glGetActiveSubroutineUniformiv*: proc(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint): void {.stdcall.}
  glGetActiveUniform*: proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring): void {.stdcall.}
  glGetActiveUniformARB*: proc(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB): void {.stdcall.}
  glGetActiveUniformBlockName*: proc(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring): void {.stdcall.}
  glGetActiveUniformBlockiv*: proc(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetActiveUniformName*: proc(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring): void {.stdcall.}
  glGetActiveUniformsiv*: proc(program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetActiveVaryingNV*: proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring): void {.stdcall.}
  glGetArrayObjectfvATI*: proc(array: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetArrayObjectivATI*: proc(array: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetAttachedObjectsARB*: proc(containerObj: GLhandleARB, maxCount: GLsizei, count: ptr GLsizei, obj: ptr GLhandleARB): void {.stdcall.}
  glGetAttachedShaders*: proc(program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint): void {.stdcall.}
  glGetAttribLocation*: proc(program: GLuint, name: cstring): GLint {.stdcall.}
  glGetAttribLocationARB*: proc(programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}
  glGetBooleanIndexedvEXT*: proc(target: GLenum, index: GLuint, data: ptr GLboolean): void {.stdcall.}
  glGetBooleani_v*: proc(target: GLenum, index: GLuint, data: ptr GLboolean): void {.stdcall.}
  glGetBooleanv*: proc(pname: GLenum, data: ptr GLboolean): void {.stdcall.}
  glGetBufferParameteri64v*: proc(target: GLenum, pname: GLenum, params: ptr GLint64): void {.stdcall.}
  glGetBufferParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetBufferParameterivARB*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetBufferParameterui64vNV*: proc(target: GLenum, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}
  glGetBufferPointerv*: proc(target: GLenum, pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetBufferPointervARB*: proc(target: GLenum, pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetBufferPointervOES*: proc(target: GLenum, pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetBufferSubData*: proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glGetBufferSubDataARB*: proc(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer): void {.stdcall.}
  glGetClipPlane*: proc(plane: GLenum, equation: ptr GLdouble): void {.stdcall.}
  glGetClipPlanef*: proc(plane: GLenum, equation: ptr GLfloat): void {.stdcall.}
  glGetClipPlanefOES*: proc(plane: GLenum, equation: ptr GLfloat): void {.stdcall.}
  glGetClipPlanex*: proc(plane: GLenum, equation: ptr GLfixed): void {.stdcall.}
  glGetClipPlanexOES*: proc(plane: GLenum, equation: ptr GLfixed): void {.stdcall.}
  glGetColorTable*: proc(target: GLenum, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}
  glGetColorTableEXT*: proc(target: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}
  glGetColorTableParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetColorTableParameterfvEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetColorTableParameterfvSGI*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetColorTableParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetColorTableParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetColorTableParameterivSGI*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetColorTableSGI*: proc(target: GLenum, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}
  glGetCombinerInputParameterfvNV*: proc(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetCombinerInputParameterivNV*: proc(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetCombinerOutputParameterfvNV*: proc(stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetCombinerOutputParameterivNV*: proc(stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetCombinerStageParameterfvNV*: proc(stage: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetCommandHeaderNV*: proc(tokenID: GLenum, size: GLuint): GLuint {.stdcall.}
  glGetCompressedMultiTexImageEXT*: proc(texunit: GLenum, target: GLenum, lod: GLint, img: pointer): void {.stdcall.}
  glGetCompressedTexImage*: proc(target: GLenum, level: GLint, img: pointer): void {.stdcall.}
  glGetCompressedTexImageARB*: proc(target: GLenum, level: GLint, img: pointer): void {.stdcall.}
  glGetCompressedTextureImage*: proc(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer): void {.stdcall.}
  glGetCompressedTextureImageEXT*: proc(texture: GLuint, target: GLenum, lod: GLint, img: pointer): void {.stdcall.}
  glGetCompressedTextureSubImage*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer): void {.stdcall.}
  glGetConvolutionFilter*: proc(target: GLenum, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}
  glGetConvolutionFilterEXT*: proc(target: GLenum, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}
  glGetConvolutionParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetConvolutionParameterfvEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetConvolutionParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetConvolutionParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetConvolutionParameterxvOES*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetCoverageModulationTableNV*: proc(bufSize: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glGetDebugMessageLog*: proc(count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}
  glGetDebugMessageLogAMD*: proc(count: GLuint, bufSize: GLsizei, categories: ptr GLenum, severities: ptr GLuint, ids: ptr GLuint, lengths: ptr GLsizei, message: cstring): GLuint {.stdcall.}
  glGetDebugMessageLogARB*: proc(count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}
  glGetDebugMessageLogKHR*: proc(count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}
  glGetDetailTexFuncSGIS*: proc(target: GLenum, points: ptr GLfloat): void {.stdcall.}
  glGetDoubleIndexedvEXT*: proc(target: GLenum, index: GLuint, data: ptr GLdouble): void {.stdcall.}
  glGetDoublei_v*: proc(target: GLenum, index: GLuint, data: ptr GLdouble): void {.stdcall.}
  glGetDoublei_vEXT*: proc(pname: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}
  glGetDoublev*: proc(pname: GLenum, data: ptr GLdouble): void {.stdcall.}
  glGetDriverControlStringQCOM*: proc(driverControl: GLuint, bufSize: GLsizei, length: ptr GLsizei, driverControlString: cstring): void {.stdcall.}
  glGetDriverControlsQCOM*: proc(num: ptr GLint, size: GLsizei, driverControls: ptr GLuint): void {.stdcall.}
  glGetError*: proc(): GLenum {.stdcall.}
  glGetFenceivNV*: proc(fence: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFinalCombinerInputParameterfvNV*: proc(variable: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetFinalCombinerInputParameterivNV*: proc(variable: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFirstPerfQueryIdINTEL*: proc(queryId: ptr GLuint): void {.stdcall.}
  glGetFixedv*: proc(pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetFixedvOES*: proc(pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetFloatIndexedvEXT*: proc(target: GLenum, index: GLuint, data: ptr GLfloat): void {.stdcall.}
  glGetFloati_v*: proc(target: GLenum, index: GLuint, data: ptr GLfloat): void {.stdcall.}
  glGetFloati_vEXT*: proc(pname: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}
  glGetFloati_vNV*: proc(target: GLenum, index: GLuint, data: ptr GLfloat): void {.stdcall.}
  glGetFloati_vOES*: proc(target: GLenum, index: GLuint, data: ptr GLfloat): void {.stdcall.}
  glGetFloatv*: proc(pname: GLenum, data: ptr GLfloat): void {.stdcall.}
  glGetFogFuncSGIS*: proc(points: ptr GLfloat): void {.stdcall.}
  glGetFragDataIndex*: proc(program: GLuint, name: cstring): GLint {.stdcall.}
  glGetFragDataIndexEXT*: proc(program: GLuint, name: cstring): GLint {.stdcall.}
  glGetFragDataLocation*: proc(program: GLuint, name: cstring): GLint {.stdcall.}
  glGetFragDataLocationEXT*: proc(program: GLuint, name: cstring): GLint {.stdcall.}
  glGetFragmentLightfvSGIX*: proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetFragmentLightivSGIX*: proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFragmentMaterialfvSGIX*: proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetFragmentMaterialivSGIX*: proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFramebufferAttachmentParameteriv*: proc(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFramebufferAttachmentParameterivEXT*: proc(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFramebufferAttachmentParameterivOES*: proc(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFramebufferParameterfvAMD*: proc(target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat): void {.stdcall.}
  glGetFramebufferParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFramebufferParameterivEXT*: proc(framebuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetFramebufferPixelLocalStorageSizeEXT*: proc(target: GLuint): GLsizei {.stdcall.}
  glGetGraphicsResetStatus*: proc(): GLenum {.stdcall.}
  glGetGraphicsResetStatusARB*: proc(): GLenum {.stdcall.}
  glGetGraphicsResetStatusEXT*: proc(): GLenum {.stdcall.}
  glGetGraphicsResetStatusKHR*: proc(): GLenum {.stdcall.}
  glGetHandleARB*: proc(pname: GLenum): GLhandleARB {.stdcall.}
  glGetHistogram*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}
  glGetHistogramEXT*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}
  glGetHistogramParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetHistogramParameterfvEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetHistogramParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetHistogramParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetHistogramParameterxvOES*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetImageHandleARB*: proc(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}
  glGetImageHandleNV*: proc(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}
  glGetImageTransformParameterfvHP*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetImageTransformParameterivHP*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetInfoLogARB*: proc(obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, infoLog: ptr GLcharARB): void {.stdcall.}
  glGetInstrumentsSGIX*: proc(): GLint {.stdcall.}
  glGetInteger64i_v*: proc(target: GLenum, index: GLuint, data: ptr GLint64): void {.stdcall.}
  glGetInteger64v*: proc(pname: GLenum, data: ptr GLint64): void {.stdcall.}
  glGetInteger64vAPPLE*: proc(pname: GLenum, params: ptr GLint64): void {.stdcall.}
  glGetIntegerIndexedvEXT*: proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}
  glGetIntegeri_v*: proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}
  glGetIntegeri_vEXT*: proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}
  glGetIntegerui64i_vNV*: proc(value: GLenum, index: GLuint, result: ptr GLuint64EXT): void {.stdcall.}
  glGetIntegerui64vNV*: proc(value: GLenum, result: ptr GLuint64EXT): void {.stdcall.}
  glGetIntegerv*: proc(pname: GLenum, data: ptr GLint): void {.stdcall.}
  glGetInternalformatSampleivNV*: proc(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: ptr GLint): void {.stdcall.}
  glGetInternalformati64v*: proc(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64): void {.stdcall.}
  glGetInternalformativ*: proc(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint): void {.stdcall.}
  glGetInvariantBooleanvEXT*: proc(id: GLuint, value: GLenum, data: ptr GLboolean): void {.stdcall.}
  glGetInvariantFloatvEXT*: proc(id: GLuint, value: GLenum, data: ptr GLfloat): void {.stdcall.}
  glGetInvariantIntegervEXT*: proc(id: GLuint, value: GLenum, data: ptr GLint): void {.stdcall.}
  glGetLightfv*: proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetLightiv*: proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetLightxOES*: proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetLightxv*: proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetLightxvOES*: proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetListParameterfvSGIX*: proc(list: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetListParameterivSGIX*: proc(list: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetLocalConstantBooleanvEXT*: proc(id: GLuint, value: GLenum, data: ptr GLboolean): void {.stdcall.}
  glGetLocalConstantFloatvEXT*: proc(id: GLuint, value: GLenum, data: ptr GLfloat): void {.stdcall.}
  glGetLocalConstantIntegervEXT*: proc(id: GLuint, value: GLenum, data: ptr GLint): void {.stdcall.}
  glGetMapAttribParameterfvNV*: proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMapAttribParameterivNV*: proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMapControlPointsNV*: proc(target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: pointer): void {.stdcall.}
  glGetMapParameterfvNV*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMapParameterivNV*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMapdv*: proc(target: GLenum, query: GLenum, v: ptr GLdouble): void {.stdcall.}
  glGetMapfv*: proc(target: GLenum, query: GLenum, v: ptr GLfloat): void {.stdcall.}
  glGetMapiv*: proc(target: GLenum, query: GLenum, v: ptr GLint): void {.stdcall.}
  glGetMapxvOES*: proc(target: GLenum, query: GLenum, v: ptr GLfixed): void {.stdcall.}
  glGetMaterialfv*: proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMaterialiv*: proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMaterialxOES*: proc(face: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glGetMaterialxv*: proc(face: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetMaterialxvOES*: proc(face: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetMemoryObjectDetachedResourcesuivNV*: proc(memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: ptr GLuint): void {.stdcall.}
  glGetMemoryObjectParameterivEXT*: proc(memoryObject: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMinmax*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}
  glGetMinmaxEXT*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}
  glGetMinmaxParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMinmaxParameterfvEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMinmaxParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMinmaxParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMultiTexEnvfvEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMultiTexEnvivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMultiTexGendvEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetMultiTexGenfvEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMultiTexGenivEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMultiTexImageEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glGetMultiTexLevelParameterfvEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMultiTexLevelParameterivEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMultiTexParameterIivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMultiTexParameterIuivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetMultiTexParameterfvEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetMultiTexParameterivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetMultisamplefv*: proc(pname: GLenum, index: GLuint, val: ptr GLfloat): void {.stdcall.}
  glGetMultisamplefvNV*: proc(pname: GLenum, index: GLuint, val: ptr GLfloat): void {.stdcall.}
  glGetNamedBufferParameteri64v*: proc(buffer: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}
  glGetNamedBufferParameteriv*: proc(buffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedBufferParameterivEXT*: proc(buffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedBufferParameterui64vNV*: proc(buffer: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}
  glGetNamedBufferPointerv*: proc(buffer: GLuint, pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetNamedBufferPointervEXT*: proc(buffer: GLuint, pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetNamedBufferSubData*: proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glGetNamedBufferSubDataEXT*: proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glGetNamedFramebufferParameterfvAMD*: proc(framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat): void {.stdcall.}
  glGetNamedFramebufferAttachmentParameteriv*: proc(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedFramebufferAttachmentParameterivEXT*: proc(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedFramebufferParameteriv*: proc(framebuffer: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glGetNamedFramebufferParameterivEXT*: proc(framebuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedProgramLocalParameterIivEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}
  glGetNamedProgramLocalParameterIuivEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}
  glGetNamedProgramLocalParameterdvEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}
  glGetNamedProgramLocalParameterfvEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}
  glGetNamedProgramStringEXT*: proc(program: GLuint, target: GLenum, pname: GLenum, string: pointer): void {.stdcall.}
  glGetNamedProgramivEXT*: proc(program: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedRenderbufferParameteriv*: proc(renderbuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedRenderbufferParameterivEXT*: proc(renderbuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNamedStringARB*: proc(namelen: GLint, name: cstring, bufSize: GLsizei, stringlen: ptr GLint, string: cstring): void {.stdcall.}
  glGetNamedStringivARB*: proc(namelen: GLint, name: cstring, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetNextPerfQueryIdINTEL*: proc(queryId: GLuint, nextQueryId: ptr GLuint): void {.stdcall.}
  glGetObjectBufferfvATI*: proc(buffer: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetObjectBufferivATI*: proc(buffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetObjectLabel*: proc(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}
  glGetObjectLabelEXT*: proc(`type`: GLenum, `object`: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}
  glGetObjectLabelKHR*: proc(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}
  glGetObjectParameterfvARB*: proc(obj: GLhandleARB, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetObjectParameterivAPPLE*: proc(objectType: GLenum, name: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetObjectParameterivARB*: proc(obj: GLhandleARB, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetObjectPtrLabel*: proc(`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}
  glGetObjectPtrLabelKHR*: proc(`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}
  glGetOcclusionQueryivNV*: proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetOcclusionQueryuivNV*: proc(id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetPathColorGenfvNV*: proc(color: GLenum, pname: GLenum, value: ptr GLfloat): void {.stdcall.}
  glGetPathColorGenivNV*: proc(color: GLenum, pname: GLenum, value: ptr GLint): void {.stdcall.}
  glGetPathCommandsNV*: proc(path: GLuint, commands: ptr GLubyte): void {.stdcall.}
  glGetPathCoordsNV*: proc(path: GLuint, coords: ptr GLfloat): void {.stdcall.}
  glGetPathDashArrayNV*: proc(path: GLuint, dashArray: ptr GLfloat): void {.stdcall.}
  glGetPathLengthNV*: proc(path: GLuint, startSegment: GLsizei, numSegments: GLsizei): GLfloat {.stdcall.}
  glGetPathMetricRangeNV*: proc(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: ptr GLfloat): void {.stdcall.}
  glGetPathMetricsNV*: proc(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, stride: GLsizei, metrics: ptr GLfloat): void {.stdcall.}
  glGetPathParameterfvNV*: proc(path: GLuint, pname: GLenum, value: ptr GLfloat): void {.stdcall.}
  glGetPathParameterivNV*: proc(path: GLuint, pname: GLenum, value: ptr GLint): void {.stdcall.}
  glGetPathSpacingNV*: proc(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: ptr GLfloat): void {.stdcall.}
  glGetPathTexGenfvNV*: proc(texCoordSet: GLenum, pname: GLenum, value: ptr GLfloat): void {.stdcall.}
  glGetPathTexGenivNV*: proc(texCoordSet: GLenum, pname: GLenum, value: ptr GLint): void {.stdcall.}
  glGetPerfCounterInfoINTEL*: proc(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: cstring, counterDescLength: GLuint, counterDesc: cstring, counterOffset: ptr GLuint, counterDataSize: ptr GLuint, counterTypeEnum: ptr GLuint, counterDataTypeEnum: ptr GLuint, rawCounterMaxValue: ptr GLuint64): void {.stdcall.}
  glGetPerfMonitorCounterDataAMD*: proc(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: ptr GLuint, bytesWritten: ptr GLint): void {.stdcall.}
  glGetPerfMonitorCounterInfoAMD*: proc(group: GLuint, counter: GLuint, pname: GLenum, data: pointer): void {.stdcall.}
  glGetPerfMonitorCounterStringAMD*: proc(group: GLuint, counter: GLuint, bufSize: GLsizei, length: ptr GLsizei, counterString: cstring): void {.stdcall.}
  glGetPerfMonitorCountersAMD*: proc(group: GLuint, numCounters: ptr GLint, maxActiveCounters: ptr GLint, counterSize: GLsizei, counters: ptr GLuint): void {.stdcall.}
  glGetPerfMonitorGroupStringAMD*: proc(group: GLuint, bufSize: GLsizei, length: ptr GLsizei, groupString: cstring): void {.stdcall.}
  glGetPerfMonitorGroupsAMD*: proc(numGroups: ptr GLint, groupsSize: GLsizei, groups: ptr GLuint): void {.stdcall.}
  glGetPerfQueryDataINTEL*: proc(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: pointer, bytesWritten: ptr GLuint): void {.stdcall.}
  glGetPerfQueryIdByNameINTEL*: proc(queryName: cstring, queryId: ptr GLuint): void {.stdcall.}
  glGetPerfQueryInfoINTEL*: proc(queryId: GLuint, queryNameLength: GLuint, queryName: cstring, dataSize: ptr GLuint, noCounters: ptr GLuint, noInstances: ptr GLuint, capsMask: ptr GLuint): void {.stdcall.}
  glGetPixelMapfv*: proc(map: GLenum, values: ptr GLfloat): void {.stdcall.}
  glGetPixelMapuiv*: proc(map: GLenum, values: ptr GLuint): void {.stdcall.}
  glGetPixelMapusv*: proc(map: GLenum, values: ptr GLushort): void {.stdcall.}
  glGetPixelMapxv*: proc(map: GLenum, size: GLint, values: ptr GLfixed): void {.stdcall.}
  glGetPixelTexGenParameterfvSGIS*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetPixelTexGenParameterivSGIS*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetPixelTransformParameterfvEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetPixelTransformParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetPointerIndexedvEXT*: proc(target: GLenum, index: GLuint, data: ptr pointer): void {.stdcall.}
  glGetPointeri_vEXT*: proc(pname: GLenum, index: GLuint, params: ptr pointer): void {.stdcall.}
  glGetPointerv*: proc(pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetPointervEXT*: proc(pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetPointervKHR*: proc(pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetPolygonStipple*: proc(mask: ptr GLubyte): void {.stdcall.}
  glGetProgramBinary*: proc(program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer): void {.stdcall.}
  glGetProgramBinaryOES*: proc(program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer): void {.stdcall.}
  glGetProgramEnvParameterIivNV*: proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}
  glGetProgramEnvParameterIuivNV*: proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}
  glGetProgramEnvParameterdvARB*: proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}
  glGetProgramEnvParameterfvARB*: proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}
  glGetProgramInfoLog*: proc(program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}
  glGetProgramInterfaceiv*: proc(program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetProgramLocalParameterIivNV*: proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}
  glGetProgramLocalParameterIuivNV*: proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}
  glGetProgramLocalParameterdvARB*: proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}
  glGetProgramLocalParameterfvARB*: proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}
  glGetProgramNamedParameterdvNV*: proc(id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLdouble): void {.stdcall.}
  glGetProgramNamedParameterfvNV*: proc(id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLfloat): void {.stdcall.}
  glGetProgramParameterdvNV*: proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetProgramParameterfvNV*: proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetProgramPipelineInfoLog*: proc(pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}
  glGetProgramPipelineInfoLogEXT*: proc(pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}
  glGetProgramPipelineiv*: proc(pipeline: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetProgramPipelineivEXT*: proc(pipeline: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetProgramResourceIndex*: proc(program: GLuint, programInterface: GLenum, name: cstring): GLuint {.stdcall.}
  glGetProgramResourceLocation*: proc(program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}
  glGetProgramResourceLocationIndex*: proc(program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}
  glGetProgramResourceLocationIndexEXT*: proc(program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}
  glGetProgramResourceName*: proc(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}
  glGetProgramResourcefvNV*: proc(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLfloat): void {.stdcall.}
  glGetProgramResourceiv*: proc(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint): void {.stdcall.}
  glGetProgramStageiv*: proc(program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint): void {.stdcall.}
  glGetProgramStringARB*: proc(target: GLenum, pname: GLenum, string: pointer): void {.stdcall.}
  glGetProgramStringNV*: proc(id: GLuint, pname: GLenum, program: ptr GLubyte): void {.stdcall.}
  glGetProgramSubroutineParameteruivNV*: proc(target: GLenum, index: GLuint, param: ptr GLuint): void {.stdcall.}
  glGetProgramiv*: proc(program: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetProgramivARB*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetProgramivNV*: proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetQueryBufferObjecti64v*: proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}
  glGetQueryBufferObjectiv*: proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}
  glGetQueryBufferObjectui64v*: proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}
  glGetQueryBufferObjectuiv*: proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}
  glGetQueryIndexediv*: proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetQueryObjecti64v*: proc(id: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}
  glGetQueryObjecti64vEXT*: proc(id: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}
  glGetQueryObjectiv*: proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetQueryObjectivARB*: proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetQueryObjectivEXT*: proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetQueryObjectui64v*: proc(id: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}
  glGetQueryObjectui64vEXT*: proc(id: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}
  glGetQueryObjectuiv*: proc(id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetQueryObjectuivARB*: proc(id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetQueryObjectuivEXT*: proc(id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetQueryiv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetQueryivARB*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetQueryivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetRenderbufferParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetRenderbufferParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetRenderbufferParameterivOES*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetSamplerParameterIiv*: proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetSamplerParameterIivEXT*: proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetSamplerParameterIivOES*: proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetSamplerParameterIuiv*: proc(sampler: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetSamplerParameterIuivEXT*: proc(sampler: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetSamplerParameterIuivOES*: proc(sampler: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetSamplerParameterfv*: proc(sampler: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetSamplerParameteriv*: proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetSemaphoreParameterui64vEXT*: proc(semaphore: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}
  glGetSeparableFilter*: proc(target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer): void {.stdcall.}
  glGetSeparableFilterEXT*: proc(target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer): void {.stdcall.}
  glGetShaderInfoLog*: proc(shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}
  glGetShaderPrecisionFormat*: proc(shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint): void {.stdcall.}
  glGetShaderSource*: proc(shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring): void {.stdcall.}
  glGetShaderSourceARB*: proc(obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, source: ptr GLcharARB): void {.stdcall.}
  glGetShaderiv*: proc(shader: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetShadingRateImagePaletteNV*: proc(viewport: GLuint, entry: GLuint, rate: ptr GLenum): void {.stdcall.}
  glGetShadingRateSampleLocationivNV*: proc(rate: GLenum, samples: GLuint, index: GLuint, location: ptr GLint): void {.stdcall.}
  glGetSharpenTexFuncSGIS*: proc(target: GLenum, points: ptr GLfloat): void {.stdcall.}
  glGetStageIndexNV*: proc(shadertype: GLenum): GLushort {.stdcall.}
  glGetString*: proc(name: GLenum): ptr GLubyte {.stdcall.}
  glGetStringi*: proc(name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}
  glGetSubroutineIndex*: proc(program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}
  glGetSubroutineUniformLocation*: proc(program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}
  glGetSynciv*: proc(sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint): void {.stdcall.}
  glGetSyncivAPPLE*: proc(sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint): void {.stdcall.}
  glGetTexBumpParameterfvATI*: proc(pname: GLenum, param: ptr GLfloat): void {.stdcall.}
  glGetTexBumpParameterivATI*: proc(pname: GLenum, param: ptr GLint): void {.stdcall.}
  glGetTexEnvfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTexEnviv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexEnvxv*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetTexEnvxvOES*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetTexFilterFuncSGIS*: proc(target: GLenum, filter: GLenum, weights: ptr GLfloat): void {.stdcall.}
  glGetTexGendv*: proc(coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetTexGenfv*: proc(coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTexGenfvOES*: proc(coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTexGeniv*: proc(coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexGenivOES*: proc(coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexGenxvOES*: proc(coord: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetTexImage*: proc(target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glGetTexLevelParameterfv*: proc(target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTexLevelParameteriv*: proc(target: GLenum, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexLevelParameterxvOES*: proc(target: GLenum, level: GLint, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetTexParameterIiv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexParameterIivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexParameterIivOES*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexParameterIuiv*: proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetTexParameterIuivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetTexParameterIuivOES*: proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetTexParameterPointervAPPLE*: proc(target: GLenum, pname: GLenum, params: ptr pointer): void {.stdcall.}
  glGetTexParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTexParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTexParameterxv*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetTexParameterxvOES*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glGetTextureHandleARB*: proc(texture: GLuint): GLuint64 {.stdcall.}
  glGetTextureHandleIMG*: proc(texture: GLuint): GLuint64 {.stdcall.}
  glGetTextureHandleNV*: proc(texture: GLuint): GLuint64 {.stdcall.}
  glGetTextureImage*: proc(texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}
  glGetTextureImageEXT*: proc(texture: GLuint, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glGetTextureLevelParameterfv*: proc(texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTextureLevelParameterfvEXT*: proc(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTextureLevelParameteriv*: proc(texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTextureLevelParameterivEXT*: proc(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTextureParameterIiv*: proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTextureParameterIivEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTextureParameterIuiv*: proc(texture: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetTextureParameterIuivEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetTextureParameterfv*: proc(texture: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTextureParameterfvEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetTextureParameteriv*: proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTextureParameterivEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTextureSamplerHandleARB*: proc(texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}
  glGetTextureSamplerHandleIMG*: proc(texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}
  glGetTextureSamplerHandleNV*: proc(texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}
  glGetTextureSubImage*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}
  glGetTrackMatrixivNV*: proc(target: GLenum, address: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetTransformFeedbackVarying*: proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring): void {.stdcall.}
  glGetTransformFeedbackVaryingEXT*: proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring): void {.stdcall.}
  glGetTransformFeedbackVaryingNV*: proc(program: GLuint, index: GLuint, location: ptr GLint): void {.stdcall.}
  glGetTransformFeedbacki64_v*: proc(xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64): void {.stdcall.}
  glGetTransformFeedbackiv*: proc(xfb: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glGetTranslatedShaderSourceANGLE*: proc(shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring): void {.stdcall.}
  glGetUniformBlockIndex*: proc(program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}
  glGetUniformBufferSizeEXT*: proc(program: GLuint, location: GLint): GLint {.stdcall.}
  glGetUniformIndices*: proc(program: GLuint, uniformCount: GLsizei, uniformNames: ptr cstring, uniformIndices: ptr GLuint): void {.stdcall.}
  glGetUniformLocation*: proc(program: GLuint, name: cstring): GLint {.stdcall.}
  glGetUniformLocationARB*: proc(programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}
  glGetUniformOffsetEXT*: proc(program: GLuint, location: GLint): GLintptr {.stdcall.}
  glGetUniformSubroutineuiv*: proc(shadertype: GLenum, location: GLint, params: ptr GLuint): void {.stdcall.}
  glGetUniformdv*: proc(program: GLuint, location: GLint, params: ptr GLdouble): void {.stdcall.}
  glGetUniformfv*: proc(program: GLuint, location: GLint, params: ptr GLfloat): void {.stdcall.}
  glGetUniformfvARB*: proc(programObj: GLhandleARB, location: GLint, params: ptr GLfloat): void {.stdcall.}
  glGetUniformi64vARB*: proc(program: GLuint, location: GLint, params: ptr GLint64): void {.stdcall.}
  glGetUniformi64vNV*: proc(program: GLuint, location: GLint, params: ptr GLint64EXT): void {.stdcall.}
  glGetUniformiv*: proc(program: GLuint, location: GLint, params: ptr GLint): void {.stdcall.}
  glGetUniformivARB*: proc(programObj: GLhandleARB, location: GLint, params: ptr GLint): void {.stdcall.}
  glGetUniformui64vARB*: proc(program: GLuint, location: GLint, params: ptr GLuint64): void {.stdcall.}
  glGetUniformui64vNV*: proc(program: GLuint, location: GLint, params: ptr GLuint64EXT): void {.stdcall.}
  glGetUniformuiv*: proc(program: GLuint, location: GLint, params: ptr GLuint): void {.stdcall.}
  glGetUniformuivEXT*: proc(program: GLuint, location: GLint, params: ptr GLuint): void {.stdcall.}
  glGetUnsignedBytevEXT*: proc(pname: GLenum, data: ptr GLubyte): void {.stdcall.}
  glGetUnsignedBytei_vEXT*: proc(target: GLenum, index: GLuint, data: ptr GLubyte): void {.stdcall.}
  glGetVariantArrayObjectfvATI*: proc(id: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetVariantArrayObjectivATI*: proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVariantBooleanvEXT*: proc(id: GLuint, value: GLenum, data: ptr GLboolean): void {.stdcall.}
  glGetVariantFloatvEXT*: proc(id: GLuint, value: GLenum, data: ptr GLfloat): void {.stdcall.}
  glGetVariantIntegervEXT*: proc(id: GLuint, value: GLenum, data: ptr GLint): void {.stdcall.}
  glGetVariantPointervEXT*: proc(id: GLuint, value: GLenum, data: ptr pointer): void {.stdcall.}
  glGetVaryingLocationNV*: proc(program: GLuint, name: cstring): GLint {.stdcall.}
  glGetVertexArrayIndexed64iv*: proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64): void {.stdcall.}
  glGetVertexArrayIndexediv*: proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glGetVertexArrayIntegeri_vEXT*: proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glGetVertexArrayIntegervEXT*: proc(vaobj: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glGetVertexArrayPointeri_vEXT*: proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr pointer): void {.stdcall.}
  glGetVertexArrayPointervEXT*: proc(vaobj: GLuint, pname: GLenum, param: ptr pointer): void {.stdcall.}
  glGetVertexArrayiv*: proc(vaobj: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glGetVertexAttribArrayObjectfvATI*: proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetVertexAttribArrayObjectivATI*: proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVertexAttribIiv*: proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVertexAttribIivEXT*: proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVertexAttribIuiv*: proc(index: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetVertexAttribIuivEXT*: proc(index: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetVertexAttribLdv*: proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetVertexAttribLdvEXT*: proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetVertexAttribLi64vNV*: proc(index: GLuint, pname: GLenum, params: ptr GLint64EXT): void {.stdcall.}
  glGetVertexAttribLui64vARB*: proc(index: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}
  glGetVertexAttribLui64vNV*: proc(index: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}
  glGetVertexAttribPointerv*: proc(index: GLuint, pname: GLenum, pointer: ptr pointer): void {.stdcall.}
  glGetVertexAttribPointervARB*: proc(index: GLuint, pname: GLenum, pointer: ptr pointer): void {.stdcall.}
  glGetVertexAttribPointervNV*: proc(index: GLuint, pname: GLenum, pointer: ptr pointer): void {.stdcall.}
  glGetVertexAttribdv*: proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetVertexAttribdvARB*: proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetVertexAttribdvNV*: proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetVertexAttribfv*: proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetVertexAttribfvARB*: proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetVertexAttribfvNV*: proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetVertexAttribiv*: proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVertexAttribivARB*: proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVertexAttribivNV*: proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVideoCaptureStreamdvNV*: proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glGetVideoCaptureStreamfvNV*: proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glGetVideoCaptureStreamivNV*: proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVideoCaptureivNV*: proc(video_capture_slot: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVideoi64vNV*: proc(video_slot: GLuint, pname: GLenum, params: ptr GLint64EXT): void {.stdcall.}
  glGetVideoivNV*: proc(video_slot: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glGetVideoui64vNV*: proc(video_slot: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}
  glGetVideouivNV*: proc(video_slot: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glGetnColorTable*: proc(target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer): void {.stdcall.}
  glGetnColorTableARB*: proc(target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer): void {.stdcall.}
  glGetnCompressedTexImage*: proc(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: pointer): void {.stdcall.}
  glGetnCompressedTexImageARB*: proc(target: GLenum, lod: GLint, bufSize: GLsizei, img: pointer): void {.stdcall.}
  glGetnConvolutionFilter*: proc(target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer): void {.stdcall.}
  glGetnConvolutionFilterARB*: proc(target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer): void {.stdcall.}
  glGetnHistogram*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer): void {.stdcall.}
  glGetnHistogramARB*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer): void {.stdcall.}
  glGetnMapdv*: proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glGetnMapdvARB*: proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glGetnMapfv*: proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glGetnMapfvARB*: proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glGetnMapiv*: proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint): void {.stdcall.}
  glGetnMapivARB*: proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint): void {.stdcall.}
  glGetnMinmax*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer): void {.stdcall.}
  glGetnMinmaxARB*: proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer): void {.stdcall.}
  glGetnPixelMapfv*: proc(map: GLenum, bufSize: GLsizei, values: ptr GLfloat): void {.stdcall.}
  glGetnPixelMapfvARB*: proc(map: GLenum, bufSize: GLsizei, values: ptr GLfloat): void {.stdcall.}
  glGetnPixelMapuiv*: proc(map: GLenum, bufSize: GLsizei, values: ptr GLuint): void {.stdcall.}
  glGetnPixelMapuivARB*: proc(map: GLenum, bufSize: GLsizei, values: ptr GLuint): void {.stdcall.}
  glGetnPixelMapusv*: proc(map: GLenum, bufSize: GLsizei, values: ptr GLushort): void {.stdcall.}
  glGetnPixelMapusvARB*: proc(map: GLenum, bufSize: GLsizei, values: ptr GLushort): void {.stdcall.}
  glGetnPolygonStipple*: proc(bufSize: GLsizei, pattern: ptr GLubyte): void {.stdcall.}
  glGetnPolygonStippleARB*: proc(bufSize: GLsizei, pattern: ptr GLubyte): void {.stdcall.}
  glGetnSeparableFilter*: proc(target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer): void {.stdcall.}
  glGetnSeparableFilterARB*: proc(target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer): void {.stdcall.}
  glGetnTexImage*: proc(target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}
  glGetnTexImageARB*: proc(target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, img: pointer): void {.stdcall.}
  glGetnUniformdv*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble): void {.stdcall.}
  glGetnUniformdvARB*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble): void {.stdcall.}
  glGetnUniformfv*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glGetnUniformfvARB*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glGetnUniformfvEXT*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glGetnUniformfvKHR*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glGetnUniformi64vARB*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint64): void {.stdcall.}
  glGetnUniformiv*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}
  glGetnUniformivARB*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}
  glGetnUniformivEXT*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}
  glGetnUniformivKHR*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}
  glGetnUniformui64vARB*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint64): void {.stdcall.}
  glGetnUniformuiv*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint): void {.stdcall.}
  glGetnUniformuivARB*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint): void {.stdcall.}
  glGetnUniformuivKHR*: proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint): void {.stdcall.}
  glGlobalAlphaFactorbSUN*: proc(factor: GLbyte): void {.stdcall.}
  glGlobalAlphaFactordSUN*: proc(factor: GLdouble): void {.stdcall.}
  glGlobalAlphaFactorfSUN*: proc(factor: GLfloat): void {.stdcall.}
  glGlobalAlphaFactoriSUN*: proc(factor: GLint): void {.stdcall.}
  glGlobalAlphaFactorsSUN*: proc(factor: GLshort): void {.stdcall.}
  glGlobalAlphaFactorubSUN*: proc(factor: GLubyte): void {.stdcall.}
  glGlobalAlphaFactoruiSUN*: proc(factor: GLuint): void {.stdcall.}
  glGlobalAlphaFactorusSUN*: proc(factor: GLushort): void {.stdcall.}
  glHint*: proc(target: GLenum, mode: GLenum): void {.stdcall.}
  glHintPGI*: proc(target: GLenum, mode: GLint): void {.stdcall.}
  glHistogram*: proc(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean): void {.stdcall.}
  glHistogramEXT*: proc(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean): void {.stdcall.}
  glIglooInterfaceSGIX*: proc(pname: GLenum, params: pointer): void {.stdcall.}
  glImageTransformParameterfHP*: proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glImageTransformParameterfvHP*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glImageTransformParameteriHP*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glImageTransformParameterivHP*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glImportMemoryFdEXT*: proc(memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint): void {.stdcall.}
  glImportMemoryWin32HandleEXT*: proc(memory: GLuint, size: GLuint64, handleType: GLenum, handle: pointer): void {.stdcall.}
  glImportMemoryWin32NameEXT*: proc(memory: GLuint, size: GLuint64, handleType: GLenum, name: pointer): void {.stdcall.}
  glImportSemaphoreFdEXT*: proc(semaphore: GLuint, handleType: GLenum, fd: GLint): void {.stdcall.}
  glImportSemaphoreWin32HandleEXT*: proc(semaphore: GLuint, handleType: GLenum, handle: pointer): void {.stdcall.}
  glImportSemaphoreWin32NameEXT*: proc(semaphore: GLuint, handleType: GLenum, name: pointer): void {.stdcall.}
  glImportSyncEXT*: proc(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield): GLsync {.stdcall.}
  glIndexFormatNV*: proc(`type`: GLenum, stride: GLsizei): void {.stdcall.}
  glIndexFuncEXT*: proc(`func`: GLenum, `ref`: GLclampf): void {.stdcall.}
  glIndexMask*: proc(mask: GLuint): void {.stdcall.}
  glIndexMaterialEXT*: proc(face: GLenum, mode: GLenum): void {.stdcall.}
  glIndexPointer*: proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glIndexPointerEXT*: proc(`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}
  glIndexPointerListIBM*: proc(`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}
  glIndexd*: proc(c: GLdouble): void {.stdcall.}
  glIndexdv*: proc(c: ptr GLdouble): void {.stdcall.}
  glIndexf*: proc(c: GLfloat): void {.stdcall.}
  glIndexfv*: proc(c: ptr GLfloat): void {.stdcall.}
  glIndexi*: proc(c: GLint): void {.stdcall.}
  glIndexiv*: proc(c: ptr GLint): void {.stdcall.}
  glIndexs*: proc(c: GLshort): void {.stdcall.}
  glIndexsv*: proc(c: ptr GLshort): void {.stdcall.}
  glIndexub*: proc(c: GLubyte): void {.stdcall.}
  glIndexubv*: proc(c: ptr GLubyte): void {.stdcall.}
  glIndexxOES*: proc(component: GLfixed): void {.stdcall.}
  glIndexxvOES*: proc(component: ptr GLfixed): void {.stdcall.}
  glInitNames*: proc(): void {.stdcall.}
  glInsertComponentEXT*: proc(res: GLuint, src: GLuint, num: GLuint): void {.stdcall.}
  glInsertEventMarkerEXT*: proc(length: GLsizei, marker: cstring): void {.stdcall.}
  glInstrumentsBufferSGIX*: proc(size: GLsizei, buffer: ptr GLint): void {.stdcall.}
  glInterleavedArrays*: proc(format: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glInterpolatePathsNV*: proc(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat): void {.stdcall.}
  glInvalidateBufferData*: proc(buffer: GLuint): void {.stdcall.}
  glInvalidateBufferSubData*: proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}
  glInvalidateFramebuffer*: proc(target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum): void {.stdcall.}
  glInvalidateNamedFramebufferData*: proc(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum): void {.stdcall.}
  glInvalidateNamedFramebufferSubData*: proc(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glInvalidateSubFramebuffer*: proc(target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glInvalidateTexImage*: proc(texture: GLuint, level: GLint): void {.stdcall.}
  glInvalidateTexSubImage*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}
  glIsAsyncMarkerSGIX*: proc(marker: GLuint): GLboolean {.stdcall.}
  glIsBuffer*: proc(buffer: GLuint): GLboolean {.stdcall.}
  glIsBufferARB*: proc(buffer: GLuint): GLboolean {.stdcall.}
  glIsBufferResidentNV*: proc(target: GLenum): GLboolean {.stdcall.}
  glIsCommandListNV*: proc(list: GLuint): GLboolean {.stdcall.}
  glIsEnabled*: proc(cap: GLenum): GLboolean {.stdcall.}
  glIsEnabledIndexedEXT*: proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glIsEnabledi*: proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glIsEnablediEXT*: proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glIsEnablediNV*: proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glIsEnablediOES*: proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glIsFenceAPPLE*: proc(fence: GLuint): GLboolean {.stdcall.}
  glIsFenceNV*: proc(fence: GLuint): GLboolean {.stdcall.}
  glIsFramebuffer*: proc(framebuffer: GLuint): GLboolean {.stdcall.}
  glIsFramebufferEXT*: proc(framebuffer: GLuint): GLboolean {.stdcall.}
  glIsFramebufferOES*: proc(framebuffer: GLuint): GLboolean {.stdcall.}
  glIsImageHandleResidentARB*: proc(handle: GLuint64): GLboolean {.stdcall.}
  glIsImageHandleResidentNV*: proc(handle: GLuint64): GLboolean {.stdcall.}
  glIsList*: proc(list: GLuint): GLboolean {.stdcall.}
  glIsMemoryObjectEXT*: proc(memoryObject: GLuint): GLboolean {.stdcall.}
  glIsNameAMD*: proc(identifier: GLenum, name: GLuint): GLboolean {.stdcall.}
  glIsNamedBufferResidentNV*: proc(buffer: GLuint): GLboolean {.stdcall.}
  glIsNamedStringARB*: proc(namelen: GLint, name: cstring): GLboolean {.stdcall.}
  glIsObjectBufferATI*: proc(buffer: GLuint): GLboolean {.stdcall.}
  glIsOcclusionQueryNV*: proc(id: GLuint): GLboolean {.stdcall.}
  glIsPathNV*: proc(path: GLuint): GLboolean {.stdcall.}
  glIsPointInFillPathNV*: proc(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}
  glIsPointInStrokePathNV*: proc(path: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}
  glIsProgram*: proc(program: GLuint): GLboolean {.stdcall.}
  glIsProgramARB*: proc(program: GLuint): GLboolean {.stdcall.}
  glIsProgramNV*: proc(id: GLuint): GLboolean {.stdcall.}
  glIsProgramPipeline*: proc(pipeline: GLuint): GLboolean {.stdcall.}
  glIsProgramPipelineEXT*: proc(pipeline: GLuint): GLboolean {.stdcall.}
  glIsQuery*: proc(id: GLuint): GLboolean {.stdcall.}
  glIsQueryARB*: proc(id: GLuint): GLboolean {.stdcall.}
  glIsQueryEXT*: proc(id: GLuint): GLboolean {.stdcall.}
  glIsRenderbuffer*: proc(renderbuffer: GLuint): GLboolean {.stdcall.}
  glIsRenderbufferEXT*: proc(renderbuffer: GLuint): GLboolean {.stdcall.}
  glIsRenderbufferOES*: proc(renderbuffer: GLuint): GLboolean {.stdcall.}
  glIsSemaphoreEXT*: proc(semaphore: GLuint): GLboolean {.stdcall.}
  glIsSampler*: proc(sampler: GLuint): GLboolean {.stdcall.}
  glIsShader*: proc(shader: GLuint): GLboolean {.stdcall.}
  glIsStateNV*: proc(state: GLuint): GLboolean {.stdcall.}
  glIsSync*: proc(sync: GLsync): GLboolean {.stdcall.}
  glIsSyncAPPLE*: proc(sync: GLsync): GLboolean {.stdcall.}
  glIsTexture*: proc(texture: GLuint): GLboolean {.stdcall.}
  glIsTextureEXT*: proc(texture: GLuint): GLboolean {.stdcall.}
  glIsTextureHandleResidentARB*: proc(handle: GLuint64): GLboolean {.stdcall.}
  glIsTextureHandleResidentNV*: proc(handle: GLuint64): GLboolean {.stdcall.}
  glIsTransformFeedback*: proc(id: GLuint): GLboolean {.stdcall.}
  glIsTransformFeedbackNV*: proc(id: GLuint): GLboolean {.stdcall.}
  glIsVariantEnabledEXT*: proc(id: GLuint, cap: GLenum): GLboolean {.stdcall.}
  glIsVertexArray*: proc(array: GLuint): GLboolean {.stdcall.}
  glIsVertexArrayAPPLE*: proc(array: GLuint): GLboolean {.stdcall.}
  glIsVertexArrayOES*: proc(array: GLuint): GLboolean {.stdcall.}
  glIsVertexAttribEnabledAPPLE*: proc(index: GLuint, pname: GLenum): GLboolean {.stdcall.}
  glLGPUCopyImageSubDataNVX*: proc(sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}
  glLGPUInterlockNVX*: proc(): void {.stdcall.}
  glLGPUNamedBufferSubDataNVX*: proc(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glLabelObjectEXT*: proc(`type`: GLenum, `object`: GLuint, length: GLsizei, label: cstring): void {.stdcall.}
  glLightEnviSGIX*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glLightModelf*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glLightModelfv*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glLightModeli*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glLightModeliv*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glLightModelx*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glLightModelxOES*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glLightModelxv*: proc(pname: GLenum, param: ptr GLfixed): void {.stdcall.}
  glLightModelxvOES*: proc(pname: GLenum, param: ptr GLfixed): void {.stdcall.}
  glLightf*: proc(light: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glLightfv*: proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glLighti*: proc(light: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glLightiv*: proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glLightx*: proc(light: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glLightxOES*: proc(light: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glLightxv*: proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glLightxvOES*: proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glLineStipple*: proc(factor: GLint, pattern: GLushort): void {.stdcall.}
  glLineWidth*: proc(width: GLfloat): void {.stdcall.}
  glLineWidthx*: proc(width: GLfixed): void {.stdcall.}
  glLineWidthxOES*: proc(width: GLfixed): void {.stdcall.}
  glLinkProgram*: proc(program: GLuint): void {.stdcall.}
  glLinkProgramARB*: proc(programObj: GLhandleARB): void {.stdcall.}
  glListBase*: proc(base: GLuint): void {.stdcall.}
  glListDrawCommandsStatesClientNV*: proc(list: GLuint, segment: GLuint, indirects: ptr pointer, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint): void {.stdcall.}
  glListParameterfSGIX*: proc(list: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}
  glListParameterfvSGIX*: proc(list: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glListParameteriSGIX*: proc(list: GLuint, pname: GLenum, param: GLint): void {.stdcall.}
  glListParameterivSGIX*: proc(list: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glLoadIdentity*: proc(): void {.stdcall.}
  glLoadIdentityDeformationMapSGIX*: proc(mask: GLbitfield): void {.stdcall.}
  glLoadMatrixd*: proc(m: ptr GLdouble): void {.stdcall.}
  glLoadMatrixf*: proc(m: ptr GLfloat): void {.stdcall.}
  glLoadMatrixx*: proc(m: ptr GLfixed): void {.stdcall.}
  glLoadMatrixxOES*: proc(m: ptr GLfixed): void {.stdcall.}
  glLoadName*: proc(name: GLuint): void {.stdcall.}
  glLoadPaletteFromModelViewMatrixOES*: proc(): void {.stdcall.}
  glLoadProgramNV*: proc(target: GLenum, id: GLuint, len: GLsizei, program: ptr GLubyte): void {.stdcall.}
  glLoadTransposeMatrixd*: proc(m: ptr GLdouble): void {.stdcall.}
  glLoadTransposeMatrixdARB*: proc(m: ptr GLdouble): void {.stdcall.}
  glLoadTransposeMatrixf*: proc(m: ptr GLfloat): void {.stdcall.}
  glLoadTransposeMatrixfARB*: proc(m: ptr GLfloat): void {.stdcall.}
  glLoadTransposeMatrixxOES*: proc(m: ptr GLfixed): void {.stdcall.}
  glLockArraysEXT*: proc(first: GLint, count: GLsizei): void {.stdcall.}
  glLogicOp*: proc(opcode: GLenum): void {.stdcall.}
  glMakeBufferNonResidentNV*: proc(target: GLenum): void {.stdcall.}
  glMakeBufferResidentNV*: proc(target: GLenum, access: GLenum): void {.stdcall.}
  glMakeImageHandleNonResidentARB*: proc(handle: GLuint64): void {.stdcall.}
  glMakeImageHandleNonResidentNV*: proc(handle: GLuint64): void {.stdcall.}
  glMakeImageHandleResidentARB*: proc(handle: GLuint64, access: GLenum): void {.stdcall.}
  glMakeImageHandleResidentNV*: proc(handle: GLuint64, access: GLenum): void {.stdcall.}
  glMakeNamedBufferNonResidentNV*: proc(buffer: GLuint): void {.stdcall.}
  glMakeNamedBufferResidentNV*: proc(buffer: GLuint, access: GLenum): void {.stdcall.}
  glMakeTextureHandleNonResidentARB*: proc(handle: GLuint64): void {.stdcall.}
  glMakeTextureHandleNonResidentNV*: proc(handle: GLuint64): void {.stdcall.}
  glMakeTextureHandleResidentARB*: proc(handle: GLuint64): void {.stdcall.}
  glMakeTextureHandleResidentNV*: proc(handle: GLuint64): void {.stdcall.}
  glMap1d*: proc(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble): void {.stdcall.}
  glMap1f*: proc(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat): void {.stdcall.}
  glMap1xOES*: proc(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed): void {.stdcall.}
  glMap2d*: proc(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble): void {.stdcall.}
  glMap2f*: proc(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat): void {.stdcall.}
  glMap2xOES*: proc(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed): void {.stdcall.}
  glMapBuffer*: proc(target: GLenum, access: GLenum): pointer {.stdcall.}
  glMapBufferARB*: proc(target: GLenum, access: GLenum): pointer {.stdcall.}
  glMapBufferOES*: proc(target: GLenum, access: GLenum): pointer {.stdcall.}
  glMapBufferRange*: proc(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glMapBufferRangeEXT*: proc(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glMapControlPointsNV*: proc(target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: pointer): void {.stdcall.}
  glMapGrid1d*: proc(un: GLint, u1: GLdouble, u2: GLdouble): void {.stdcall.}
  glMapGrid1f*: proc(un: GLint, u1: GLfloat, u2: GLfloat): void {.stdcall.}
  glMapGrid1xOES*: proc(n: GLint, u1: GLfixed, u2: GLfixed): void {.stdcall.}
  glMapGrid2d*: proc(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble): void {.stdcall.}
  glMapGrid2f*: proc(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat): void {.stdcall.}
  glMapGrid2xOES*: proc(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed): void {.stdcall.}
  glMapNamedBuffer*: proc(buffer: GLuint, access: GLenum): pointer {.stdcall.}
  glMapNamedBufferEXT*: proc(buffer: GLuint, access: GLenum): pointer {.stdcall.}
  glMapNamedBufferRange*: proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glMapNamedBufferRangeEXT*: proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glMapObjectBufferATI*: proc(buffer: GLuint): pointer {.stdcall.}
  glMapParameterfvNV*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glMapParameterivNV*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMapTexture2DINTEL*: proc(texture: GLuint, level: GLint, access: GLbitfield, stride: ptr GLint, layout: ptr GLenum): pointer {.stdcall.}
  glMapVertexAttrib1dAPPLE*: proc(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble): void {.stdcall.}
  glMapVertexAttrib1fAPPLE*: proc(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat): void {.stdcall.}
  glMapVertexAttrib2dAPPLE*: proc(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble): void {.stdcall.}
  glMapVertexAttrib2fAPPLE*: proc(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat): void {.stdcall.}
  glMaterialf*: proc(face: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glMaterialfv*: proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glMateriali*: proc(face: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glMaterialiv*: proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMaterialx*: proc(face: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glMaterialxOES*: proc(face: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glMaterialxv*: proc(face: GLenum, pname: GLenum, param: ptr GLfixed): void {.stdcall.}
  glMaterialxvOES*: proc(face: GLenum, pname: GLenum, param: ptr GLfixed): void {.stdcall.}
  glMatrixFrustumEXT*: proc(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}
  glMatrixIndexPointerARB*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glMatrixIndexPointerOES*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glMatrixIndexubvARB*: proc(size: GLint, indices: ptr GLubyte): void {.stdcall.}
  glMatrixIndexuivARB*: proc(size: GLint, indices: ptr GLuint): void {.stdcall.}
  glMatrixIndexusvARB*: proc(size: GLint, indices: ptr GLushort): void {.stdcall.}
  glMatrixLoad3x2fNV*: proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixLoad3x3fNV*: proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixLoadIdentityEXT*: proc(mode: GLenum): void {.stdcall.}
  glMatrixLoadTranspose3x3fNV*: proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixLoadTransposedEXT*: proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}
  glMatrixLoadTransposefEXT*: proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixLoaddEXT*: proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}
  glMatrixLoadfEXT*: proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixMode*: proc(mode: GLenum): void {.stdcall.}
  glMatrixMult3x2fNV*: proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixMult3x3fNV*: proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixMultTranspose3x3fNV*: proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixMultTransposedEXT*: proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}
  glMatrixMultTransposefEXT*: proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixMultdEXT*: proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}
  glMatrixMultfEXT*: proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}
  glMatrixOrthoEXT*: proc(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}
  glMatrixPopEXT*: proc(mode: GLenum): void {.stdcall.}
  glMatrixPushEXT*: proc(mode: GLenum): void {.stdcall.}
  glMatrixRotatedEXT*: proc(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glMatrixRotatefEXT*: proc(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glMatrixScaledEXT*: proc(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glMatrixScalefEXT*: proc(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glMatrixTranslatedEXT*: proc(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glMatrixTranslatefEXT*: proc(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glMaxShaderCompilerThreadsKHR*: proc(count: GLuint): void {.stdcall.}
  glMaxShaderCompilerThreadsARB*: proc(count: GLuint): void {.stdcall.}
  glMemoryBarrier*: proc(barriers: GLbitfield): void {.stdcall.}
  glMemoryBarrierByRegion*: proc(barriers: GLbitfield): void {.stdcall.}
  glMemoryBarrierEXT*: proc(barriers: GLbitfield): void {.stdcall.}
  glMemoryObjectParameterivEXT*: proc(memoryObject: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMinSampleShading*: proc(value: GLfloat): void {.stdcall.}
  glMinSampleShadingARB*: proc(value: GLfloat): void {.stdcall.}
  glMinSampleShadingOES*: proc(value: GLfloat): void {.stdcall.}
  glMinmax*: proc(target: GLenum, internalformat: GLenum, sink: GLboolean): void {.stdcall.}
  glMinmaxEXT*: proc(target: GLenum, internalformat: GLenum, sink: GLboolean): void {.stdcall.}
  glMultMatrixd*: proc(m: ptr GLdouble): void {.stdcall.}
  glMultMatrixf*: proc(m: ptr GLfloat): void {.stdcall.}
  glMultMatrixx*: proc(m: ptr GLfixed): void {.stdcall.}
  glMultMatrixxOES*: proc(m: ptr GLfixed): void {.stdcall.}
  glMultTransposeMatrixd*: proc(m: ptr GLdouble): void {.stdcall.}
  glMultTransposeMatrixdARB*: proc(m: ptr GLdouble): void {.stdcall.}
  glMultTransposeMatrixf*: proc(m: ptr GLfloat): void {.stdcall.}
  glMultTransposeMatrixfARB*: proc(m: ptr GLfloat): void {.stdcall.}
  glMultTransposeMatrixxOES*: proc(m: ptr GLfixed): void {.stdcall.}
  glMultiDrawArrays*: proc(mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei): void {.stdcall.}
  glMultiDrawArraysEXT*: proc(mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei): void {.stdcall.}
  glMultiDrawArraysIndirect*: proc(mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawArraysIndirectAMD*: proc(mode: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawArraysIndirectBindlessCountNV*: proc(mode: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}
  glMultiDrawArraysIndirectBindlessNV*: proc(mode: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}
  glMultiDrawArraysIndirectCount*: proc(mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawArraysIndirectCountARB*: proc(mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawArraysIndirectEXT*: proc(mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawElementArrayAPPLE*: proc(mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei): void {.stdcall.}
  glMultiDrawElements*: proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei): void {.stdcall.}
  glMultiDrawElementsBaseVertex*: proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint): void {.stdcall.}
  glMultiDrawElementsBaseVertexEXT*: proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei, basevertex: ptr GLint): void {.stdcall.}
  glMultiDrawElementsEXT*: proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei): void {.stdcall.}
  glMultiDrawElementsIndirect*: proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawElementsIndirectAMD*: proc(mode: GLenum, `type`: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawElementsIndirectBindlessCountNV*: proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}
  glMultiDrawElementsIndirectBindlessNV*: proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}
  glMultiDrawElementsIndirectCount*: proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawElementsIndirectCountARB*: proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawElementsIndirectEXT*: proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawMeshTasksIndirectNV*: proc(indirect: GLintptr, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawMeshTasksIndirectCountNV*: proc(indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}
  glMultiDrawRangeElementArrayAPPLE*: proc(mode: GLenum, start: GLuint, `end`: GLuint, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei): void {.stdcall.}
  glMultiModeDrawArraysIBM*: proc(mode: ptr GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei, modestride: GLint): void {.stdcall.}
  glMultiModeDrawElementsIBM*: proc(mode: ptr GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei, modestride: GLint): void {.stdcall.}
  glMultiTexBufferEXT*: proc(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}
  glMultiTexCoord1bOES*: proc(texture: GLenum, s: GLbyte): void {.stdcall.}
  glMultiTexCoord1bvOES*: proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}
  glMultiTexCoord1d*: proc(target: GLenum, s: GLdouble): void {.stdcall.}
  glMultiTexCoord1dARB*: proc(target: GLenum, s: GLdouble): void {.stdcall.}
  glMultiTexCoord1dv*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord1dvARB*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord1f*: proc(target: GLenum, s: GLfloat): void {.stdcall.}
  glMultiTexCoord1fARB*: proc(target: GLenum, s: GLfloat): void {.stdcall.}
  glMultiTexCoord1fv*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord1fvARB*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord1hNV*: proc(target: GLenum, s: GLhalfNV): void {.stdcall.}
  glMultiTexCoord1hvNV*: proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}
  glMultiTexCoord1i*: proc(target: GLenum, s: GLint): void {.stdcall.}
  glMultiTexCoord1iARB*: proc(target: GLenum, s: GLint): void {.stdcall.}
  glMultiTexCoord1iv*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord1ivARB*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord1s*: proc(target: GLenum, s: GLshort): void {.stdcall.}
  glMultiTexCoord1sARB*: proc(target: GLenum, s: GLshort): void {.stdcall.}
  glMultiTexCoord1sv*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord1svARB*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord1xOES*: proc(texture: GLenum, s: GLfixed): void {.stdcall.}
  glMultiTexCoord1xvOES*: proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}
  glMultiTexCoord2bOES*: proc(texture: GLenum, s: GLbyte, t: GLbyte): void {.stdcall.}
  glMultiTexCoord2bvOES*: proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}
  glMultiTexCoord2d*: proc(target: GLenum, s: GLdouble, t: GLdouble): void {.stdcall.}
  glMultiTexCoord2dARB*: proc(target: GLenum, s: GLdouble, t: GLdouble): void {.stdcall.}
  glMultiTexCoord2dv*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord2dvARB*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord2f*: proc(target: GLenum, s: GLfloat, t: GLfloat): void {.stdcall.}
  glMultiTexCoord2fARB*: proc(target: GLenum, s: GLfloat, t: GLfloat): void {.stdcall.}
  glMultiTexCoord2fv*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord2fvARB*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord2hNV*: proc(target: GLenum, s: GLhalfNV, t: GLhalfNV): void {.stdcall.}
  glMultiTexCoord2hvNV*: proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}
  glMultiTexCoord2i*: proc(target: GLenum, s: GLint, t: GLint): void {.stdcall.}
  glMultiTexCoord2iARB*: proc(target: GLenum, s: GLint, t: GLint): void {.stdcall.}
  glMultiTexCoord2iv*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord2ivARB*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord2s*: proc(target: GLenum, s: GLshort, t: GLshort): void {.stdcall.}
  glMultiTexCoord2sARB*: proc(target: GLenum, s: GLshort, t: GLshort): void {.stdcall.}
  glMultiTexCoord2sv*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord2svARB*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord2xOES*: proc(texture: GLenum, s: GLfixed, t: GLfixed): void {.stdcall.}
  glMultiTexCoord2xvOES*: proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}
  glMultiTexCoord3bOES*: proc(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte): void {.stdcall.}
  glMultiTexCoord3bvOES*: proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}
  glMultiTexCoord3d*: proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble): void {.stdcall.}
  glMultiTexCoord3dARB*: proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble): void {.stdcall.}
  glMultiTexCoord3dv*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord3dvARB*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord3f*: proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat): void {.stdcall.}
  glMultiTexCoord3fARB*: proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat): void {.stdcall.}
  glMultiTexCoord3fv*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord3fvARB*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord3hNV*: proc(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV): void {.stdcall.}
  glMultiTexCoord3hvNV*: proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}
  glMultiTexCoord3i*: proc(target: GLenum, s: GLint, t: GLint, r: GLint): void {.stdcall.}
  glMultiTexCoord3iARB*: proc(target: GLenum, s: GLint, t: GLint, r: GLint): void {.stdcall.}
  glMultiTexCoord3iv*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord3ivARB*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord3s*: proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort): void {.stdcall.}
  glMultiTexCoord3sARB*: proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort): void {.stdcall.}
  glMultiTexCoord3sv*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord3svARB*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord3xOES*: proc(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed): void {.stdcall.}
  glMultiTexCoord3xvOES*: proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}
  glMultiTexCoord4bOES*: proc(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte): void {.stdcall.}
  glMultiTexCoord4bvOES*: proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}
  glMultiTexCoord4d*: proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble): void {.stdcall.}
  glMultiTexCoord4dARB*: proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble): void {.stdcall.}
  glMultiTexCoord4dv*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord4dvARB*: proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}
  glMultiTexCoord4f*: proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat): void {.stdcall.}
  glMultiTexCoord4fARB*: proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat): void {.stdcall.}
  glMultiTexCoord4fv*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord4fvARB*: proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}
  glMultiTexCoord4hNV*: proc(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV): void {.stdcall.}
  glMultiTexCoord4hvNV*: proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}
  glMultiTexCoord4i*: proc(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint): void {.stdcall.}
  glMultiTexCoord4iARB*: proc(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint): void {.stdcall.}
  glMultiTexCoord4iv*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord4ivARB*: proc(target: GLenum, v: ptr GLint): void {.stdcall.}
  glMultiTexCoord4s*: proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort): void {.stdcall.}
  glMultiTexCoord4sARB*: proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort): void {.stdcall.}
  glMultiTexCoord4sv*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord4svARB*: proc(target: GLenum, v: ptr GLshort): void {.stdcall.}
  glMultiTexCoord4x*: proc(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed): void {.stdcall.}
  glMultiTexCoord4xOES*: proc(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed): void {.stdcall.}
  glMultiTexCoord4xvOES*: proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}
  glMultiTexCoordP1ui*: proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}
  glMultiTexCoordP1uiv*: proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glMultiTexCoordP2ui*: proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}
  glMultiTexCoordP2uiv*: proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glMultiTexCoordP3ui*: proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}
  glMultiTexCoordP3uiv*: proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glMultiTexCoordP4ui*: proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}
  glMultiTexCoordP4uiv*: proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glMultiTexCoordPointerEXT*: proc(texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glMultiTexEnvfEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glMultiTexEnvfvEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glMultiTexEnviEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glMultiTexEnvivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMultiTexGendEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble): void {.stdcall.}
  glMultiTexGendvEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glMultiTexGenfEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glMultiTexGenfvEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glMultiTexGeniEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glMultiTexGenivEXT*: proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMultiTexImage1DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glMultiTexImage2DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glMultiTexImage3DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glMultiTexParameterIivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMultiTexParameterIuivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glMultiTexParameterfEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glMultiTexParameterfvEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glMultiTexParameteriEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glMultiTexParameterivEXT*: proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMultiTexRenderbufferEXT*: proc(texunit: GLenum, target: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glMultiTexSubImage1DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glMultiTexSubImage2DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glMultiTexSubImage3DEXT*: proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glMulticastBarrierNV*: proc(): void {.stdcall.}
  glMulticastBlitFramebufferNV*: proc(srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}
  glMulticastBufferSubDataNV*: proc(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glMulticastCopyBufferSubDataNV*: proc(readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glMulticastCopyImageSubDataNV*: proc(srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void {.stdcall.}
  glMulticastFramebufferSampleLocationsfvNV*: proc(gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glMulticastGetQueryObjecti64vNV*: proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}
  glMulticastGetQueryObjectivNV*: proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glMulticastGetQueryObjectui64vNV*: proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}
  glMulticastGetQueryObjectuivNV*: proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glMulticastScissorArrayvNVX*: proc(gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}
  glMulticastViewportArrayvNVX*: proc(gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glMulticastViewportPositionWScaleNVX*: proc(gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat): void {.stdcall.}
  glMulticastWaitSyncNV*: proc(signalGpu: GLuint, waitGpuMask: GLbitfield): void {.stdcall.}
  glNamedBufferAttachMemoryNV*: proc(buffer: GLuint, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glNamedBufferData*: proc(buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum): void {.stdcall.}
  glNamedBufferDataEXT*: proc(buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum): void {.stdcall.}
  glNamedBufferPageCommitmentARB*: proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void {.stdcall.}
  glNamedBufferPageCommitmentEXT*: proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void {.stdcall.}
  glNamedBufferStorage*: proc(buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}
  glNamedBufferStorageExternalEXT*: proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: pointer, flags: GLbitfield): void {.stdcall.}
  glNamedBufferStorageEXT*: proc(buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}
  glNamedBufferStorageMemEXT*: proc(buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glNamedBufferSubData*: proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glNamedBufferSubDataEXT*: proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}
  glNamedCopyBufferSubDataEXT*: proc(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glNamedFramebufferDrawBuffer*: proc(framebuffer: GLuint, buf: GLenum): void {.stdcall.}
  glNamedFramebufferDrawBuffers*: proc(framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum): void {.stdcall.}
  glNamedFramebufferParameteri*: proc(framebuffer: GLuint, pname: GLenum, param: GLint): void {.stdcall.}
  glNamedFramebufferParameteriEXT*: proc(framebuffer: GLuint, pname: GLenum, param: GLint): void {.stdcall.}
  glNamedFramebufferReadBuffer*: proc(framebuffer: GLuint, src: GLenum): void {.stdcall.}
  glNamedFramebufferRenderbuffer*: proc(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glNamedFramebufferRenderbufferEXT*: proc(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glNamedFramebufferSampleLocationsfvARB*: proc(framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glNamedFramebufferSampleLocationsfvNV*: proc(framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glNamedFramebufferTexture*: proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glNamedFramebufferSamplePositionsfvAMD*: proc(framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat): void {.stdcall.}
  glNamedFramebufferTexture1DEXT*: proc(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glNamedFramebufferTexture2DEXT*: proc(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glNamedFramebufferTexture3DEXT*: proc(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}
  glNamedFramebufferTextureEXT*: proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}
  glNamedFramebufferTextureFaceEXT*: proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void {.stdcall.}
  glNamedFramebufferTextureLayer*: proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}
  glNamedFramebufferTextureLayerEXT*: proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}
  glNamedProgramLocalParameter4dEXT*: proc(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glNamedProgramLocalParameter4dvEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}
  glNamedProgramLocalParameter4fEXT*: proc(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glNamedProgramLocalParameter4fvEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}
  glNamedProgramLocalParameterI4iEXT*: proc(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glNamedProgramLocalParameterI4ivEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}
  glNamedProgramLocalParameterI4uiEXT*: proc(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}
  glNamedProgramLocalParameterI4uivEXT*: proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}
  glNamedProgramLocalParameters4fvEXT*: proc(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glNamedProgramLocalParametersI4ivEXT*: proc(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}
  glNamedProgramLocalParametersI4uivEXT*: proc(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}
  glNamedProgramStringEXT*: proc(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: pointer): void {.stdcall.}
  glNamedRenderbufferStorage*: proc(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glNamedRenderbufferStorageEXT*: proc(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glNamedRenderbufferStorageMultisample*: proc(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glNamedRenderbufferStorageMultisampleAdvancedAMD*: proc(renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glNamedRenderbufferStorageMultisampleCoverageEXT*: proc(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glNamedRenderbufferStorageMultisampleEXT*: proc(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glNamedStringARB*: proc(`type`: GLenum, namelen: GLint, name: cstring, stringlen: GLint, string: cstring): void {.stdcall.}
  glNewList*: proc(list: GLuint, mode: GLenum): void {.stdcall.}
  glNewObjectBufferATI*: proc(size: GLsizei, pointer: pointer, usage: GLenum): GLuint {.stdcall.}
  glNormal3b*: proc(nx: GLbyte, ny: GLbyte, nz: GLbyte): void {.stdcall.}
  glNormal3bv*: proc(v: ptr GLbyte): void {.stdcall.}
  glNormal3d*: proc(nx: GLdouble, ny: GLdouble, nz: GLdouble): void {.stdcall.}
  glNormal3dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glNormal3f*: proc(nx: GLfloat, ny: GLfloat, nz: GLfloat): void {.stdcall.}
  glNormal3fVertex3fSUN*: proc(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glNormal3fVertex3fvSUN*: proc(n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glNormal3fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glNormal3hNV*: proc(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV): void {.stdcall.}
  glNormal3hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glNormal3i*: proc(nx: GLint, ny: GLint, nz: GLint): void {.stdcall.}
  glNormal3iv*: proc(v: ptr GLint): void {.stdcall.}
  glNormal3s*: proc(nx: GLshort, ny: GLshort, nz: GLshort): void {.stdcall.}
  glNormal3sv*: proc(v: ptr GLshort): void {.stdcall.}
  glNormal3x*: proc(nx: GLfixed, ny: GLfixed, nz: GLfixed): void {.stdcall.}
  glNormal3xOES*: proc(nx: GLfixed, ny: GLfixed, nz: GLfixed): void {.stdcall.}
  glNormal3xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glNormalFormatNV*: proc(`type`: GLenum, stride: GLsizei): void {.stdcall.}
  glNormalP3ui*: proc(`type`: GLenum, coords: GLuint): void {.stdcall.}
  glNormalP3uiv*: proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glNormalPointer*: proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glNormalPointerEXT*: proc(`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}
  glNormalPointerListIBM*: proc(`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}
  glNormalPointervINTEL*: proc(`type`: GLenum, pointer: ptr pointer): void {.stdcall.}
  glNormalStream3bATI*: proc(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte): void {.stdcall.}
  glNormalStream3bvATI*: proc(stream: GLenum, coords: ptr GLbyte): void {.stdcall.}
  glNormalStream3dATI*: proc(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble): void {.stdcall.}
  glNormalStream3dvATI*: proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}
  glNormalStream3fATI*: proc(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat): void {.stdcall.}
  glNormalStream3fvATI*: proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}
  glNormalStream3iATI*: proc(stream: GLenum, nx: GLint, ny: GLint, nz: GLint): void {.stdcall.}
  glNormalStream3ivATI*: proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}
  glNormalStream3sATI*: proc(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort): void {.stdcall.}
  glNormalStream3svATI*: proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}
  glObjectLabel*: proc(identifier: GLenum, name: GLuint, length: GLsizei, label: cstring): void {.stdcall.}
  glObjectLabelKHR*: proc(identifier: GLenum, name: GLuint, length: GLsizei, label: cstring): void {.stdcall.}
  glObjectPtrLabel*: proc(`ptr`: pointer, length: GLsizei, label: cstring): void {.stdcall.}
  glObjectPtrLabelKHR*: proc(`ptr`: pointer, length: GLsizei, label: cstring): void {.stdcall.}
  glObjectPurgeableAPPLE*: proc(objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}
  glObjectUnpurgeableAPPLE*: proc(objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}
  glOrtho*: proc(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}
  glOrthof*: proc(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat): void {.stdcall.}
  glOrthofOES*: proc(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat): void {.stdcall.}
  glOrthox*: proc(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed): void {.stdcall.}
  glOrthoxOES*: proc(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed): void {.stdcall.}
  glPNTrianglesfATI*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPNTrianglesiATI*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glPassTexCoordATI*: proc(dst: GLuint, coord: GLuint, swizzle: GLenum): void {.stdcall.}
  glPassThrough*: proc(token: GLfloat): void {.stdcall.}
  glPassThroughxOES*: proc(token: GLfixed): void {.stdcall.}
  glPatchParameterfv*: proc(pname: GLenum, values: ptr GLfloat): void {.stdcall.}
  glPatchParameteri*: proc(pname: GLenum, value: GLint): void {.stdcall.}
  glPatchParameteriEXT*: proc(pname: GLenum, value: GLint): void {.stdcall.}
  glPatchParameteriOES*: proc(pname: GLenum, value: GLint): void {.stdcall.}
  glPathColorGenNV*: proc(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: ptr GLfloat): void {.stdcall.}
  glPathCommandsNV*: proc(path: GLuint, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}
  glPathCoordsNV*: proc(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}
  glPathCoverDepthFuncNV*: proc(`func`: GLenum): void {.stdcall.}
  glPathDashArrayNV*: proc(path: GLuint, dashCount: GLsizei, dashArray: ptr GLfloat): void {.stdcall.}
  glPathFogGenNV*: proc(genMode: GLenum): void {.stdcall.}
  glPathGlyphIndexArrayNV*: proc(firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}
  glPathGlyphIndexRangeNV*: proc(fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: GLuint): GLenum {.stdcall.}
  glPathGlyphRangeNV*: proc(firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat): void {.stdcall.}
  glPathGlyphsNV*: proc(firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, numGlyphs: GLsizei, `type`: GLenum, charcodes: pointer, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat): void {.stdcall.}
  glPathMemoryGlyphIndexArrayNV*: proc(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: pointer, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}
  glPathParameterfNV*: proc(path: GLuint, pname: GLenum, value: GLfloat): void {.stdcall.}
  glPathParameterfvNV*: proc(path: GLuint, pname: GLenum, value: ptr GLfloat): void {.stdcall.}
  glPathParameteriNV*: proc(path: GLuint, pname: GLenum, value: GLint): void {.stdcall.}
  glPathParameterivNV*: proc(path: GLuint, pname: GLenum, value: ptr GLint): void {.stdcall.}
  glPathStencilDepthOffsetNV*: proc(factor: GLfloat, units: GLfloat): void {.stdcall.}
  glPathStencilFuncNV*: proc(`func`: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}
  glPathStringNV*: proc(path: GLuint, format: GLenum, length: GLsizei, pathString: pointer): void {.stdcall.}
  glPathSubCommandsNV*: proc(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}
  glPathSubCoordsNV*: proc(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}
  glPathTexGenNV*: proc(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: ptr GLfloat): void {.stdcall.}
  glPauseTransformFeedback*: proc(): void {.stdcall.}
  glPauseTransformFeedbackNV*: proc(): void {.stdcall.}
  glPixelDataRangeNV*: proc(target: GLenum, length: GLsizei, pointer: pointer): void {.stdcall.}
  glPixelMapfv*: proc(map: GLenum, mapsize: GLsizei, values: ptr GLfloat): void {.stdcall.}
  glPixelMapuiv*: proc(map: GLenum, mapsize: GLsizei, values: ptr GLuint): void {.stdcall.}
  glPixelMapusv*: proc(map: GLenum, mapsize: GLsizei, values: ptr GLushort): void {.stdcall.}
  glPixelMapx*: proc(map: GLenum, size: GLint, values: ptr GLfixed): void {.stdcall.}
  glPixelStoref*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPixelStorei*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glPixelStorex*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glPixelTexGenParameterfSGIS*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPixelTexGenParameterfvSGIS*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glPixelTexGenParameteriSGIS*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glPixelTexGenParameterivSGIS*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glPixelTexGenSGIX*: proc(mode: GLenum): void {.stdcall.}
  glPixelTransferf*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPixelTransferi*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glPixelTransferxOES*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glPixelTransformParameterfEXT*: proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glPixelTransformParameterfvEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glPixelTransformParameteriEXT*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glPixelTransformParameterivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glPixelZoom*: proc(xfactor: GLfloat, yfactor: GLfloat): void {.stdcall.}
  glPixelZoomxOES*: proc(xfactor: GLfixed, yfactor: GLfixed): void {.stdcall.}
  glPointAlongPathNV*: proc(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: ptr GLfloat, y: ptr GLfloat, tangentX: ptr GLfloat, tangentY: ptr GLfloat): GLboolean {.stdcall.}
  glPointParameterf*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPointParameterfARB*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPointParameterfEXT*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPointParameterfSGIS*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glPointParameterfv*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glPointParameterfvARB*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glPointParameterfvEXT*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glPointParameterfvSGIS*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glPointParameteri*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glPointParameteriNV*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glPointParameteriv*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glPointParameterivNV*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glPointParameterx*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glPointParameterxOES*: proc(pname: GLenum, param: GLfixed): void {.stdcall.}
  glPointParameterxv*: proc(pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glPointParameterxvOES*: proc(pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glPointSize*: proc(size: GLfloat): void {.stdcall.}
  glPointSizePointerOES*: proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glPointSizex*: proc(size: GLfixed): void {.stdcall.}
  glPointSizexOES*: proc(size: GLfixed): void {.stdcall.}
  glPollAsyncSGIX*: proc(markerp: ptr GLuint): GLint {.stdcall.}
  glPollInstrumentsSGIX*: proc(marker_p: ptr GLint): GLint {.stdcall.}
  glPolygonMode*: proc(face: GLenum, mode: GLenum): void {.stdcall.}
  glPolygonModeNV*: proc(face: GLenum, mode: GLenum): void {.stdcall.}
  glPolygonOffset*: proc(factor: GLfloat, units: GLfloat): void {.stdcall.}
  glPolygonOffsetClamp*: proc(factor: GLfloat, units: GLfloat, clamp: GLfloat): void {.stdcall.}
  glPolygonOffsetClampEXT*: proc(factor: GLfloat, units: GLfloat, clamp: GLfloat): void {.stdcall.}
  glPolygonOffsetEXT*: proc(factor: GLfloat, bias: GLfloat): void {.stdcall.}
  glPolygonOffsetx*: proc(factor: GLfixed, units: GLfixed): void {.stdcall.}
  glPolygonOffsetxOES*: proc(factor: GLfixed, units: GLfixed): void {.stdcall.}
  glPolygonStipple*: proc(mask: ptr GLubyte): void {.stdcall.}
  glPopAttrib*: proc(): void {.stdcall.}
  glPopClientAttrib*: proc(): void {.stdcall.}
  glPopDebugGroup*: proc(): void {.stdcall.}
  glPopDebugGroupKHR*: proc(): void {.stdcall.}
  glPopGroupMarkerEXT*: proc(): void {.stdcall.}
  glPopMatrix*: proc(): void {.stdcall.}
  glPopName*: proc(): void {.stdcall.}
  glPresentFrameDualFillNV*: proc(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint): void {.stdcall.}
  glPresentFrameKeyedNV*: proc(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint): void {.stdcall.}
  glPrimitiveBoundingBox*: proc(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat): void {.stdcall.}
  glPrimitiveBoundingBoxARB*: proc(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat): void {.stdcall.}
  glPrimitiveBoundingBoxEXT*: proc(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat): void {.stdcall.}
  glPrimitiveBoundingBoxOES*: proc(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat): void {.stdcall.}
  glPrimitiveRestartIndex*: proc(index: GLuint): void {.stdcall.}
  glPrimitiveRestartIndexNV*: proc(index: GLuint): void {.stdcall.}
  glPrimitiveRestartNV*: proc(): void {.stdcall.}
  glPrioritizeTextures*: proc(n: GLsizei, textures: ptr GLuint, priorities: ptr GLfloat): void {.stdcall.}
  glPrioritizeTexturesEXT*: proc(n: GLsizei, textures: ptr GLuint, priorities: ptr GLclampf): void {.stdcall.}
  glPrioritizeTexturesxOES*: proc(n: GLsizei, textures: ptr GLuint, priorities: ptr GLfixed): void {.stdcall.}
  glProgramBinary*: proc(program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei): void {.stdcall.}
  glProgramBinaryOES*: proc(program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLint): void {.stdcall.}
  glProgramBufferParametersIivNV*: proc(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}
  glProgramBufferParametersIuivNV*: proc(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}
  glProgramBufferParametersfvNV*: proc(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glProgramEnvParameter4dARB*: proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glProgramEnvParameter4dvARB*: proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}
  glProgramEnvParameter4fARB*: proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glProgramEnvParameter4fvARB*: proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}
  glProgramEnvParameterI4iNV*: proc(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glProgramEnvParameterI4ivNV*: proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}
  glProgramEnvParameterI4uiNV*: proc(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}
  glProgramEnvParameterI4uivNV*: proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}
  glProgramEnvParameters4fvEXT*: proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glProgramEnvParametersI4ivNV*: proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}
  glProgramEnvParametersI4uivNV*: proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}
  glProgramLocalParameter4dARB*: proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glProgramLocalParameter4dvARB*: proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}
  glProgramLocalParameter4fARB*: proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glProgramLocalParameter4fvARB*: proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}
  glProgramLocalParameterI4iNV*: proc(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glProgramLocalParameterI4ivNV*: proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}
  glProgramLocalParameterI4uiNV*: proc(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}
  glProgramLocalParameterI4uivNV*: proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}
  glProgramLocalParameters4fvEXT*: proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}
  glProgramLocalParametersI4ivNV*: proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}
  glProgramLocalParametersI4uivNV*: proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}
  glProgramNamedParameter4dNV*: proc(id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glProgramNamedParameter4dvNV*: proc(id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLdouble): void {.stdcall.}
  glProgramNamedParameter4fNV*: proc(id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glProgramNamedParameter4fvNV*: proc(id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}
  glProgramParameter4dNV*: proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glProgramParameter4dvNV*: proc(target: GLenum, index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glProgramParameter4fNV*: proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glProgramParameter4fvNV*: proc(target: GLenum, index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glProgramParameteri*: proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}
  glProgramParameteriARB*: proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}
  glProgramParameteriEXT*: proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}
  glProgramParameters4dvNV*: proc(target: GLenum, index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glProgramParameters4fvNV*: proc(target: GLenum, index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glProgramPathFragmentInputGenNV*: proc(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: ptr GLfloat): void {.stdcall.}
  glProgramStringARB*: proc(target: GLenum, format: GLenum, len: GLsizei, string: pointer): void {.stdcall.}
  glProgramSubroutineParametersuivNV*: proc(target: GLenum, count: GLsizei, params: ptr GLuint): void {.stdcall.}
  glProgramUniform1d*: proc(program: GLuint, location: GLint, v0: GLdouble): void {.stdcall.}
  glProgramUniform1dEXT*: proc(program: GLuint, location: GLint, x: GLdouble): void {.stdcall.}
  glProgramUniform1dv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform1dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform1f*: proc(program: GLuint, location: GLint, v0: GLfloat): void {.stdcall.}
  glProgramUniform1fEXT*: proc(program: GLuint, location: GLint, v0: GLfloat): void {.stdcall.}
  glProgramUniform1fv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform1fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform1i*: proc(program: GLuint, location: GLint, v0: GLint): void {.stdcall.}
  glProgramUniform1i64ARB*: proc(program: GLuint, location: GLint, x: GLint64): void {.stdcall.}
  glProgramUniform1i64NV*: proc(program: GLuint, location: GLint, x: GLint64EXT): void {.stdcall.}
  glProgramUniform1i64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glProgramUniform1i64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glProgramUniform1iEXT*: proc(program: GLuint, location: GLint, v0: GLint): void {.stdcall.}
  glProgramUniform1iv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform1ivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform1ui*: proc(program: GLuint, location: GLint, v0: GLuint): void {.stdcall.}
  glProgramUniform1ui64ARB*: proc(program: GLuint, location: GLint, x: GLuint64): void {.stdcall.}
  glProgramUniform1ui64NV*: proc(program: GLuint, location: GLint, x: GLuint64EXT): void {.stdcall.}
  glProgramUniform1ui64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glProgramUniform1ui64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glProgramUniform1uiEXT*: proc(program: GLuint, location: GLint, v0: GLuint): void {.stdcall.}
  glProgramUniform1uiv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniform1uivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniform2d*: proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble): void {.stdcall.}
  glProgramUniform2dEXT*: proc(program: GLuint, location: GLint, x: GLdouble, y: GLdouble): void {.stdcall.}
  glProgramUniform2dv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform2dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform2f*: proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}
  glProgramUniform2fEXT*: proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}
  glProgramUniform2fv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform2fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform2i*: proc(program: GLuint, location: GLint, v0: GLint, v1: GLint): void {.stdcall.}
  glProgramUniform2i64ARB*: proc(program: GLuint, location: GLint, x: GLint64, y: GLint64): void {.stdcall.}
  glProgramUniform2i64NV*: proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}
  glProgramUniform2i64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glProgramUniform2i64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glProgramUniform2iEXT*: proc(program: GLuint, location: GLint, v0: GLint, v1: GLint): void {.stdcall.}
  glProgramUniform2iv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform2ivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform2ui*: proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}
  glProgramUniform2ui64ARB*: proc(program: GLuint, location: GLint, x: GLuint64, y: GLuint64): void {.stdcall.}
  glProgramUniform2ui64NV*: proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}
  glProgramUniform2ui64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glProgramUniform2ui64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glProgramUniform2uiEXT*: proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}
  glProgramUniform2uiv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniform2uivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniform3d*: proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble): void {.stdcall.}
  glProgramUniform3dEXT*: proc(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glProgramUniform3dv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform3dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform3f*: proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}
  glProgramUniform3fEXT*: proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}
  glProgramUniform3fv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform3fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform3i*: proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}
  glProgramUniform3i64ARB*: proc(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64): void {.stdcall.}
  glProgramUniform3i64NV*: proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}
  glProgramUniform3i64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glProgramUniform3i64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glProgramUniform3iEXT*: proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}
  glProgramUniform3iv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform3ivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform3ui*: proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}
  glProgramUniform3ui64ARB*: proc(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64): void {.stdcall.}
  glProgramUniform3ui64NV*: proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}
  glProgramUniform3ui64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glProgramUniform3ui64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glProgramUniform3uiEXT*: proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}
  glProgramUniform3uiv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniform3uivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniform4d*: proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble): void {.stdcall.}
  glProgramUniform4dEXT*: proc(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glProgramUniform4dv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform4dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glProgramUniform4f*: proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}
  glProgramUniform4fEXT*: proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}
  glProgramUniform4fv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform4fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glProgramUniform4i*: proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}
  glProgramUniform4i64ARB*: proc(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64): void {.stdcall.}
  glProgramUniform4i64NV*: proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}
  glProgramUniform4i64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glProgramUniform4i64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glProgramUniform4iEXT*: proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}
  glProgramUniform4iv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform4ivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glProgramUniform4ui*: proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}
  glProgramUniform4ui64ARB*: proc(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64): void {.stdcall.}
  glProgramUniform4ui64NV*: proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}
  glProgramUniform4ui64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glProgramUniform4ui64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glProgramUniform4uiEXT*: proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}
  glProgramUniform4uiv*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniform4uivEXT*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glProgramUniformHandleui64ARB*: proc(program: GLuint, location: GLint, value: GLuint64): void {.stdcall.}
  glProgramUniformHandleui64IMG*: proc(program: GLuint, location: GLint, value: GLuint64): void {.stdcall.}
  glProgramUniformHandleui64NV*: proc(program: GLuint, location: GLint, value: GLuint64): void {.stdcall.}
  glProgramUniformHandleui64vARB*: proc(program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64): void {.stdcall.}
  glProgramUniformHandleui64vIMG*: proc(program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64): void {.stdcall.}
  glProgramUniformHandleui64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64): void {.stdcall.}
  glProgramUniformMatrix2dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix2dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix2fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix2fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix2x3dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix2x3dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix2x3fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix2x3fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix2x4dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix2x4dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix2x4fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix2x4fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix3dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix3dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix3fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix3fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix3x2dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix3x2dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix3x2fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix3x2fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix3x4dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix3x4dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix3x4fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix3x4fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix4dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix4dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix4fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix4fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix4x2dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix4x2dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix4x2fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix4x2fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix4x3dv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix4x3dvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glProgramUniformMatrix4x3fv*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformMatrix4x3fvEXT*: proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glProgramUniformui64NV*: proc(program: GLuint, location: GLint, value: GLuint64EXT): void {.stdcall.}
  glProgramUniformui64vNV*: proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glProgramVertexLimitNV*: proc(target: GLenum, limit: GLint): void {.stdcall.}
  glProvokingVertex*: proc(mode: GLenum): void {.stdcall.}
  glProvokingVertexEXT*: proc(mode: GLenum): void {.stdcall.}
  glPushAttrib*: proc(mask: GLbitfield): void {.stdcall.}
  glPushClientAttrib*: proc(mask: GLbitfield): void {.stdcall.}
  glPushClientAttribDefaultEXT*: proc(mask: GLbitfield): void {.stdcall.}
  glPushDebugGroup*: proc(source: GLenum, id: GLuint, length: GLsizei, message: cstring): void {.stdcall.}
  glPushDebugGroupKHR*: proc(source: GLenum, id: GLuint, length: GLsizei, message: cstring): void {.stdcall.}
  glPushGroupMarkerEXT*: proc(length: GLsizei, marker: cstring): void {.stdcall.}
  glPushMatrix*: proc(): void {.stdcall.}
  glPushName*: proc(name: GLuint): void {.stdcall.}
  glQueryCounter*: proc(id: GLuint, target: GLenum): void {.stdcall.}
  glQueryCounterEXT*: proc(id: GLuint, target: GLenum): void {.stdcall.}
  glQueryMatrixxOES*: proc(mantissa: ptr GLfixed, exponent: ptr GLint): GLbitfield {.stdcall.}
  glQueryObjectParameteruiAMD*: proc(target: GLenum, id: GLuint, pname: GLenum, param: GLuint): void {.stdcall.}
  glQueryResourceNV*: proc(queryType: GLenum, tagId: GLint, count: GLuint, buffer: ptr GLint): GLint {.stdcall.}
  glQueryResourceTagNV*: proc(tagId: GLint, tagString: cstring): void {.stdcall.}
  glRasterPos2d*: proc(x: GLdouble, y: GLdouble): void {.stdcall.}
  glRasterPos2dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glRasterPos2f*: proc(x: GLfloat, y: GLfloat): void {.stdcall.}
  glRasterPos2fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glRasterPos2i*: proc(x: GLint, y: GLint): void {.stdcall.}
  glRasterPos2iv*: proc(v: ptr GLint): void {.stdcall.}
  glRasterPos2s*: proc(x: GLshort, y: GLshort): void {.stdcall.}
  glRasterPos2sv*: proc(v: ptr GLshort): void {.stdcall.}
  glRasterPos2xOES*: proc(x: GLfixed, y: GLfixed): void {.stdcall.}
  glRasterPos2xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glRasterPos3d*: proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glRasterPos3dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glRasterPos3f*: proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glRasterPos3fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glRasterPos3i*: proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glRasterPos3iv*: proc(v: ptr GLint): void {.stdcall.}
  glRasterPos3s*: proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glRasterPos3sv*: proc(v: ptr GLshort): void {.stdcall.}
  glRasterPos3xOES*: proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glRasterPos3xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glRasterPos4d*: proc(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glRasterPos4dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glRasterPos4f*: proc(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glRasterPos4fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glRasterPos4i*: proc(x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glRasterPos4iv*: proc(v: ptr GLint): void {.stdcall.}
  glRasterPos4s*: proc(x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}
  glRasterPos4sv*: proc(v: ptr GLshort): void {.stdcall.}
  glRasterPos4xOES*: proc(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed): void {.stdcall.}
  glRasterPos4xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glRasterSamplesEXT*: proc(samples: GLuint, fixedsamplelocations: GLboolean): void {.stdcall.}
  glReadBuffer*: proc(src: GLenum): void {.stdcall.}
  glReadBufferIndexedEXT*: proc(src: GLenum, index: GLint): void {.stdcall.}
  glReadBufferNV*: proc(mode: GLenum): void {.stdcall.}
  glReadInstrumentsSGIX*: proc(marker: GLint): void {.stdcall.}
  glReadPixels*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glReadnPixels*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}
  glReadnPixelsARB*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}
  glReadnPixelsEXT*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}
  glReadnPixelsKHR*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}
  glReleaseKeyedMutexWin32EXT*: proc(memory: GLuint, key: GLuint64): GLboolean {.stdcall.}
  glRectd*: proc(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble): void {.stdcall.}
  glRectdv*: proc(v1: ptr GLdouble, v2: ptr GLdouble): void {.stdcall.}
  glRectf*: proc(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat): void {.stdcall.}
  glRectfv*: proc(v1: ptr GLfloat, v2: ptr GLfloat): void {.stdcall.}
  glRecti*: proc(x1: GLint, y1: GLint, x2: GLint, y2: GLint): void {.stdcall.}
  glRectiv*: proc(v1: ptr GLint, v2: ptr GLint): void {.stdcall.}
  glRects*: proc(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort): void {.stdcall.}
  glRectsv*: proc(v1: ptr GLshort, v2: ptr GLshort): void {.stdcall.}
  glRectxOES*: proc(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed): void {.stdcall.}
  glRectxvOES*: proc(v1: ptr GLfixed, v2: ptr GLfixed): void {.stdcall.}
  glReferencePlaneSGIX*: proc(equation: ptr GLdouble): void {.stdcall.}
  glReleaseShaderCompiler*: proc(): void {.stdcall.}
  glRenderGpuMaskNV*: proc(mask: GLbitfield): void {.stdcall.}
  glRenderMode*: proc(mode: GLenum): GLint {.stdcall.}
  glRenderbufferStorage*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageEXT*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisample*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisampleANGLE*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisampleAPPLE*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisampleAdvancedAMD*: proc(target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisampleCoverageNV*: proc(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisampleEXT*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisampleIMG*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageMultisampleNV*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glRenderbufferStorageOES*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glReplacementCodePointerSUN*: proc(`type`: GLenum, stride: GLsizei, pointer: ptr pointer): void {.stdcall.}
  glReplacementCodeubSUN*: proc(code: GLubyte): void {.stdcall.}
  glReplacementCodeubvSUN*: proc(code: ptr GLubyte): void {.stdcall.}
  glReplacementCodeuiColor3fVertex3fSUN*: proc(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiColor3fVertex3fvSUN*: proc(rc: ptr GLuint, c: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuiColor4fNormal3fVertex3fSUN*: proc(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN*: proc(rc: ptr GLuint, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuiColor4ubVertex3fSUN*: proc(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiColor4ubVertex3fvSUN*: proc(rc: ptr GLuint, c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuiNormal3fVertex3fSUN*: proc(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiNormal3fVertex3fvSUN*: proc(rc: ptr GLuint, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuiSUN*: proc(code: GLuint): void {.stdcall.}
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN*: proc(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN*: proc(rc: ptr GLuint, tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN*: proc(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN*: proc(rc: ptr GLuint, tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuiTexCoord2fVertex3fSUN*: proc(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiTexCoord2fVertex3fvSUN*: proc(rc: ptr GLuint, tc: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuiVertex3fSUN*: proc(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glReplacementCodeuiVertex3fvSUN*: proc(rc: ptr GLuint, v: ptr GLfloat): void {.stdcall.}
  glReplacementCodeuivSUN*: proc(code: ptr GLuint): void {.stdcall.}
  glReplacementCodeusSUN*: proc(code: GLushort): void {.stdcall.}
  glReplacementCodeusvSUN*: proc(code: ptr GLushort): void {.stdcall.}
  glRequestResidentProgramsNV*: proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}
  glResetHistogram*: proc(target: GLenum): void {.stdcall.}
  glResetHistogramEXT*: proc(target: GLenum): void {.stdcall.}
  glResetMemoryObjectParameterNV*: proc(memory: GLuint, pname: GLenum): void {.stdcall.}
  glResetMinmax*: proc(target: GLenum): void {.stdcall.}
  glResetMinmaxEXT*: proc(target: GLenum): void {.stdcall.}
  glResizeBuffersMESA*: proc(): void {.stdcall.}
  glResolveDepthValuesNV*: proc(): void {.stdcall.}
  glResolveMultisampleFramebufferAPPLE*: proc(): void {.stdcall.}
  glResumeTransformFeedback*: proc(): void {.stdcall.}
  glResumeTransformFeedbackNV*: proc(): void {.stdcall.}
  glRotated*: proc(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glRotatef*: proc(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glRotatex*: proc(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glRotatexOES*: proc(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glSampleCoverage*: proc(value: GLfloat, invert: GLboolean): void {.stdcall.}
  glSampleCoverageARB*: proc(value: GLfloat, invert: GLboolean): void {.stdcall.}
  glSampleCoveragex*: proc(value: GLclampx, invert: GLboolean): void {.stdcall.}
  glSampleCoveragexOES*: proc(value: GLclampx, invert: GLboolean): void {.stdcall.}
  glSampleMapATI*: proc(dst: GLuint, interp: GLuint, swizzle: GLenum): void {.stdcall.}
  glSampleMaskEXT*: proc(value: GLclampf, invert: GLboolean): void {.stdcall.}
  glSampleMaskIndexedNV*: proc(index: GLuint, mask: GLbitfield): void {.stdcall.}
  glSampleMaskSGIS*: proc(value: GLclampf, invert: GLboolean): void {.stdcall.}
  glSampleMaski*: proc(maskNumber: GLuint, mask: GLbitfield): void {.stdcall.}
  glSamplePatternEXT*: proc(pattern: GLenum): void {.stdcall.}
  glSamplePatternSGIS*: proc(pattern: GLenum): void {.stdcall.}
  glSamplerParameterIiv*: proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glSamplerParameterIivEXT*: proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glSamplerParameterIivOES*: proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glSamplerParameterIuiv*: proc(sampler: GLuint, pname: GLenum, param: ptr GLuint): void {.stdcall.}
  glSamplerParameterIuivEXT*: proc(sampler: GLuint, pname: GLenum, param: ptr GLuint): void {.stdcall.}
  glSamplerParameterIuivOES*: proc(sampler: GLuint, pname: GLenum, param: ptr GLuint): void {.stdcall.}
  glSamplerParameterf*: proc(sampler: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}
  glSamplerParameterfv*: proc(sampler: GLuint, pname: GLenum, param: ptr GLfloat): void {.stdcall.}
  glSamplerParameteri*: proc(sampler: GLuint, pname: GLenum, param: GLint): void {.stdcall.}
  glSamplerParameteriv*: proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glScaled*: proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glScalef*: proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glScalex*: proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glScalexOES*: proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glScissor*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glScissorArrayv*: proc(first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}
  glScissorArrayvNV*: proc(first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}
  glScissorArrayvOES*: proc(first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}
  glScissorExclusiveArrayvNV*: proc(first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}
  glScissorExclusiveNV*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glScissorIndexed*: proc(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glScissorIndexedNV*: proc(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glScissorIndexedOES*: proc(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glScissorIndexedv*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glScissorIndexedvNV*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glScissorIndexedvOES*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glSecondaryColor3b*: proc(red: GLbyte, green: GLbyte, blue: GLbyte): void {.stdcall.}
  glSecondaryColor3bEXT*: proc(red: GLbyte, green: GLbyte, blue: GLbyte): void {.stdcall.}
  glSecondaryColor3bv*: proc(v: ptr GLbyte): void {.stdcall.}
  glSecondaryColor3bvEXT*: proc(v: ptr GLbyte): void {.stdcall.}
  glSecondaryColor3d*: proc(red: GLdouble, green: GLdouble, blue: GLdouble): void {.stdcall.}
  glSecondaryColor3dEXT*: proc(red: GLdouble, green: GLdouble, blue: GLdouble): void {.stdcall.}
  glSecondaryColor3dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glSecondaryColor3dvEXT*: proc(v: ptr GLdouble): void {.stdcall.}
  glSecondaryColor3f*: proc(red: GLfloat, green: GLfloat, blue: GLfloat): void {.stdcall.}
  glSecondaryColor3fEXT*: proc(red: GLfloat, green: GLfloat, blue: GLfloat): void {.stdcall.}
  glSecondaryColor3fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glSecondaryColor3fvEXT*: proc(v: ptr GLfloat): void {.stdcall.}
  glSecondaryColor3hNV*: proc(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV): void {.stdcall.}
  glSecondaryColor3hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glSecondaryColor3i*: proc(red: GLint, green: GLint, blue: GLint): void {.stdcall.}
  glSecondaryColor3iEXT*: proc(red: GLint, green: GLint, blue: GLint): void {.stdcall.}
  glSecondaryColor3iv*: proc(v: ptr GLint): void {.stdcall.}
  glSecondaryColor3ivEXT*: proc(v: ptr GLint): void {.stdcall.}
  glSecondaryColor3s*: proc(red: GLshort, green: GLshort, blue: GLshort): void {.stdcall.}
  glSecondaryColor3sEXT*: proc(red: GLshort, green: GLshort, blue: GLshort): void {.stdcall.}
  glSecondaryColor3sv*: proc(v: ptr GLshort): void {.stdcall.}
  glSecondaryColor3svEXT*: proc(v: ptr GLshort): void {.stdcall.}
  glSecondaryColor3ub*: proc(red: GLubyte, green: GLubyte, blue: GLubyte): void {.stdcall.}
  glSecondaryColor3ubEXT*: proc(red: GLubyte, green: GLubyte, blue: GLubyte): void {.stdcall.}
  glSecondaryColor3ubv*: proc(v: ptr GLubyte): void {.stdcall.}
  glSecondaryColor3ubvEXT*: proc(v: ptr GLubyte): void {.stdcall.}
  glSecondaryColor3ui*: proc(red: GLuint, green: GLuint, blue: GLuint): void {.stdcall.}
  glSecondaryColor3uiEXT*: proc(red: GLuint, green: GLuint, blue: GLuint): void {.stdcall.}
  glSecondaryColor3uiv*: proc(v: ptr GLuint): void {.stdcall.}
  glSecondaryColor3uivEXT*: proc(v: ptr GLuint): void {.stdcall.}
  glSecondaryColor3us*: proc(red: GLushort, green: GLushort, blue: GLushort): void {.stdcall.}
  glSecondaryColor3usEXT*: proc(red: GLushort, green: GLushort, blue: GLushort): void {.stdcall.}
  glSecondaryColor3usv*: proc(v: ptr GLushort): void {.stdcall.}
  glSecondaryColor3usvEXT*: proc(v: ptr GLushort): void {.stdcall.}
  glSecondaryColorFormatNV*: proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}
  glSecondaryColorP3ui*: proc(`type`: GLenum, color: GLuint): void {.stdcall.}
  glSecondaryColorP3uiv*: proc(`type`: GLenum, color: ptr GLuint): void {.stdcall.}
  glSecondaryColorPointer*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glSecondaryColorPointerEXT*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glSecondaryColorPointerListIBM*: proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}
  glSelectBuffer*: proc(size: GLsizei, buffer: ptr GLuint): void {.stdcall.}
  glSelectPerfMonitorCountersAMD*: proc(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: ptr GLuint): void {.stdcall.}
  glSemaphoreParameterui64vEXT*: proc(semaphore: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}
  glSeparableFilter2D*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer): void {.stdcall.}
  glSeparableFilter2DEXT*: proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer): void {.stdcall.}
  glSetFenceAPPLE*: proc(fence: GLuint): void {.stdcall.}
  glSetFenceNV*: proc(fence: GLuint, condition: GLenum): void {.stdcall.}
  glSetFragmentShaderConstantATI*: proc(dst: GLuint, value: ptr GLfloat): void {.stdcall.}
  glSetInvariantEXT*: proc(id: GLuint, `type`: GLenum, `addr`: pointer): void {.stdcall.}
  glSetLocalConstantEXT*: proc(id: GLuint, `type`: GLenum, `addr`: pointer): void {.stdcall.}
  glSetMultisamplefvAMD*: proc(pname: GLenum, index: GLuint, val: ptr GLfloat): void {.stdcall.}
  glShadeModel*: proc(mode: GLenum): void {.stdcall.}
  glShaderBinary*: proc(count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei): void {.stdcall.}
  glShaderOp1EXT*: proc(op: GLenum, res: GLuint, arg1: GLuint): void {.stdcall.}
  glShaderOp2EXT*: proc(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint): void {.stdcall.}
  glShaderOp3EXT*: proc(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint): void {.stdcall.}
  glShaderSource*: proc(shader: GLuint, count: GLsizei, string: ptr cstring, length: ptr GLint): void {.stdcall.}
  glShaderSourceARB*: proc(shaderObj: GLhandleARB, count: GLsizei, string: ptr ptr GLcharARB, length: ptr GLint): void {.stdcall.}
  glShaderStorageBlockBinding*: proc(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint): void {.stdcall.}
  glShadingRateImageBarrierNV*: proc(synchronize: GLboolean): void {.stdcall.}
  glShadingRateImagePaletteNV*: proc(viewport: GLuint, first: GLuint, count: GLsizei, rates: ptr GLenum): void {.stdcall.}
  glShadingRateSampleOrderNV*: proc(order: GLenum): void {.stdcall.}
  glShadingRateSampleOrderCustomNV*: proc(rate: GLenum, samples: GLuint, locations: ptr GLint): void {.stdcall.}
  glSharpenTexFuncSGIS*: proc(target: GLenum, n: GLsizei, points: ptr GLfloat): void {.stdcall.}
  glSignalSemaphoreEXT*: proc(semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, dstLayouts: ptr GLenum): void {.stdcall.}
  glSignalSemaphoreui64NVX*: proc(signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64): void {.stdcall.}
  glSpecializeShader*: proc(shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint): void {.stdcall.}
  glSpecializeShaderARB*: proc(shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint): void {.stdcall.}
  glSpriteParameterfSGIX*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glSpriteParameterfvSGIX*: proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glSpriteParameteriSGIX*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glSpriteParameterivSGIX*: proc(pname: GLenum, params: ptr GLint): void {.stdcall.}
  glStartInstrumentsSGIX*: proc(): void {.stdcall.}
  glStartTilingQCOM*: proc(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield): void {.stdcall.}
  glStateCaptureNV*: proc(state: GLuint, mode: GLenum): void {.stdcall.}
  glStencilClearTagEXT*: proc(stencilTagBits: GLsizei, stencilClearTag: GLuint): void {.stdcall.}
  glStencilFillPathInstancedNV*: proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}
  glStencilFillPathNV*: proc(path: GLuint, fillMode: GLenum, mask: GLuint): void {.stdcall.}
  glStencilFunc*: proc(`func`: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}
  glStencilFuncSeparate*: proc(face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}
  glStencilFuncSeparateATI*: proc(frontfunc: GLenum, backfunc: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}
  glStencilMask*: proc(mask: GLuint): void {.stdcall.}
  glStencilMaskSeparate*: proc(face: GLenum, mask: GLuint): void {.stdcall.}
  glStencilOp*: proc(fail: GLenum, zfail: GLenum, zpass: GLenum): void {.stdcall.}
  glStencilOpSeparate*: proc(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum): void {.stdcall.}
  glStencilOpSeparateATI*: proc(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum): void {.stdcall.}
  glStencilOpValueAMD*: proc(face: GLenum, value: GLuint): void {.stdcall.}
  glStencilStrokePathInstancedNV*: proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}
  glStencilStrokePathNV*: proc(path: GLuint, reference: GLint, mask: GLuint): void {.stdcall.}
  glStencilThenCoverFillPathInstancedNV*: proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}
  glStencilThenCoverFillPathNV*: proc(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum): void {.stdcall.}
  glStencilThenCoverStrokePathInstancedNV*: proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}
  glStencilThenCoverStrokePathNV*: proc(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum): void {.stdcall.}
  glStopInstrumentsSGIX*: proc(marker: GLint): void {.stdcall.}
  glStringMarkerGREMEDY*: proc(len: GLsizei, string: pointer): void {.stdcall.}
  glSubpixelPrecisionBiasNV*: proc(xbits: GLuint, ybits: GLuint): void {.stdcall.}
  glSwizzleEXT*: proc(res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum): void {.stdcall.}
  glSyncTextureINTEL*: proc(texture: GLuint): void {.stdcall.}
  glTagSampleBufferSGIX*: proc(): void {.stdcall.}
  glTangent3bEXT*: proc(tx: GLbyte, ty: GLbyte, tz: GLbyte): void {.stdcall.}
  glTangent3bvEXT*: proc(v: ptr GLbyte): void {.stdcall.}
  glTangent3dEXT*: proc(tx: GLdouble, ty: GLdouble, tz: GLdouble): void {.stdcall.}
  glTangent3dvEXT*: proc(v: ptr GLdouble): void {.stdcall.}
  glTangent3fEXT*: proc(tx: GLfloat, ty: GLfloat, tz: GLfloat): void {.stdcall.}
  glTangent3fvEXT*: proc(v: ptr GLfloat): void {.stdcall.}
  glTangent3iEXT*: proc(tx: GLint, ty: GLint, tz: GLint): void {.stdcall.}
  glTangent3ivEXT*: proc(v: ptr GLint): void {.stdcall.}
  glTangent3sEXT*: proc(tx: GLshort, ty: GLshort, tz: GLshort): void {.stdcall.}
  glTangent3svEXT*: proc(v: ptr GLshort): void {.stdcall.}
  glTangentPointerEXT*: proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glTbufferMask3DFX*: proc(mask: GLuint): void {.stdcall.}
  glTessellationFactorAMD*: proc(factor: GLfloat): void {.stdcall.}
  glTessellationModeAMD*: proc(mode: GLenum): void {.stdcall.}
  glTestFenceAPPLE*: proc(fence: GLuint): GLboolean {.stdcall.}
  glTestFenceNV*: proc(fence: GLuint): GLboolean {.stdcall.}
  glTestObjectAPPLE*: proc(`object`: GLenum, name: GLuint): GLboolean {.stdcall.}
  glTexAttachMemoryNV*: proc(target: GLenum, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTexBuffer*: proc(target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}
  glTexBufferARB*: proc(target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}
  glTexBufferEXT*: proc(target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}
  glTexBufferOES*: proc(target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}
  glTexBufferRange*: proc(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glTexBufferRangeEXT*: proc(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glTexBufferRangeOES*: proc(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glTexBumpParameterfvATI*: proc(pname: GLenum, param: ptr GLfloat): void {.stdcall.}
  glTexBumpParameterivATI*: proc(pname: GLenum, param: ptr GLint): void {.stdcall.}
  glTexCoord1bOES*: proc(s: GLbyte): void {.stdcall.}
  glTexCoord1bvOES*: proc(coords: ptr GLbyte): void {.stdcall.}
  glTexCoord1d*: proc(s: GLdouble): void {.stdcall.}
  glTexCoord1dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glTexCoord1f*: proc(s: GLfloat): void {.stdcall.}
  glTexCoord1fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glTexCoord1hNV*: proc(s: GLhalfNV): void {.stdcall.}
  glTexCoord1hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glTexCoord1i*: proc(s: GLint): void {.stdcall.}
  glTexCoord1iv*: proc(v: ptr GLint): void {.stdcall.}
  glTexCoord1s*: proc(s: GLshort): void {.stdcall.}
  glTexCoord1sv*: proc(v: ptr GLshort): void {.stdcall.}
  glTexCoord1xOES*: proc(s: GLfixed): void {.stdcall.}
  glTexCoord1xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glTexCoord2bOES*: proc(s: GLbyte, t: GLbyte): void {.stdcall.}
  glTexCoord2bvOES*: proc(coords: ptr GLbyte): void {.stdcall.}
  glTexCoord2d*: proc(s: GLdouble, t: GLdouble): void {.stdcall.}
  glTexCoord2dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glTexCoord2f*: proc(s: GLfloat, t: GLfloat): void {.stdcall.}
  glTexCoord2fColor3fVertex3fSUN*: proc(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glTexCoord2fColor3fVertex3fvSUN*: proc(tc: ptr GLfloat, c: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glTexCoord2fColor4fNormal3fVertex3fSUN*: proc(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glTexCoord2fColor4fNormal3fVertex3fvSUN*: proc(tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glTexCoord2fColor4ubVertex3fSUN*: proc(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glTexCoord2fColor4ubVertex3fvSUN*: proc(tc: ptr GLfloat, c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}
  glTexCoord2fNormal3fVertex3fSUN*: proc(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glTexCoord2fNormal3fVertex3fvSUN*: proc(tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glTexCoord2fVertex3fSUN*: proc(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glTexCoord2fVertex3fvSUN*: proc(tc: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glTexCoord2fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glTexCoord2hNV*: proc(s: GLhalfNV, t: GLhalfNV): void {.stdcall.}
  glTexCoord2hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glTexCoord2i*: proc(s: GLint, t: GLint): void {.stdcall.}
  glTexCoord2iv*: proc(v: ptr GLint): void {.stdcall.}
  glTexCoord2s*: proc(s: GLshort, t: GLshort): void {.stdcall.}
  glTexCoord2sv*: proc(v: ptr GLshort): void {.stdcall.}
  glTexCoord2xOES*: proc(s: GLfixed, t: GLfixed): void {.stdcall.}
  glTexCoord2xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glTexCoord3bOES*: proc(s: GLbyte, t: GLbyte, r: GLbyte): void {.stdcall.}
  glTexCoord3bvOES*: proc(coords: ptr GLbyte): void {.stdcall.}
  glTexCoord3d*: proc(s: GLdouble, t: GLdouble, r: GLdouble): void {.stdcall.}
  glTexCoord3dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glTexCoord3f*: proc(s: GLfloat, t: GLfloat, r: GLfloat): void {.stdcall.}
  glTexCoord3fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glTexCoord3hNV*: proc(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV): void {.stdcall.}
  glTexCoord3hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glTexCoord3i*: proc(s: GLint, t: GLint, r: GLint): void {.stdcall.}
  glTexCoord3iv*: proc(v: ptr GLint): void {.stdcall.}
  glTexCoord3s*: proc(s: GLshort, t: GLshort, r: GLshort): void {.stdcall.}
  glTexCoord3sv*: proc(v: ptr GLshort): void {.stdcall.}
  glTexCoord3xOES*: proc(s: GLfixed, t: GLfixed, r: GLfixed): void {.stdcall.}
  glTexCoord3xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glTexCoord4bOES*: proc(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte): void {.stdcall.}
  glTexCoord4bvOES*: proc(coords: ptr GLbyte): void {.stdcall.}
  glTexCoord4d*: proc(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble): void {.stdcall.}
  glTexCoord4dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glTexCoord4f*: proc(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat): void {.stdcall.}
  glTexCoord4fColor4fNormal3fVertex4fSUN*: proc(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glTexCoord4fColor4fNormal3fVertex4fvSUN*: proc(tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glTexCoord4fVertex4fSUN*: proc(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glTexCoord4fVertex4fvSUN*: proc(tc: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}
  glTexCoord4fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glTexCoord4hNV*: proc(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV): void {.stdcall.}
  glTexCoord4hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glTexCoord4i*: proc(s: GLint, t: GLint, r: GLint, q: GLint): void {.stdcall.}
  glTexCoord4iv*: proc(v: ptr GLint): void {.stdcall.}
  glTexCoord4s*: proc(s: GLshort, t: GLshort, r: GLshort, q: GLshort): void {.stdcall.}
  glTexCoord4sv*: proc(v: ptr GLshort): void {.stdcall.}
  glTexCoord4xOES*: proc(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed): void {.stdcall.}
  glTexCoord4xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glTexCoordFormatNV*: proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}
  glTexCoordP1ui*: proc(`type`: GLenum, coords: GLuint): void {.stdcall.}
  glTexCoordP1uiv*: proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glTexCoordP2ui*: proc(`type`: GLenum, coords: GLuint): void {.stdcall.}
  glTexCoordP2uiv*: proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glTexCoordP3ui*: proc(`type`: GLenum, coords: GLuint): void {.stdcall.}
  glTexCoordP3uiv*: proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glTexCoordP4ui*: proc(`type`: GLenum, coords: GLuint): void {.stdcall.}
  glTexCoordP4uiv*: proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}
  glTexCoordPointer*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glTexCoordPointerEXT*: proc(size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}
  glTexCoordPointerListIBM*: proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}
  glTexCoordPointervINTEL*: proc(size: GLint, `type`: GLenum, pointer: ptr pointer): void {.stdcall.}
  glTexEnvf*: proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glTexEnvfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glTexEnvi*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glTexEnviv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTexEnvx*: proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glTexEnvxOES*: proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glTexEnvxv*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glTexEnvxvOES*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glTexFilterFuncSGIS*: proc(target: GLenum, filter: GLenum, n: GLsizei, weights: ptr GLfloat): void {.stdcall.}
  glTexGend*: proc(coord: GLenum, pname: GLenum, param: GLdouble): void {.stdcall.}
  glTexGendv*: proc(coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glTexGenf*: proc(coord: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glTexGenfOES*: proc(coord: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glTexGenfv*: proc(coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glTexGenfvOES*: proc(coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glTexGeni*: proc(coord: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glTexGeniOES*: proc(coord: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glTexGeniv*: proc(coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTexGenivOES*: proc(coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTexGenxOES*: proc(coord: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glTexGenxvOES*: proc(coord: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glTexImage1D*: proc(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexImage2D*: proc(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexImage2DMultisample*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTexImage2DMultisampleCoverageNV*: proc(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}
  glTexImage3D*: proc(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexImage3DEXT*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexImage3DMultisample*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTexImage3DMultisampleCoverageNV*: proc(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}
  glTexImage3DOES*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexImage4DSGIS*: proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexPageCommitmentARB*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean): void {.stdcall.}
  glTexPageCommitmentEXT*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean): void {.stdcall.}
  glTexParameterIiv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTexParameterIivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTexParameterIivOES*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTexParameterIuiv*: proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glTexParameterIuivEXT*: proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glTexParameterIuivOES*: proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glTexParameterf*: proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glTexParameterfv*: proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glTexParameteri*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glTexParameteriv*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTexParameterx*: proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glTexParameterxOES*: proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}
  glTexParameterxv*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glTexParameterxvOES*: proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}
  glTexRenderbufferNV*: proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glTexStorage1D*: proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}
  glTexStorage1DEXT*: proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}
  glTexStorage2D*: proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glTexStorage2DEXT*: proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glTexStorage2DMultisample*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTexStorage3D*: proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}
  glTexStorage3DEXT*: proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}
  glTexStorage3DMultisample*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTexStorage3DMultisampleOES*: proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTexStorageMem1DEXT*: proc(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTexStorageMem2DEXT*: proc(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTexStorageMem2DMultisampleEXT*: proc(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTexStorageMem3DEXT*: proc(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTexStorageMem3DMultisampleEXT*: proc(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTexStorageSparseAMD*: proc(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield): void {.stdcall.}
  glTexSubImage1D*: proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexSubImage1DEXT*: proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexSubImage2D*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexSubImage2DEXT*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexSubImage3D*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexSubImage3DEXT*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexSubImage3DOES*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTexSubImage4DSGIS*: proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureAttachMemoryNV*: proc(texture: GLuint, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTextureBarrier*: proc(): void {.stdcall.}
  glTextureBarrierNV*: proc(): void {.stdcall.}
  glTextureBuffer*: proc(texture: GLuint, internalformat: GLenum, buffer: GLuint): void {.stdcall.}
  glTextureBufferEXT*: proc(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}
  glTextureBufferRange*: proc(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glTextureBufferRangeEXT*: proc(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glTextureColorMaskSGIS*: proc(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void {.stdcall.}
  glTextureFoveationParametersQCOM*: proc(texture: GLuint, layer: GLuint, focalPoint: GLuint, focalX: GLfloat, focalY: GLfloat, gainX: GLfloat, gainY: GLfloat, foveaArea: GLfloat): void {.stdcall.}
  glTextureImage1DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureImage2DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureImage2DMultisampleCoverageNV*: proc(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}
  glTextureImage2DMultisampleNV*: proc(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}
  glTextureImage3DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureImage3DMultisampleCoverageNV*: proc(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}
  glTextureImage3DMultisampleNV*: proc(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}
  glTextureLightEXT*: proc(pname: GLenum): void {.stdcall.}
  glTextureMaterialEXT*: proc(face: GLenum, mode: GLenum): void {.stdcall.}
  glTextureNormalEXT*: proc(mode: GLenum): void {.stdcall.}
  glTexturePageCommitmentEXT*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean): void {.stdcall.}
  glTextureParameterIiv*: proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTextureParameterIivEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTextureParameterIuiv*: proc(texture: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glTextureParameterIuivEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}
  glTextureParameterf*: proc(texture: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}
  glTextureParameterfEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}
  glTextureParameterfv*: proc(texture: GLuint, pname: GLenum, param: ptr GLfloat): void {.stdcall.}
  glTextureParameterfvEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glTextureParameteri*: proc(texture: GLuint, pname: GLenum, param: GLint): void {.stdcall.}
  glTextureParameteriEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glTextureParameteriv*: proc(texture: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}
  glTextureParameterivEXT*: proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glTextureRangeAPPLE*: proc(target: GLenum, length: GLsizei, pointer: pointer): void {.stdcall.}
  glTextureRenderbufferEXT*: proc(texture: GLuint, target: GLenum, renderbuffer: GLuint): void {.stdcall.}
  glTextureStorage1D*: proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}
  glTextureStorage1DEXT*: proc(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}
  glTextureStorage2D*: proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glTextureStorage2DEXT*: proc(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}
  glTextureStorage2DMultisample*: proc(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTextureStorage2DMultisampleEXT*: proc(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTextureStorage3D*: proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}
  glTextureStorage3DEXT*: proc(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}
  glTextureStorage3DMultisample*: proc(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTextureStorage3DMultisampleEXT*: proc(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}
  glTextureStorageMem1DEXT*: proc(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTextureStorageMem2DEXT*: proc(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTextureStorageMem2DMultisampleEXT*: proc(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTextureStorageMem3DEXT*: proc(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTextureStorageMem3DMultisampleEXT*: proc(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}
  glTextureStorageSparseAMD*: proc(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield): void {.stdcall.}
  glTextureSubImage1D*: proc(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureSubImage1DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureSubImage2D*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureSubImage2DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureSubImage3D*: proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureSubImage3DEXT*: proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}
  glTextureView*: proc(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint): void {.stdcall.}
  glTextureViewEXT*: proc(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint): void {.stdcall.}
  glTextureViewOES*: proc(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint): void {.stdcall.}
  glTrackMatrixNV*: proc(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum): void {.stdcall.}
  glTransformFeedbackAttribsNV*: proc(count: GLsizei, attribs: ptr GLint, bufferMode: GLenum): void {.stdcall.}
  glTransformFeedbackBufferBase*: proc(xfb: GLuint, index: GLuint, buffer: GLuint): void {.stdcall.}
  glTransformFeedbackBufferRange*: proc(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}
  glTransformFeedbackStreamAttribsNV*: proc(count: GLsizei, attribs: ptr GLint, nbuffers: GLsizei, bufstreams: ptr GLint, bufferMode: GLenum): void {.stdcall.}
  glTransformFeedbackVaryings*: proc(program: GLuint, count: GLsizei, varyings: ptr cstring, bufferMode: GLenum): void {.stdcall.}
  glTransformFeedbackVaryingsEXT*: proc(program: GLuint, count: GLsizei, varyings: ptr cstring, bufferMode: GLenum): void {.stdcall.}
  glTransformFeedbackVaryingsNV*: proc(program: GLuint, count: GLsizei, locations: ptr GLint, bufferMode: GLenum): void {.stdcall.}
  glTransformPathNV*: proc(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}
  glTranslated*: proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glTranslatef*: proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glTranslatex*: proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glTranslatexOES*: proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glUniform1d*: proc(location: GLint, x: GLdouble): void {.stdcall.}
  glUniform1dv*: proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glUniform1f*: proc(location: GLint, v0: GLfloat): void {.stdcall.}
  glUniform1fARB*: proc(location: GLint, v0: GLfloat): void {.stdcall.}
  glUniform1fv*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform1fvARB*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform1i*: proc(location: GLint, v0: GLint): void {.stdcall.}
  glUniform1i64ARB*: proc(location: GLint, x: GLint64): void {.stdcall.}
  glUniform1i64NV*: proc(location: GLint, x: GLint64EXT): void {.stdcall.}
  glUniform1i64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glUniform1i64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glUniform1iARB*: proc(location: GLint, v0: GLint): void {.stdcall.}
  glUniform1iv*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform1ivARB*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform1ui*: proc(location: GLint, v0: GLuint): void {.stdcall.}
  glUniform1ui64ARB*: proc(location: GLint, x: GLuint64): void {.stdcall.}
  glUniform1ui64NV*: proc(location: GLint, x: GLuint64EXT): void {.stdcall.}
  glUniform1ui64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glUniform1ui64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glUniform1uiEXT*: proc(location: GLint, v0: GLuint): void {.stdcall.}
  glUniform1uiv*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniform1uivEXT*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniform2d*: proc(location: GLint, x: GLdouble, y: GLdouble): void {.stdcall.}
  glUniform2dv*: proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glUniform2f*: proc(location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}
  glUniform2fARB*: proc(location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}
  glUniform2fv*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform2fvARB*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform2i*: proc(location: GLint, v0: GLint, v1: GLint): void {.stdcall.}
  glUniform2i64ARB*: proc(location: GLint, x: GLint64, y: GLint64): void {.stdcall.}
  glUniform2i64NV*: proc(location: GLint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}
  glUniform2i64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glUniform2i64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glUniform2iARB*: proc(location: GLint, v0: GLint, v1: GLint): void {.stdcall.}
  glUniform2iv*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform2ivARB*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform2ui*: proc(location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}
  glUniform2ui64ARB*: proc(location: GLint, x: GLuint64, y: GLuint64): void {.stdcall.}
  glUniform2ui64NV*: proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}
  glUniform2ui64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glUniform2ui64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glUniform2uiEXT*: proc(location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}
  glUniform2uiv*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniform2uivEXT*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniform3d*: proc(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glUniform3dv*: proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glUniform3f*: proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}
  glUniform3fARB*: proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}
  glUniform3fv*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform3fvARB*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform3i*: proc(location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}
  glUniform3i64ARB*: proc(location: GLint, x: GLint64, y: GLint64, z: GLint64): void {.stdcall.}
  glUniform3i64NV*: proc(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}
  glUniform3i64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glUniform3i64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glUniform3iARB*: proc(location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}
  glUniform3iv*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform3ivARB*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform3ui*: proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}
  glUniform3ui64ARB*: proc(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64): void {.stdcall.}
  glUniform3ui64NV*: proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}
  glUniform3ui64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glUniform3ui64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glUniform3uiEXT*: proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}
  glUniform3uiv*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniform3uivEXT*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniform4d*: proc(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glUniform4dv*: proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}
  glUniform4f*: proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}
  glUniform4fARB*: proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}
  glUniform4fv*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform4fvARB*: proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}
  glUniform4i*: proc(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}
  glUniform4i64ARB*: proc(location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64): void {.stdcall.}
  glUniform4i64NV*: proc(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}
  glUniform4i64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}
  glUniform4i64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}
  glUniform4iARB*: proc(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}
  glUniform4iv*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform4ivARB*: proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}
  glUniform4ui*: proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}
  glUniform4ui64ARB*: proc(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64): void {.stdcall.}
  glUniform4ui64NV*: proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}
  glUniform4ui64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glUniform4ui64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glUniform4uiEXT*: proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}
  glUniform4uiv*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniform4uivEXT*: proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}
  glUniformBlockBinding*: proc(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void {.stdcall.}
  glUniformBufferEXT*: proc(program: GLuint, location: GLint, buffer: GLuint): void {.stdcall.}
  glUniformHandleui64ARB*: proc(location: GLint, value: GLuint64): void {.stdcall.}
  glUniformHandleui64IMG*: proc(location: GLint, value: GLuint64): void {.stdcall.}
  glUniformHandleui64NV*: proc(location: GLint, value: GLuint64): void {.stdcall.}
  glUniformHandleui64vARB*: proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glUniformHandleui64vIMG*: proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glUniformHandleui64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}
  glUniformMatrix2dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix2fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix2fvARB*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix2x3dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix2x3fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix2x3fvNV*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix2x4dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix2x4fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix2x4fvNV*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix3dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix3fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix3fvARB*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix3x2dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix3x2fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix3x2fvNV*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix3x4dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix3x4fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix3x4fvNV*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix4dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix4fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix4fvARB*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix4x2dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix4x2fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix4x2fvNV*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix4x3dv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}
  glUniformMatrix4x3fv*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformMatrix4x3fvNV*: proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}
  glUniformSubroutinesuiv*: proc(shadertype: GLenum, count: GLsizei, indices: ptr GLuint): void {.stdcall.}
  glUniformui64NV*: proc(location: GLint, value: GLuint64EXT): void {.stdcall.}
  glUniformui64vNV*: proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}
  glUnlockArraysEXT*: proc(): void {.stdcall.}
  glUnmapBuffer*: proc(target: GLenum): GLboolean {.stdcall.}
  glUnmapBufferARB*: proc(target: GLenum): GLboolean {.stdcall.}
  glUnmapBufferOES*: proc(target: GLenum): GLboolean {.stdcall.}
  glUnmapNamedBuffer*: proc(buffer: GLuint): GLboolean {.stdcall.}
  glUnmapNamedBufferEXT*: proc(buffer: GLuint): GLboolean {.stdcall.}
  glUnmapObjectBufferATI*: proc(buffer: GLuint): void {.stdcall.}
  glUnmapTexture2DINTEL*: proc(texture: GLuint, level: GLint): void {.stdcall.}
  glUpdateObjectBufferATI*: proc(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: pointer, preserve: GLenum): void {.stdcall.}
  glUploadGpuMaskNVX*: proc(mask: GLbitfield): void {.stdcall.}
  glUseProgram*: proc(program: GLuint): void {.stdcall.}
  glUseProgramObjectARB*: proc(programObj: GLhandleARB): void {.stdcall.}
  glUseProgramStages*: proc(pipeline: GLuint, stages: GLbitfield, program: GLuint): void {.stdcall.}
  glUseProgramStagesEXT*: proc(pipeline: GLuint, stages: GLbitfield, program: GLuint): void {.stdcall.}
  glUseShaderProgramEXT*: proc(`type`: GLenum, program: GLuint): void {.stdcall.}
  glVDPAUFiniNV*: proc(): void {.stdcall.}
  glVDPAUGetSurfaceivNV*: proc(surface: GLvdpauSurfaceNV, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint): void {.stdcall.}
  glVDPAUInitNV*: proc(vdpDevice: pointer, getProcAddress: pointer): void {.stdcall.}
  glVDPAUIsSurfaceNV*: proc(surface: GLvdpauSurfaceNV): GLboolean {.stdcall.}
  glVDPAUMapSurfacesNV*: proc(numSurfaces: GLsizei, surfaces: ptr GLvdpauSurfaceNV): void {.stdcall.}
  glVDPAURegisterOutputSurfaceNV*: proc(vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}
  glVDPAURegisterVideoSurfaceNV*: proc(vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}
  glVDPAURegisterVideoSurfaceWithPictureStructureNV*: proc(vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint, isFrameStructure: GLboolean): GLvdpauSurfaceNV {.stdcall.}
  glVDPAUSurfaceAccessNV*: proc(surface: GLvdpauSurfaceNV, access: GLenum): void {.stdcall.}
  glVDPAUUnmapSurfacesNV*: proc(numSurface: GLsizei, surfaces: ptr GLvdpauSurfaceNV): void {.stdcall.}
  glVDPAUUnregisterSurfaceNV*: proc(surface: GLvdpauSurfaceNV): void {.stdcall.}
  glValidateProgram*: proc(program: GLuint): void {.stdcall.}
  glValidateProgramARB*: proc(programObj: GLhandleARB): void {.stdcall.}
  glValidateProgramPipeline*: proc(pipeline: GLuint): void {.stdcall.}
  glValidateProgramPipelineEXT*: proc(pipeline: GLuint): void {.stdcall.}
  glVariantArrayObjectATI*: proc(id: GLuint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint): void {.stdcall.}
  glVariantPointerEXT*: proc(id: GLuint, `type`: GLenum, stride: GLuint, `addr`: pointer): void {.stdcall.}
  glVariantbvEXT*: proc(id: GLuint, `addr`: ptr GLbyte): void {.stdcall.}
  glVariantdvEXT*: proc(id: GLuint, `addr`: ptr GLdouble): void {.stdcall.}
  glVariantfvEXT*: proc(id: GLuint, `addr`: ptr GLfloat): void {.stdcall.}
  glVariantivEXT*: proc(id: GLuint, `addr`: ptr GLint): void {.stdcall.}
  glVariantsvEXT*: proc(id: GLuint, `addr`: ptr GLshort): void {.stdcall.}
  glVariantubvEXT*: proc(id: GLuint, `addr`: ptr GLubyte): void {.stdcall.}
  glVariantuivEXT*: proc(id: GLuint, `addr`: ptr GLuint): void {.stdcall.}
  glVariantusvEXT*: proc(id: GLuint, `addr`: ptr GLushort): void {.stdcall.}
  glVertex2bOES*: proc(x: GLbyte, y: GLbyte): void {.stdcall.}
  glVertex2bvOES*: proc(coords: ptr GLbyte): void {.stdcall.}
  glVertex2d*: proc(x: GLdouble, y: GLdouble): void {.stdcall.}
  glVertex2dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glVertex2f*: proc(x: GLfloat, y: GLfloat): void {.stdcall.}
  glVertex2fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glVertex2hNV*: proc(x: GLhalfNV, y: GLhalfNV): void {.stdcall.}
  glVertex2hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glVertex2i*: proc(x: GLint, y: GLint): void {.stdcall.}
  glVertex2iv*: proc(v: ptr GLint): void {.stdcall.}
  glVertex2s*: proc(x: GLshort, y: GLshort): void {.stdcall.}
  glVertex2sv*: proc(v: ptr GLshort): void {.stdcall.}
  glVertex2xOES*: proc(x: GLfixed): void {.stdcall.}
  glVertex2xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glVertex3bOES*: proc(x: GLbyte, y: GLbyte, z: GLbyte): void {.stdcall.}
  glVertex3bvOES*: proc(coords: ptr GLbyte): void {.stdcall.}
  glVertex3d*: proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glVertex3dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glVertex3f*: proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glVertex3fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glVertex3hNV*: proc(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV): void {.stdcall.}
  glVertex3hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glVertex3i*: proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glVertex3iv*: proc(v: ptr GLint): void {.stdcall.}
  glVertex3s*: proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glVertex3sv*: proc(v: ptr GLshort): void {.stdcall.}
  glVertex3xOES*: proc(x: GLfixed, y: GLfixed): void {.stdcall.}
  glVertex3xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glVertex4bOES*: proc(x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte): void {.stdcall.}
  glVertex4bvOES*: proc(coords: ptr GLbyte): void {.stdcall.}
  glVertex4d*: proc(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glVertex4dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glVertex4f*: proc(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glVertex4fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glVertex4hNV*: proc(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV): void {.stdcall.}
  glVertex4hvNV*: proc(v: ptr GLhalfNV): void {.stdcall.}
  glVertex4i*: proc(x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glVertex4iv*: proc(v: ptr GLint): void {.stdcall.}
  glVertex4s*: proc(x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}
  glVertex4sv*: proc(v: ptr GLshort): void {.stdcall.}
  glVertex4xOES*: proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}
  glVertex4xvOES*: proc(coords: ptr GLfixed): void {.stdcall.}
  glVertexArrayAttribBinding*: proc(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}
  glVertexArrayAttribFormat*: proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}
  glVertexArrayAttribIFormat*: proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}
  glVertexArrayAttribLFormat*: proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}
  glVertexArrayBindVertexBufferEXT*: proc(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}
  glVertexArrayBindingDivisor*: proc(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexArrayColorOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayEdgeFlagOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayElementBuffer*: proc(vaobj: GLuint, buffer: GLuint): void {.stdcall.}
  glVertexArrayFogCoordOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayIndexOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayMultiTexCoordOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayNormalOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayParameteriAPPLE*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glVertexArrayRangeAPPLE*: proc(length: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexArrayRangeNV*: proc(length: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexArraySecondaryColorOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayTexCoordOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayVertexAttribBindingEXT*: proc(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}
  glVertexArrayVertexAttribDivisorEXT*: proc(vaobj: GLuint, index: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexArrayVertexAttribFormatEXT*: proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}
  glVertexArrayVertexAttribIFormatEXT*: proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}
  glVertexArrayVertexAttribIOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayVertexAttribLFormatEXT*: proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}
  glVertexArrayVertexAttribLOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayVertexAttribOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexArrayVertexBindingDivisorEXT*: proc(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexArrayVertexBuffer*: proc(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}
  glVertexArrayVertexBuffers*: proc(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei): void {.stdcall.}
  glVertexArrayVertexOffsetEXT*: proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}
  glVertexAttrib1d*: proc(index: GLuint, x: GLdouble): void {.stdcall.}
  glVertexAttrib1dARB*: proc(index: GLuint, x: GLdouble): void {.stdcall.}
  glVertexAttrib1dNV*: proc(index: GLuint, x: GLdouble): void {.stdcall.}
  glVertexAttrib1dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib1dvARB*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib1dvNV*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib1f*: proc(index: GLuint, x: GLfloat): void {.stdcall.}
  glVertexAttrib1fARB*: proc(index: GLuint, x: GLfloat): void {.stdcall.}
  glVertexAttrib1fNV*: proc(index: GLuint, x: GLfloat): void {.stdcall.}
  glVertexAttrib1fv*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib1fvARB*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib1fvNV*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib1hNV*: proc(index: GLuint, x: GLhalfNV): void {.stdcall.}
  glVertexAttrib1hvNV*: proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttrib1s*: proc(index: GLuint, x: GLshort): void {.stdcall.}
  glVertexAttrib1sARB*: proc(index: GLuint, x: GLshort): void {.stdcall.}
  glVertexAttrib1sNV*: proc(index: GLuint, x: GLshort): void {.stdcall.}
  glVertexAttrib1sv*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib1svARB*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib1svNV*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib2d*: proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}
  glVertexAttrib2dARB*: proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}
  glVertexAttrib2dNV*: proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}
  glVertexAttrib2dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib2dvARB*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib2dvNV*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib2f*: proc(index: GLuint, x: GLfloat, y: GLfloat): void {.stdcall.}
  glVertexAttrib2fARB*: proc(index: GLuint, x: GLfloat, y: GLfloat): void {.stdcall.}
  glVertexAttrib2fNV*: proc(index: GLuint, x: GLfloat, y: GLfloat): void {.stdcall.}
  glVertexAttrib2fv*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib2fvARB*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib2fvNV*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib2hNV*: proc(index: GLuint, x: GLhalfNV, y: GLhalfNV): void {.stdcall.}
  glVertexAttrib2hvNV*: proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttrib2s*: proc(index: GLuint, x: GLshort, y: GLshort): void {.stdcall.}
  glVertexAttrib2sARB*: proc(index: GLuint, x: GLshort, y: GLshort): void {.stdcall.}
  glVertexAttrib2sNV*: proc(index: GLuint, x: GLshort, y: GLshort): void {.stdcall.}
  glVertexAttrib2sv*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib2svARB*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib2svNV*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib3d*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glVertexAttrib3dARB*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glVertexAttrib3dNV*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glVertexAttrib3dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib3dvARB*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib3dvNV*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib3f*: proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glVertexAttrib3fARB*: proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glVertexAttrib3fNV*: proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glVertexAttrib3fv*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib3fvARB*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib3fvNV*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib3hNV*: proc(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV): void {.stdcall.}
  glVertexAttrib3hvNV*: proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttrib3s*: proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glVertexAttrib3sARB*: proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glVertexAttrib3sNV*: proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glVertexAttrib3sv*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib3svARB*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib3svNV*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib4Nbv*: proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}
  glVertexAttrib4NbvARB*: proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}
  glVertexAttrib4Niv*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttrib4NivARB*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttrib4Nsv*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib4NsvARB*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib4Nub*: proc(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void {.stdcall.}
  glVertexAttrib4NubARB*: proc(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void {.stdcall.}
  glVertexAttrib4Nubv*: proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}
  glVertexAttrib4NubvARB*: proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}
  glVertexAttrib4Nuiv*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttrib4NuivARB*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttrib4Nusv*: proc(index: GLuint, v: ptr GLushort): void {.stdcall.}
  glVertexAttrib4NusvARB*: proc(index: GLuint, v: ptr GLushort): void {.stdcall.}
  glVertexAttrib4bv*: proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}
  glVertexAttrib4bvARB*: proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}
  glVertexAttrib4d*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glVertexAttrib4dARB*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glVertexAttrib4dNV*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glVertexAttrib4dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib4dvARB*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib4dvNV*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttrib4f*: proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glVertexAttrib4fARB*: proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glVertexAttrib4fNV*: proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glVertexAttrib4fv*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib4fvARB*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib4fvNV*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glVertexAttrib4hNV*: proc(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV): void {.stdcall.}
  glVertexAttrib4hvNV*: proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttrib4iv*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttrib4ivARB*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttrib4s*: proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}
  glVertexAttrib4sARB*: proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}
  glVertexAttrib4sNV*: proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}
  glVertexAttrib4sv*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib4svARB*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib4svNV*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttrib4ubNV*: proc(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void {.stdcall.}
  glVertexAttrib4ubv*: proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}
  glVertexAttrib4ubvARB*: proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}
  glVertexAttrib4ubvNV*: proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}
  glVertexAttrib4uiv*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttrib4uivARB*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttrib4usv*: proc(index: GLuint, v: ptr GLushort): void {.stdcall.}
  glVertexAttrib4usvARB*: proc(index: GLuint, v: ptr GLushort): void {.stdcall.}
  glVertexAttribArrayObjectATI*: proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint): void {.stdcall.}
  glVertexAttribBinding*: proc(attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}
  glVertexAttribDivisor*: proc(index: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexAttribDivisorANGLE*: proc(index: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexAttribDivisorARB*: proc(index: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexAttribDivisorEXT*: proc(index: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexAttribDivisorNV*: proc(index: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexAttribFormat*: proc(attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}
  glVertexAttribFormatNV*: proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei): void {.stdcall.}
  glVertexAttribI1i*: proc(index: GLuint, x: GLint): void {.stdcall.}
  glVertexAttribI1iEXT*: proc(index: GLuint, x: GLint): void {.stdcall.}
  glVertexAttribI1iv*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI1ivEXT*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI1ui*: proc(index: GLuint, x: GLuint): void {.stdcall.}
  glVertexAttribI1uiEXT*: proc(index: GLuint, x: GLuint): void {.stdcall.}
  glVertexAttribI1uiv*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI1uivEXT*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI2i*: proc(index: GLuint, x: GLint, y: GLint): void {.stdcall.}
  glVertexAttribI2iEXT*: proc(index: GLuint, x: GLint, y: GLint): void {.stdcall.}
  glVertexAttribI2iv*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI2ivEXT*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI2ui*: proc(index: GLuint, x: GLuint, y: GLuint): void {.stdcall.}
  glVertexAttribI2uiEXT*: proc(index: GLuint, x: GLuint, y: GLuint): void {.stdcall.}
  glVertexAttribI2uiv*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI2uivEXT*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI3i*: proc(index: GLuint, x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glVertexAttribI3iEXT*: proc(index: GLuint, x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glVertexAttribI3iv*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI3ivEXT*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI3ui*: proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint): void {.stdcall.}
  glVertexAttribI3uiEXT*: proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint): void {.stdcall.}
  glVertexAttribI3uiv*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI3uivEXT*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI4bv*: proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}
  glVertexAttribI4bvEXT*: proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}
  glVertexAttribI4i*: proc(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glVertexAttribI4iEXT*: proc(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glVertexAttribI4iv*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI4ivEXT*: proc(index: GLuint, v: ptr GLint): void {.stdcall.}
  glVertexAttribI4sv*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttribI4svEXT*: proc(index: GLuint, v: ptr GLshort): void {.stdcall.}
  glVertexAttribI4ubv*: proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}
  glVertexAttribI4ubvEXT*: proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}
  glVertexAttribI4ui*: proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}
  glVertexAttribI4uiEXT*: proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}
  glVertexAttribI4uiv*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI4uivEXT*: proc(index: GLuint, v: ptr GLuint): void {.stdcall.}
  glVertexAttribI4usv*: proc(index: GLuint, v: ptr GLushort): void {.stdcall.}
  glVertexAttribI4usvEXT*: proc(index: GLuint, v: ptr GLushort): void {.stdcall.}
  glVertexAttribIFormat*: proc(attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}
  glVertexAttribIFormatNV*: proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}
  glVertexAttribIPointer*: proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexAttribIPointerEXT*: proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexAttribL1d*: proc(index: GLuint, x: GLdouble): void {.stdcall.}
  glVertexAttribL1dEXT*: proc(index: GLuint, x: GLdouble): void {.stdcall.}
  glVertexAttribL1dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL1dvEXT*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL1i64NV*: proc(index: GLuint, x: GLint64EXT): void {.stdcall.}
  glVertexAttribL1i64vNV*: proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}
  glVertexAttribL1ui64ARB*: proc(index: GLuint, x: GLuint64EXT): void {.stdcall.}
  glVertexAttribL1ui64NV*: proc(index: GLuint, x: GLuint64EXT): void {.stdcall.}
  glVertexAttribL1ui64vARB*: proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}
  glVertexAttribL1ui64vNV*: proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}
  glVertexAttribL2d*: proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}
  glVertexAttribL2dEXT*: proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}
  glVertexAttribL2dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL2dvEXT*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL2i64NV*: proc(index: GLuint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}
  glVertexAttribL2i64vNV*: proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}
  glVertexAttribL2ui64NV*: proc(index: GLuint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}
  glVertexAttribL2ui64vNV*: proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}
  glVertexAttribL3d*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glVertexAttribL3dEXT*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glVertexAttribL3dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL3dvEXT*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL3i64NV*: proc(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}
  glVertexAttribL3i64vNV*: proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}
  glVertexAttribL3ui64NV*: proc(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}
  glVertexAttribL3ui64vNV*: proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}
  glVertexAttribL4d*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glVertexAttribL4dEXT*: proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glVertexAttribL4dv*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL4dvEXT*: proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribL4i64NV*: proc(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}
  glVertexAttribL4i64vNV*: proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}
  glVertexAttribL4ui64NV*: proc(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}
  glVertexAttribL4ui64vNV*: proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}
  glVertexAttribLFormat*: proc(attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}
  glVertexAttribLFormatNV*: proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}
  glVertexAttribLPointer*: proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexAttribLPointerEXT*: proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexAttribP1ui*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}
  glVertexAttribP1uiv*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}
  glVertexAttribP2ui*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}
  glVertexAttribP2uiv*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}
  glVertexAttribP3ui*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}
  glVertexAttribP3uiv*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}
  glVertexAttribP4ui*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}
  glVertexAttribP4uiv*: proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}
  glVertexAttribParameteriAMD*: proc(index: GLuint, pname: GLenum, param: GLint): void {.stdcall.}
  glVertexAttribPointer*: proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexAttribPointerARB*: proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexAttribPointerNV*: proc(index: GLuint, fsize: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexAttribs1dvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribs1fvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glVertexAttribs1hvNV*: proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttribs1svNV*: proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}
  glVertexAttribs2dvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribs2fvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glVertexAttribs2hvNV*: proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttribs2svNV*: proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}
  glVertexAttribs3dvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribs3fvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glVertexAttribs3hvNV*: proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttribs3svNV*: proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}
  glVertexAttribs4dvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}
  glVertexAttribs4fvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glVertexAttribs4hvNV*: proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}
  glVertexAttribs4svNV*: proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}
  glVertexAttribs4ubvNV*: proc(index: GLuint, count: GLsizei, v: ptr GLubyte): void {.stdcall.}
  glVertexBindingDivisor*: proc(bindingindex: GLuint, divisor: GLuint): void {.stdcall.}
  glVertexBlendARB*: proc(count: GLint): void {.stdcall.}
  glVertexBlendEnvfATI*: proc(pname: GLenum, param: GLfloat): void {.stdcall.}
  glVertexBlendEnviATI*: proc(pname: GLenum, param: GLint): void {.stdcall.}
  glVertexFormatNV*: proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}
  glVertexP2ui*: proc(`type`: GLenum, value: GLuint): void {.stdcall.}
  glVertexP2uiv*: proc(`type`: GLenum, value: ptr GLuint): void {.stdcall.}
  glVertexP3ui*: proc(`type`: GLenum, value: GLuint): void {.stdcall.}
  glVertexP3uiv*: proc(`type`: GLenum, value: ptr GLuint): void {.stdcall.}
  glVertexP4ui*: proc(`type`: GLenum, value: GLuint): void {.stdcall.}
  glVertexP4uiv*: proc(`type`: GLenum, value: ptr GLuint): void {.stdcall.}
  glVertexPointer*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexPointerEXT*: proc(size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexPointerListIBM*: proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}
  glVertexPointervINTEL*: proc(size: GLint, `type`: GLenum, pointer: ptr pointer): void {.stdcall.}
  glVertexStream1dATI*: proc(stream: GLenum, x: GLdouble): void {.stdcall.}
  glVertexStream1dvATI*: proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}
  glVertexStream1fATI*: proc(stream: GLenum, x: GLfloat): void {.stdcall.}
  glVertexStream1fvATI*: proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}
  glVertexStream1iATI*: proc(stream: GLenum, x: GLint): void {.stdcall.}
  glVertexStream1ivATI*: proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}
  glVertexStream1sATI*: proc(stream: GLenum, x: GLshort): void {.stdcall.}
  glVertexStream1svATI*: proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}
  glVertexStream2dATI*: proc(stream: GLenum, x: GLdouble, y: GLdouble): void {.stdcall.}
  glVertexStream2dvATI*: proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}
  glVertexStream2fATI*: proc(stream: GLenum, x: GLfloat, y: GLfloat): void {.stdcall.}
  glVertexStream2fvATI*: proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}
  glVertexStream2iATI*: proc(stream: GLenum, x: GLint, y: GLint): void {.stdcall.}
  glVertexStream2ivATI*: proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}
  glVertexStream2sATI*: proc(stream: GLenum, x: GLshort, y: GLshort): void {.stdcall.}
  glVertexStream2svATI*: proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}
  glVertexStream3dATI*: proc(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glVertexStream3dvATI*: proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}
  glVertexStream3fATI*: proc(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glVertexStream3fvATI*: proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}
  glVertexStream3iATI*: proc(stream: GLenum, x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glVertexStream3ivATI*: proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}
  glVertexStream3sATI*: proc(stream: GLenum, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glVertexStream3svATI*: proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}
  glVertexStream4dATI*: proc(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glVertexStream4dvATI*: proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}
  glVertexStream4fATI*: proc(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glVertexStream4fvATI*: proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}
  glVertexStream4iATI*: proc(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glVertexStream4ivATI*: proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}
  glVertexStream4sATI*: proc(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}
  glVertexStream4svATI*: proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}
  glVertexWeightPointerEXT*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glVertexWeightfEXT*: proc(weight: GLfloat): void {.stdcall.}
  glVertexWeightfvEXT*: proc(weight: ptr GLfloat): void {.stdcall.}
  glVertexWeighthNV*: proc(weight: GLhalfNV): void {.stdcall.}
  glVertexWeighthvNV*: proc(weight: ptr GLhalfNV): void {.stdcall.}
  glVideoCaptureNV*: proc(video_capture_slot: GLuint, sequence_num: ptr GLuint, capture_time: ptr GLuint64EXT): GLenum {.stdcall.}
  glVideoCaptureStreamParameterdvNV*: proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}
  glVideoCaptureStreamParameterfvNV*: proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}
  glVideoCaptureStreamParameterivNV*: proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}
  glViewport*: proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}
  glViewportArrayv*: proc(first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glViewportArrayvNV*: proc(first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glViewportArrayvOES*: proc(first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}
  glViewportIndexedf*: proc(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat): void {.stdcall.}
  glViewportIndexedfOES*: proc(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat): void {.stdcall.}
  glViewportIndexedfNV*: proc(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat): void {.stdcall.}
  glViewportIndexedfv*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glViewportIndexedfvOES*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glViewportIndexedfvNV*: proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}
  glViewportPositionWScaleNV*: proc(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat): void {.stdcall.}
  glViewportSwizzleNV*: proc(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum): void {.stdcall.}
  glWaitSemaphoreEXT*: proc(semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, srcLayouts: ptr GLenum): void {.stdcall.}
  glWaitSemaphoreui64NVX*: proc(waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64): void {.stdcall.}
  glWaitSync*: proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): void {.stdcall.}
  glWaitSyncAPPLE*: proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): void {.stdcall.}
  glWeightPathsNV*: proc(resultPath: GLuint, numPaths: GLsizei, paths: ptr GLuint, weights: ptr GLfloat): void {.stdcall.}
  glWeightPointerARB*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glWeightPointerOES*: proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}
  glWeightbvARB*: proc(size: GLint, weights: ptr GLbyte): void {.stdcall.}
  glWeightdvARB*: proc(size: GLint, weights: ptr GLdouble): void {.stdcall.}
  glWeightfvARB*: proc(size: GLint, weights: ptr GLfloat): void {.stdcall.}
  glWeightivARB*: proc(size: GLint, weights: ptr GLint): void {.stdcall.}
  glWeightsvARB*: proc(size: GLint, weights: ptr GLshort): void {.stdcall.}
  glWeightubvARB*: proc(size: GLint, weights: ptr GLubyte): void {.stdcall.}
  glWeightuivARB*: proc(size: GLint, weights: ptr GLuint): void {.stdcall.}
  glWeightusvARB*: proc(size: GLint, weights: ptr GLushort): void {.stdcall.}
  glWindowPos2d*: proc(x: GLdouble, y: GLdouble): void {.stdcall.}
  glWindowPos2dARB*: proc(x: GLdouble, y: GLdouble): void {.stdcall.}
  glWindowPos2dMESA*: proc(x: GLdouble, y: GLdouble): void {.stdcall.}
  glWindowPos2dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glWindowPos2dvARB*: proc(v: ptr GLdouble): void {.stdcall.}
  glWindowPos2dvMESA*: proc(v: ptr GLdouble): void {.stdcall.}
  glWindowPos2f*: proc(x: GLfloat, y: GLfloat): void {.stdcall.}
  glWindowPos2fARB*: proc(x: GLfloat, y: GLfloat): void {.stdcall.}
  glWindowPos2fMESA*: proc(x: GLfloat, y: GLfloat): void {.stdcall.}
  glWindowPos2fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glWindowPos2fvARB*: proc(v: ptr GLfloat): void {.stdcall.}
  glWindowPos2fvMESA*: proc(v: ptr GLfloat): void {.stdcall.}
  glWindowPos2i*: proc(x: GLint, y: GLint): void {.stdcall.}
  glWindowPos2iARB*: proc(x: GLint, y: GLint): void {.stdcall.}
  glWindowPos2iMESA*: proc(x: GLint, y: GLint): void {.stdcall.}
  glWindowPos2iv*: proc(v: ptr GLint): void {.stdcall.}
  glWindowPos2ivARB*: proc(v: ptr GLint): void {.stdcall.}
  glWindowPos2ivMESA*: proc(v: ptr GLint): void {.stdcall.}
  glWindowPos2s*: proc(x: GLshort, y: GLshort): void {.stdcall.}
  glWindowPos2sARB*: proc(x: GLshort, y: GLshort): void {.stdcall.}
  glWindowPos2sMESA*: proc(x: GLshort, y: GLshort): void {.stdcall.}
  glWindowPos2sv*: proc(v: ptr GLshort): void {.stdcall.}
  glWindowPos2svARB*: proc(v: ptr GLshort): void {.stdcall.}
  glWindowPos2svMESA*: proc(v: ptr GLshort): void {.stdcall.}
  glWindowPos3d*: proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glWindowPos3dARB*: proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glWindowPos3dMESA*: proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}
  glWindowPos3dv*: proc(v: ptr GLdouble): void {.stdcall.}
  glWindowPos3dvARB*: proc(v: ptr GLdouble): void {.stdcall.}
  glWindowPos3dvMESA*: proc(v: ptr GLdouble): void {.stdcall.}
  glWindowPos3f*: proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glWindowPos3fARB*: proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glWindowPos3fMESA*: proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}
  glWindowPos3fv*: proc(v: ptr GLfloat): void {.stdcall.}
  glWindowPos3fvARB*: proc(v: ptr GLfloat): void {.stdcall.}
  glWindowPos3fvMESA*: proc(v: ptr GLfloat): void {.stdcall.}
  glWindowPos3i*: proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glWindowPos3iARB*: proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glWindowPos3iMESA*: proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}
  glWindowPos3iv*: proc(v: ptr GLint): void {.stdcall.}
  glWindowPos3ivARB*: proc(v: ptr GLint): void {.stdcall.}
  glWindowPos3ivMESA*: proc(v: ptr GLint): void {.stdcall.}
  glWindowPos3s*: proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glWindowPos3sARB*: proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glWindowPos3sMESA*: proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}
  glWindowPos3sv*: proc(v: ptr GLshort): void {.stdcall.}
  glWindowPos3svARB*: proc(v: ptr GLshort): void {.stdcall.}
  glWindowPos3svMESA*: proc(v: ptr GLshort): void {.stdcall.}
  glWindowPos4dMESA*: proc(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}
  glWindowPos4dvMESA*: proc(v: ptr GLdouble): void {.stdcall.}
  glWindowPos4fMESA*: proc(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}
  glWindowPos4fvMESA*: proc(v: ptr GLfloat): void {.stdcall.}
  glWindowPos4iMESA*: proc(x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}
  glWindowPos4ivMESA*: proc(v: ptr GLint): void {.stdcall.}
  glWindowPos4sMESA*: proc(x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}
  glWindowPos4svMESA*: proc(v: ptr GLshort): void {.stdcall.}
  glWindowRectanglesEXT*: proc(mode: GLenum, count: GLsizei, box: ptr GLint): void {.stdcall.}
  glWriteMaskEXT*: proc(res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum): void {.stdcall.}
  glDrawVkImageNV*: proc(vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat): void {.stdcall.}
  glGetVkProcAddrNV*: proc(name: cstring): GLVULKANPROCNV {.stdcall.}
  glWaitVkSemaphoreNV*: proc(vkSemaphore: GLuint64): void {.stdcall.}
  glSignalVkSemaphoreNV*: proc(vkSemaphore: GLuint64): void {.stdcall.}
  glSignalVkFenceNV*: proc(vkFence: GLuint64): void {.stdcall.}
  glFramebufferParameteriMESA*: proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}
  glGetFramebufferParameterivMESA*: proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}

# OpenGL 1_0 loader
proc glLoad1_0*() =
  glCullFace = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glCullFace"))
  glFrontFace = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glFrontFace"))
  glHint = cast[proc(target: GLenum, mode: GLenum): void {.stdcall.}](glGetProc("glHint"))
  glLineWidth = cast[proc(width: GLfloat): void {.stdcall.}](glGetProc("glLineWidth"))
  glPointSize = cast[proc(size: GLfloat): void {.stdcall.}](glGetProc("glPointSize"))
  glPolygonMode = cast[proc(face: GLenum, mode: GLenum): void {.stdcall.}](glGetProc("glPolygonMode"))
  glScissor = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glScissor"))
  glTexParameterf = cast[proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glTexParameterf"))
  glTexParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glTexParameterfv"))
  glTexParameteri = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glTexParameteri"))
  glTexParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTexParameteriv"))
  glTexImage1D = cast[proc(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexImage1D"))
  glTexImage2D = cast[proc(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexImage2D"))
  glDrawBuffer = cast[proc(buf: GLenum): void {.stdcall.}](glGetProc("glDrawBuffer"))
  glClear = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glClear"))
  glClearColor = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}](glGetProc("glClearColor"))
  glClearStencil = cast[proc(s: GLint): void {.stdcall.}](glGetProc("glClearStencil"))
  glClearDepth = cast[proc(depth: GLdouble): void {.stdcall.}](glGetProc("glClearDepth"))
  glStencilMask = cast[proc(mask: GLuint): void {.stdcall.}](glGetProc("glStencilMask"))
  glColorMask = cast[proc(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void {.stdcall.}](glGetProc("glColorMask"))
  glDepthMask = cast[proc(flag: GLboolean): void {.stdcall.}](glGetProc("glDepthMask"))
  glDisable = cast[proc(cap: GLenum): void {.stdcall.}](glGetProc("glDisable"))
  glEnable = cast[proc(cap: GLenum): void {.stdcall.}](glGetProc("glEnable"))
  glFinish = cast[proc(): void {.stdcall.}](glGetProc("glFinish"))
  glFlush = cast[proc(): void {.stdcall.}](glGetProc("glFlush"))
  glBlendFunc = cast[proc(sfactor: GLenum, dfactor: GLenum): void {.stdcall.}](glGetProc("glBlendFunc"))
  glLogicOp = cast[proc(opcode: GLenum): void {.stdcall.}](glGetProc("glLogicOp"))
  glStencilFunc = cast[proc(`func`: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}](glGetProc("glStencilFunc"))
  glStencilOp = cast[proc(fail: GLenum, zfail: GLenum, zpass: GLenum): void {.stdcall.}](glGetProc("glStencilOp"))
  glDepthFunc = cast[proc(`func`: GLenum): void {.stdcall.}](glGetProc("glDepthFunc"))
  glPixelStoref = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPixelStoref"))
  glPixelStorei = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glPixelStorei"))
  glReadBuffer = cast[proc(src: GLenum): void {.stdcall.}](glGetProc("glReadBuffer"))
  glReadPixels = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glReadPixels"))
  glGetBooleanv = cast[proc(pname: GLenum, data: ptr GLboolean): void {.stdcall.}](glGetProc("glGetBooleanv"))
  glGetDoublev = cast[proc(pname: GLenum, data: ptr GLdouble): void {.stdcall.}](glGetProc("glGetDoublev"))
  glGetError = cast[proc(): GLenum {.stdcall.}](glGetProc("glGetError"))
  glGetFloatv = cast[proc(pname: GLenum, data: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFloatv"))
  glGetIntegerv = cast[proc(pname: GLenum, data: ptr GLint): void {.stdcall.}](glGetProc("glGetIntegerv"))
  glGetString = cast[proc(name: GLenum): ptr GLubyte {.stdcall.}](glGetProc("glGetString"))
  glGetTexImage = cast[proc(target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glGetTexImage"))
  glGetTexParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTexParameteriv"))
  glGetTexLevelParameterfv = cast[proc(target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTexLevelParameterfv"))
  glGetTexLevelParameteriv = cast[proc(target: GLenum, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTexLevelParameteriv"))
  glIsEnabled = cast[proc(cap: GLenum): GLboolean {.stdcall.}](glGetProc("glIsEnabled"))
  glDepthRange = cast[proc(n: GLdouble, f: GLdouble): void {.stdcall.}](glGetProc("glDepthRange"))
  glViewport = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glViewport"))
  glNewList = cast[proc(list: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glNewList"))
  glEndList = cast[proc(): void {.stdcall.}](glGetProc("glEndList"))
  glCallList = cast[proc(list: GLuint): void {.stdcall.}](glGetProc("glCallList"))
  glCallLists = cast[proc(n: GLsizei, `type`: GLenum, lists: pointer): void {.stdcall.}](glGetProc("glCallLists"))
  glDeleteLists = cast[proc(list: GLuint, range: GLsizei): void {.stdcall.}](glGetProc("glDeleteLists"))
  glGenLists = cast[proc(range: GLsizei): GLuint {.stdcall.}](glGetProc("glGenLists"))
  glListBase = cast[proc(base: GLuint): void {.stdcall.}](glGetProc("glListBase"))
  glBegin = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glBegin"))
  glBitmap = cast[proc(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ptr GLubyte): void {.stdcall.}](glGetProc("glBitmap"))
  glColor3b = cast[proc(red: GLbyte, green: GLbyte, blue: GLbyte): void {.stdcall.}](glGetProc("glColor3b"))
  glColor3bv = cast[proc(v: ptr GLbyte): void {.stdcall.}](glGetProc("glColor3bv"))
  glColor3d = cast[proc(red: GLdouble, green: GLdouble, blue: GLdouble): void {.stdcall.}](glGetProc("glColor3d"))
  glColor3dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glColor3dv"))
  glColor3f = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat): void {.stdcall.}](glGetProc("glColor3f"))
  glColor3fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glColor3fv"))
  glColor3i = cast[proc(red: GLint, green: GLint, blue: GLint): void {.stdcall.}](glGetProc("glColor3i"))
  glColor3iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glColor3iv"))
  glColor3s = cast[proc(red: GLshort, green: GLshort, blue: GLshort): void {.stdcall.}](glGetProc("glColor3s"))
  glColor3sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glColor3sv"))
  glColor3ub = cast[proc(red: GLubyte, green: GLubyte, blue: GLubyte): void {.stdcall.}](glGetProc("glColor3ub"))
  glColor3ubv = cast[proc(v: ptr GLubyte): void {.stdcall.}](glGetProc("glColor3ubv"))
  glColor3ui = cast[proc(red: GLuint, green: GLuint, blue: GLuint): void {.stdcall.}](glGetProc("glColor3ui"))
  glColor3uiv = cast[proc(v: ptr GLuint): void {.stdcall.}](glGetProc("glColor3uiv"))
  glColor3us = cast[proc(red: GLushort, green: GLushort, blue: GLushort): void {.stdcall.}](glGetProc("glColor3us"))
  glColor3usv = cast[proc(v: ptr GLushort): void {.stdcall.}](glGetProc("glColor3usv"))
  glColor4b = cast[proc(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte): void {.stdcall.}](glGetProc("glColor4b"))
  glColor4bv = cast[proc(v: ptr GLbyte): void {.stdcall.}](glGetProc("glColor4bv"))
  glColor4d = cast[proc(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble): void {.stdcall.}](glGetProc("glColor4d"))
  glColor4dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glColor4dv"))
  glColor4f = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}](glGetProc("glColor4f"))
  glColor4fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glColor4fv"))
  glColor4i = cast[proc(red: GLint, green: GLint, blue: GLint, alpha: GLint): void {.stdcall.}](glGetProc("glColor4i"))
  glColor4iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glColor4iv"))
  glColor4s = cast[proc(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort): void {.stdcall.}](glGetProc("glColor4s"))
  glColor4sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glColor4sv"))
  glColor4ub = cast[proc(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte): void {.stdcall.}](glGetProc("glColor4ub"))
  glColor4ubv = cast[proc(v: ptr GLubyte): void {.stdcall.}](glGetProc("glColor4ubv"))
  glColor4ui = cast[proc(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint): void {.stdcall.}](glGetProc("glColor4ui"))
  glColor4uiv = cast[proc(v: ptr GLuint): void {.stdcall.}](glGetProc("glColor4uiv"))
  glColor4us = cast[proc(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort): void {.stdcall.}](glGetProc("glColor4us"))
  glColor4usv = cast[proc(v: ptr GLushort): void {.stdcall.}](glGetProc("glColor4usv"))
  glEdgeFlag = cast[proc(flag: GLboolean): void {.stdcall.}](glGetProc("glEdgeFlag"))
  glEdgeFlagv = cast[proc(flag: ptr GLboolean): void {.stdcall.}](glGetProc("glEdgeFlagv"))
  glEnd = cast[proc(): void {.stdcall.}](glGetProc("glEnd"))
  glIndexd = cast[proc(c: GLdouble): void {.stdcall.}](glGetProc("glIndexd"))
  glIndexdv = cast[proc(c: ptr GLdouble): void {.stdcall.}](glGetProc("glIndexdv"))
  glIndexf = cast[proc(c: GLfloat): void {.stdcall.}](glGetProc("glIndexf"))
  glIndexfv = cast[proc(c: ptr GLfloat): void {.stdcall.}](glGetProc("glIndexfv"))
  glIndexi = cast[proc(c: GLint): void {.stdcall.}](glGetProc("glIndexi"))
  glIndexiv = cast[proc(c: ptr GLint): void {.stdcall.}](glGetProc("glIndexiv"))
  glIndexs = cast[proc(c: GLshort): void {.stdcall.}](glGetProc("glIndexs"))
  glIndexsv = cast[proc(c: ptr GLshort): void {.stdcall.}](glGetProc("glIndexsv"))
  glNormal3b = cast[proc(nx: GLbyte, ny: GLbyte, nz: GLbyte): void {.stdcall.}](glGetProc("glNormal3b"))
  glNormal3bv = cast[proc(v: ptr GLbyte): void {.stdcall.}](glGetProc("glNormal3bv"))
  glNormal3d = cast[proc(nx: GLdouble, ny: GLdouble, nz: GLdouble): void {.stdcall.}](glGetProc("glNormal3d"))
  glNormal3dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glNormal3dv"))
  glNormal3f = cast[proc(nx: GLfloat, ny: GLfloat, nz: GLfloat): void {.stdcall.}](glGetProc("glNormal3f"))
  glNormal3fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glNormal3fv"))
  glNormal3i = cast[proc(nx: GLint, ny: GLint, nz: GLint): void {.stdcall.}](glGetProc("glNormal3i"))
  glNormal3iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glNormal3iv"))
  glNormal3s = cast[proc(nx: GLshort, ny: GLshort, nz: GLshort): void {.stdcall.}](glGetProc("glNormal3s"))
  glNormal3sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glNormal3sv"))
  glRasterPos2d = cast[proc(x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glRasterPos2d"))
  glRasterPos2dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glRasterPos2dv"))
  glRasterPos2f = cast[proc(x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glRasterPos2f"))
  glRasterPos2fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glRasterPos2fv"))
  glRasterPos2i = cast[proc(x: GLint, y: GLint): void {.stdcall.}](glGetProc("glRasterPos2i"))
  glRasterPos2iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glRasterPos2iv"))
  glRasterPos2s = cast[proc(x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glRasterPos2s"))
  glRasterPos2sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glRasterPos2sv"))
  glRasterPos3d = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glRasterPos3d"))
  glRasterPos3dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glRasterPos3dv"))
  glRasterPos3f = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glRasterPos3f"))
  glRasterPos3fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glRasterPos3fv"))
  glRasterPos3i = cast[proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glRasterPos3i"))
  glRasterPos3iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glRasterPos3iv"))
  glRasterPos3s = cast[proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glRasterPos3s"))
  glRasterPos3sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glRasterPos3sv"))
  glRasterPos4d = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glRasterPos4d"))
  glRasterPos4dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glRasterPos4dv"))
  glRasterPos4f = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glRasterPos4f"))
  glRasterPos4fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glRasterPos4fv"))
  glRasterPos4i = cast[proc(x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glRasterPos4i"))
  glRasterPos4iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glRasterPos4iv"))
  glRasterPos4s = cast[proc(x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glRasterPos4s"))
  glRasterPos4sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glRasterPos4sv"))
  glRectd = cast[proc(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble): void {.stdcall.}](glGetProc("glRectd"))
  glRectdv = cast[proc(v1: ptr GLdouble, v2: ptr GLdouble): void {.stdcall.}](glGetProc("glRectdv"))
  glRectf = cast[proc(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat): void {.stdcall.}](glGetProc("glRectf"))
  glRectfv = cast[proc(v1: ptr GLfloat, v2: ptr GLfloat): void {.stdcall.}](glGetProc("glRectfv"))
  glRecti = cast[proc(x1: GLint, y1: GLint, x2: GLint, y2: GLint): void {.stdcall.}](glGetProc("glRecti"))
  glRectiv = cast[proc(v1: ptr GLint, v2: ptr GLint): void {.stdcall.}](glGetProc("glRectiv"))
  glRects = cast[proc(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort): void {.stdcall.}](glGetProc("glRects"))
  glRectsv = cast[proc(v1: ptr GLshort, v2: ptr GLshort): void {.stdcall.}](glGetProc("glRectsv"))
  glTexCoord1d = cast[proc(s: GLdouble): void {.stdcall.}](glGetProc("glTexCoord1d"))
  glTexCoord1dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glTexCoord1dv"))
  glTexCoord1f = cast[proc(s: GLfloat): void {.stdcall.}](glGetProc("glTexCoord1f"))
  glTexCoord1fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord1fv"))
  glTexCoord1i = cast[proc(s: GLint): void {.stdcall.}](glGetProc("glTexCoord1i"))
  glTexCoord1iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glTexCoord1iv"))
  glTexCoord1s = cast[proc(s: GLshort): void {.stdcall.}](glGetProc("glTexCoord1s"))
  glTexCoord1sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glTexCoord1sv"))
  glTexCoord2d = cast[proc(s: GLdouble, t: GLdouble): void {.stdcall.}](glGetProc("glTexCoord2d"))
  glTexCoord2dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glTexCoord2dv"))
  glTexCoord2f = cast[proc(s: GLfloat, t: GLfloat): void {.stdcall.}](glGetProc("glTexCoord2f"))
  glTexCoord2fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fv"))
  glTexCoord2i = cast[proc(s: GLint, t: GLint): void {.stdcall.}](glGetProc("glTexCoord2i"))
  glTexCoord2iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glTexCoord2iv"))
  glTexCoord2s = cast[proc(s: GLshort, t: GLshort): void {.stdcall.}](glGetProc("glTexCoord2s"))
  glTexCoord2sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glTexCoord2sv"))
  glTexCoord3d = cast[proc(s: GLdouble, t: GLdouble, r: GLdouble): void {.stdcall.}](glGetProc("glTexCoord3d"))
  glTexCoord3dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glTexCoord3dv"))
  glTexCoord3f = cast[proc(s: GLfloat, t: GLfloat, r: GLfloat): void {.stdcall.}](glGetProc("glTexCoord3f"))
  glTexCoord3fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord3fv"))
  glTexCoord3i = cast[proc(s: GLint, t: GLint, r: GLint): void {.stdcall.}](glGetProc("glTexCoord3i"))
  glTexCoord3iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glTexCoord3iv"))
  glTexCoord3s = cast[proc(s: GLshort, t: GLshort, r: GLshort): void {.stdcall.}](glGetProc("glTexCoord3s"))
  glTexCoord3sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glTexCoord3sv"))
  glTexCoord4d = cast[proc(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble): void {.stdcall.}](glGetProc("glTexCoord4d"))
  glTexCoord4dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glTexCoord4dv"))
  glTexCoord4f = cast[proc(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat): void {.stdcall.}](glGetProc("glTexCoord4f"))
  glTexCoord4fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord4fv"))
  glTexCoord4i = cast[proc(s: GLint, t: GLint, r: GLint, q: GLint): void {.stdcall.}](glGetProc("glTexCoord4i"))
  glTexCoord4iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glTexCoord4iv"))
  glTexCoord4s = cast[proc(s: GLshort, t: GLshort, r: GLshort, q: GLshort): void {.stdcall.}](glGetProc("glTexCoord4s"))
  glTexCoord4sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glTexCoord4sv"))
  glVertex2d = cast[proc(x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertex2d"))
  glVertex2dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertex2dv"))
  glVertex2f = cast[proc(x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glVertex2f"))
  glVertex2fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertex2fv"))
  glVertex2i = cast[proc(x: GLint, y: GLint): void {.stdcall.}](glGetProc("glVertex2i"))
  glVertex2iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glVertex2iv"))
  glVertex2s = cast[proc(x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glVertex2s"))
  glVertex2sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glVertex2sv"))
  glVertex3d = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertex3d"))
  glVertex3dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertex3dv"))
  glVertex3f = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glVertex3f"))
  glVertex3fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertex3fv"))
  glVertex3i = cast[proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glVertex3i"))
  glVertex3iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glVertex3iv"))
  glVertex3s = cast[proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glVertex3s"))
  glVertex3sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glVertex3sv"))
  glVertex4d = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertex4d"))
  glVertex4dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertex4dv"))
  glVertex4f = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glVertex4f"))
  glVertex4fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertex4fv"))
  glVertex4i = cast[proc(x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glVertex4i"))
  glVertex4iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glVertex4iv"))
  glVertex4s = cast[proc(x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glVertex4s"))
  glVertex4sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glVertex4sv"))
  glClipPlane = cast[proc(plane: GLenum, equation: ptr GLdouble): void {.stdcall.}](glGetProc("glClipPlane"))
  glColorMaterial = cast[proc(face: GLenum, mode: GLenum): void {.stdcall.}](glGetProc("glColorMaterial"))
  glFogf = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glFogf"))
  glFogfv = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glFogfv"))
  glFogi = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glFogi"))
  glFogiv = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glFogiv"))
  glLightf = cast[proc(light: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glLightf"))
  glLightfv = cast[proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glLightfv"))
  glLighti = cast[proc(light: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glLighti"))
  glLightiv = cast[proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glLightiv"))
  glLightModelf = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glLightModelf"))
  glLightModelfv = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glLightModelfv"))
  glLightModeli = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glLightModeli"))
  glLightModeliv = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glLightModeliv"))
  glLineStipple = cast[proc(factor: GLint, pattern: GLushort): void {.stdcall.}](glGetProc("glLineStipple"))
  glMaterialf = cast[proc(face: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glMaterialf"))
  glMaterialfv = cast[proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glMaterialfv"))
  glMateriali = cast[proc(face: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glMateriali"))
  glMaterialiv = cast[proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMaterialiv"))
  glPolygonStipple = cast[proc(mask: ptr GLubyte): void {.stdcall.}](glGetProc("glPolygonStipple"))
  glShadeModel = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glShadeModel"))
  glTexEnvf = cast[proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glTexEnvf"))
  glTexEnvfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glTexEnvfv"))
  glTexEnvi = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glTexEnvi"))
  glTexEnviv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTexEnviv"))
  glTexGend = cast[proc(coord: GLenum, pname: GLenum, param: GLdouble): void {.stdcall.}](glGetProc("glTexGend"))
  glTexGendv = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glTexGendv"))
  glTexGenf = cast[proc(coord: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glTexGenf"))
  glTexGenfv = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glTexGenfv"))
  glTexGeni = cast[proc(coord: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glTexGeni"))
  glTexGeniv = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTexGeniv"))
  glFeedbackBuffer = cast[proc(size: GLsizei, `type`: GLenum, buffer: ptr GLfloat): void {.stdcall.}](glGetProc("glFeedbackBuffer"))
  glSelectBuffer = cast[proc(size: GLsizei, buffer: ptr GLuint): void {.stdcall.}](glGetProc("glSelectBuffer"))
  glRenderMode = cast[proc(mode: GLenum): GLint {.stdcall.}](glGetProc("glRenderMode"))
  glInitNames = cast[proc(): void {.stdcall.}](glGetProc("glInitNames"))
  glLoadName = cast[proc(name: GLuint): void {.stdcall.}](glGetProc("glLoadName"))
  glPassThrough = cast[proc(token: GLfloat): void {.stdcall.}](glGetProc("glPassThrough"))
  glPopName = cast[proc(): void {.stdcall.}](glGetProc("glPopName"))
  glPushName = cast[proc(name: GLuint): void {.stdcall.}](glGetProc("glPushName"))
  glClearAccum = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}](glGetProc("glClearAccum"))
  glClearIndex = cast[proc(c: GLfloat): void {.stdcall.}](glGetProc("glClearIndex"))
  glIndexMask = cast[proc(mask: GLuint): void {.stdcall.}](glGetProc("glIndexMask"))
  glAccum = cast[proc(op: GLenum, value: GLfloat): void {.stdcall.}](glGetProc("glAccum"))
  glPopAttrib = cast[proc(): void {.stdcall.}](glGetProc("glPopAttrib"))
  glPushAttrib = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glPushAttrib"))
  glMap1d = cast[proc(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble): void {.stdcall.}](glGetProc("glMap1d"))
  glMap1f = cast[proc(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat): void {.stdcall.}](glGetProc("glMap1f"))
  glMap2d = cast[proc(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble): void {.stdcall.}](glGetProc("glMap2d"))
  glMap2f = cast[proc(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat): void {.stdcall.}](glGetProc("glMap2f"))
  glMapGrid1d = cast[proc(un: GLint, u1: GLdouble, u2: GLdouble): void {.stdcall.}](glGetProc("glMapGrid1d"))
  glMapGrid1f = cast[proc(un: GLint, u1: GLfloat, u2: GLfloat): void {.stdcall.}](glGetProc("glMapGrid1f"))
  glMapGrid2d = cast[proc(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble): void {.stdcall.}](glGetProc("glMapGrid2d"))
  glMapGrid2f = cast[proc(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat): void {.stdcall.}](glGetProc("glMapGrid2f"))
  glEvalCoord1d = cast[proc(u: GLdouble): void {.stdcall.}](glGetProc("glEvalCoord1d"))
  glEvalCoord1dv = cast[proc(u: ptr GLdouble): void {.stdcall.}](glGetProc("glEvalCoord1dv"))
  glEvalCoord1f = cast[proc(u: GLfloat): void {.stdcall.}](glGetProc("glEvalCoord1f"))
  glEvalCoord1fv = cast[proc(u: ptr GLfloat): void {.stdcall.}](glGetProc("glEvalCoord1fv"))
  glEvalCoord2d = cast[proc(u: GLdouble, v: GLdouble): void {.stdcall.}](glGetProc("glEvalCoord2d"))
  glEvalCoord2dv = cast[proc(u: ptr GLdouble): void {.stdcall.}](glGetProc("glEvalCoord2dv"))
  glEvalCoord2f = cast[proc(u: GLfloat, v: GLfloat): void {.stdcall.}](glGetProc("glEvalCoord2f"))
  glEvalCoord2fv = cast[proc(u: ptr GLfloat): void {.stdcall.}](glGetProc("glEvalCoord2fv"))
  glEvalMesh1 = cast[proc(mode: GLenum, i1: GLint, i2: GLint): void {.stdcall.}](glGetProc("glEvalMesh1"))
  glEvalPoint1 = cast[proc(i: GLint): void {.stdcall.}](glGetProc("glEvalPoint1"))
  glEvalMesh2 = cast[proc(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint): void {.stdcall.}](glGetProc("glEvalMesh2"))
  glEvalPoint2 = cast[proc(i: GLint, j: GLint): void {.stdcall.}](glGetProc("glEvalPoint2"))
  glAlphaFunc = cast[proc(`func`: GLenum, `ref`: GLfloat): void {.stdcall.}](glGetProc("glAlphaFunc"))
  glPixelZoom = cast[proc(xfactor: GLfloat, yfactor: GLfloat): void {.stdcall.}](glGetProc("glPixelZoom"))
  glPixelTransferf = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPixelTransferf"))
  glPixelTransferi = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glPixelTransferi"))
  glPixelMapfv = cast[proc(map: GLenum, mapsize: GLsizei, values: ptr GLfloat): void {.stdcall.}](glGetProc("glPixelMapfv"))
  glPixelMapuiv = cast[proc(map: GLenum, mapsize: GLsizei, values: ptr GLuint): void {.stdcall.}](glGetProc("glPixelMapuiv"))
  glPixelMapusv = cast[proc(map: GLenum, mapsize: GLsizei, values: ptr GLushort): void {.stdcall.}](glGetProc("glPixelMapusv"))
  glCopyPixels = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, `type`: GLenum): void {.stdcall.}](glGetProc("glCopyPixels"))
  glDrawPixels = cast[proc(width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glDrawPixels"))
  glGetClipPlane = cast[proc(plane: GLenum, equation: ptr GLdouble): void {.stdcall.}](glGetProc("glGetClipPlane"))
  glGetLightfv = cast[proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetLightfv"))
  glGetLightiv = cast[proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetLightiv"))
  glGetMapdv = cast[proc(target: GLenum, query: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glGetMapdv"))
  glGetMapfv = cast[proc(target: GLenum, query: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMapfv"))
  glGetMapiv = cast[proc(target: GLenum, query: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glGetMapiv"))
  glGetMaterialfv = cast[proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMaterialfv"))
  glGetMaterialiv = cast[proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMaterialiv"))
  glGetPixelMapfv = cast[proc(map: GLenum, values: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPixelMapfv"))
  glGetPixelMapuiv = cast[proc(map: GLenum, values: ptr GLuint): void {.stdcall.}](glGetProc("glGetPixelMapuiv"))
  glGetPixelMapusv = cast[proc(map: GLenum, values: ptr GLushort): void {.stdcall.}](glGetProc("glGetPixelMapusv"))
  glGetPolygonStipple = cast[proc(mask: ptr GLubyte): void {.stdcall.}](glGetProc("glGetPolygonStipple"))
  glGetTexEnvfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTexEnvfv"))
  glGetTexEnviv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTexEnviv"))
  glGetTexGendv = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetTexGendv"))
  glGetTexGenfv = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTexGenfv"))
  glGetTexGeniv = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTexGeniv"))
  glIsList = cast[proc(list: GLuint): GLboolean {.stdcall.}](glGetProc("glIsList"))
  glFrustum = cast[proc(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}](glGetProc("glFrustum"))
  glLoadIdentity = cast[proc(): void {.stdcall.}](glGetProc("glLoadIdentity"))
  glLoadMatrixf = cast[proc(m: ptr GLfloat): void {.stdcall.}](glGetProc("glLoadMatrixf"))
  glLoadMatrixd = cast[proc(m: ptr GLdouble): void {.stdcall.}](glGetProc("glLoadMatrixd"))
  glMatrixMode = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glMatrixMode"))
  glMultMatrixf = cast[proc(m: ptr GLfloat): void {.stdcall.}](glGetProc("glMultMatrixf"))
  glMultMatrixd = cast[proc(m: ptr GLdouble): void {.stdcall.}](glGetProc("glMultMatrixd"))
  glOrtho = cast[proc(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}](glGetProc("glOrtho"))
  glPopMatrix = cast[proc(): void {.stdcall.}](glGetProc("glPopMatrix"))
  glPushMatrix = cast[proc(): void {.stdcall.}](glGetProc("glPushMatrix"))
  glRotated = cast[proc(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glRotated"))
  glRotatef = cast[proc(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glRotatef"))
  glScaled = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glScaled"))
  glScalef = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glScalef"))
  glTranslated = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glTranslated"))
  glTranslatef = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glTranslatef"))

# OpenGL 1_1 loader
proc glLoad1_1*() =
  glDrawArrays = cast[proc(mode: GLenum, first: GLint, count: GLsizei): void {.stdcall.}](glGetProc("glDrawArrays"))
  glDrawElements = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer): void {.stdcall.}](glGetProc("glDrawElements"))
  glGetPointerv = cast[proc(pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetPointerv"))
  glPolygonOffset = cast[proc(factor: GLfloat, units: GLfloat): void {.stdcall.}](glGetProc("glPolygonOffset"))
  glCopyTexImage1D = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyTexImage1D"))
  glCopyTexImage2D = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyTexImage2D"))
  glCopyTexSubImage1D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyTexSubImage1D"))
  glCopyTexSubImage2D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTexSubImage2D"))
  glTexSubImage1D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexSubImage1D"))
  glTexSubImage2D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexSubImage2D"))
  glBindTexture = cast[proc(target: GLenum, texture: GLuint): void {.stdcall.}](glGetProc("glBindTexture"))
  glDeleteTextures = cast[proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteTextures"))
  glGenTextures = cast[proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glGenTextures"))
  glIsTexture = cast[proc(texture: GLuint): GLboolean {.stdcall.}](glGetProc("glIsTexture"))
  glArrayElement = cast[proc(i: GLint): void {.stdcall.}](glGetProc("glArrayElement"))
  glColorPointer = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glColorPointer"))
  glDisableClientState = cast[proc(array: GLenum): void {.stdcall.}](glGetProc("glDisableClientState"))
  glEdgeFlagPointer = cast[proc(stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glEdgeFlagPointer"))
  glEnableClientState = cast[proc(array: GLenum): void {.stdcall.}](glGetProc("glEnableClientState"))
  glIndexPointer = cast[proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glIndexPointer"))
  glInterleavedArrays = cast[proc(format: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glInterleavedArrays"))
  glNormalPointer = cast[proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glNormalPointer"))
  glTexCoordPointer = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glTexCoordPointer"))
  glVertexPointer = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexPointer"))
  glAreTexturesResident = cast[proc(n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}](glGetProc("glAreTexturesResident"))
  glPrioritizeTextures = cast[proc(n: GLsizei, textures: ptr GLuint, priorities: ptr GLfloat): void {.stdcall.}](glGetProc("glPrioritizeTextures"))
  glIndexub = cast[proc(c: GLubyte): void {.stdcall.}](glGetProc("glIndexub"))
  glIndexubv = cast[proc(c: ptr GLubyte): void {.stdcall.}](glGetProc("glIndexubv"))
  glPopClientAttrib = cast[proc(): void {.stdcall.}](glGetProc("glPopClientAttrib"))
  glPushClientAttrib = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glPushClientAttrib"))

# OpenGL 1_2 loader
proc glLoad1_2*() =
  glDrawRangeElements = cast[proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer): void {.stdcall.}](glGetProc("glDrawRangeElements"))
  glTexImage3D = cast[proc(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexImage3D"))
  glTexSubImage3D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexSubImage3D"))
  glCopyTexSubImage3D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTexSubImage3D"))

# OpenGL 1_3 loader
proc glLoad1_3*() =
  glActiveTexture = cast[proc(texture: GLenum): void {.stdcall.}](glGetProc("glActiveTexture"))
  glSampleCoverage = cast[proc(value: GLfloat, invert: GLboolean): void {.stdcall.}](glGetProc("glSampleCoverage"))
  glCompressedTexImage3D = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexImage3D"))
  glCompressedTexImage2D = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexImage2D"))
  glCompressedTexImage1D = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexImage1D"))
  glCompressedTexSubImage3D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexSubImage3D"))
  glCompressedTexSubImage2D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexSubImage2D"))
  glCompressedTexSubImage1D = cast[proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexSubImage1D"))
  glGetCompressedTexImage = cast[proc(target: GLenum, level: GLint, img: pointer): void {.stdcall.}](glGetProc("glGetCompressedTexImage"))
  glClientActiveTexture = cast[proc(texture: GLenum): void {.stdcall.}](glGetProc("glClientActiveTexture"))
  glMultiTexCoord1d = cast[proc(target: GLenum, s: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord1d"))
  glMultiTexCoord1dv = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord1dv"))
  glMultiTexCoord1f = cast[proc(target: GLenum, s: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord1f"))
  glMultiTexCoord1fv = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord1fv"))
  glMultiTexCoord1i = cast[proc(target: GLenum, s: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord1i"))
  glMultiTexCoord1iv = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord1iv"))
  glMultiTexCoord1s = cast[proc(target: GLenum, s: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord1s"))
  glMultiTexCoord1sv = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord1sv"))
  glMultiTexCoord2d = cast[proc(target: GLenum, s: GLdouble, t: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord2d"))
  glMultiTexCoord2dv = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord2dv"))
  glMultiTexCoord2f = cast[proc(target: GLenum, s: GLfloat, t: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord2f"))
  glMultiTexCoord2fv = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord2fv"))
  glMultiTexCoord2i = cast[proc(target: GLenum, s: GLint, t: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord2i"))
  glMultiTexCoord2iv = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord2iv"))
  glMultiTexCoord2s = cast[proc(target: GLenum, s: GLshort, t: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord2s"))
  glMultiTexCoord2sv = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord2sv"))
  glMultiTexCoord3d = cast[proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord3d"))
  glMultiTexCoord3dv = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord3dv"))
  glMultiTexCoord3f = cast[proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord3f"))
  glMultiTexCoord3fv = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord3fv"))
  glMultiTexCoord3i = cast[proc(target: GLenum, s: GLint, t: GLint, r: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord3i"))
  glMultiTexCoord3iv = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord3iv"))
  glMultiTexCoord3s = cast[proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord3s"))
  glMultiTexCoord3sv = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord3sv"))
  glMultiTexCoord4d = cast[proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord4d"))
  glMultiTexCoord4dv = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord4dv"))
  glMultiTexCoord4f = cast[proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord4f"))
  glMultiTexCoord4fv = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord4fv"))
  glMultiTexCoord4i = cast[proc(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord4i"))
  glMultiTexCoord4iv = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord4iv"))
  glMultiTexCoord4s = cast[proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord4s"))
  glMultiTexCoord4sv = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord4sv"))
  glLoadTransposeMatrixf = cast[proc(m: ptr GLfloat): void {.stdcall.}](glGetProc("glLoadTransposeMatrixf"))
  glLoadTransposeMatrixd = cast[proc(m: ptr GLdouble): void {.stdcall.}](glGetProc("glLoadTransposeMatrixd"))
  glMultTransposeMatrixf = cast[proc(m: ptr GLfloat): void {.stdcall.}](glGetProc("glMultTransposeMatrixf"))
  glMultTransposeMatrixd = cast[proc(m: ptr GLdouble): void {.stdcall.}](glGetProc("glMultTransposeMatrixd"))

# OpenGL 1_4 loader
proc glLoad1_4*() =
  glBlendFuncSeparate = cast[proc(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendFuncSeparate"))
  glMultiDrawArrays = cast[proc(mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawArrays"))
  glMultiDrawElements = cast[proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElements"))
  glPointParameterf = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPointParameterf"))
  glPointParameterfv = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glPointParameterfv"))
  glPointParameteri = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glPointParameteri"))
  glPointParameteriv = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glPointParameteriv"))
  glFogCoordf = cast[proc(coord: GLfloat): void {.stdcall.}](glGetProc("glFogCoordf"))
  glFogCoordfv = cast[proc(coord: ptr GLfloat): void {.stdcall.}](glGetProc("glFogCoordfv"))
  glFogCoordd = cast[proc(coord: GLdouble): void {.stdcall.}](glGetProc("glFogCoordd"))
  glFogCoorddv = cast[proc(coord: ptr GLdouble): void {.stdcall.}](glGetProc("glFogCoorddv"))
  glFogCoordPointer = cast[proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glFogCoordPointer"))
  glSecondaryColor3b = cast[proc(red: GLbyte, green: GLbyte, blue: GLbyte): void {.stdcall.}](glGetProc("glSecondaryColor3b"))
  glSecondaryColor3bv = cast[proc(v: ptr GLbyte): void {.stdcall.}](glGetProc("glSecondaryColor3bv"))
  glSecondaryColor3d = cast[proc(red: GLdouble, green: GLdouble, blue: GLdouble): void {.stdcall.}](glGetProc("glSecondaryColor3d"))
  glSecondaryColor3dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glSecondaryColor3dv"))
  glSecondaryColor3f = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat): void {.stdcall.}](glGetProc("glSecondaryColor3f"))
  glSecondaryColor3fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glSecondaryColor3fv"))
  glSecondaryColor3i = cast[proc(red: GLint, green: GLint, blue: GLint): void {.stdcall.}](glGetProc("glSecondaryColor3i"))
  glSecondaryColor3iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glSecondaryColor3iv"))
  glSecondaryColor3s = cast[proc(red: GLshort, green: GLshort, blue: GLshort): void {.stdcall.}](glGetProc("glSecondaryColor3s"))
  glSecondaryColor3sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glSecondaryColor3sv"))
  glSecondaryColor3ub = cast[proc(red: GLubyte, green: GLubyte, blue: GLubyte): void {.stdcall.}](glGetProc("glSecondaryColor3ub"))
  glSecondaryColor3ubv = cast[proc(v: ptr GLubyte): void {.stdcall.}](glGetProc("glSecondaryColor3ubv"))
  glSecondaryColor3ui = cast[proc(red: GLuint, green: GLuint, blue: GLuint): void {.stdcall.}](glGetProc("glSecondaryColor3ui"))
  glSecondaryColor3uiv = cast[proc(v: ptr GLuint): void {.stdcall.}](glGetProc("glSecondaryColor3uiv"))
  glSecondaryColor3us = cast[proc(red: GLushort, green: GLushort, blue: GLushort): void {.stdcall.}](glGetProc("glSecondaryColor3us"))
  glSecondaryColor3usv = cast[proc(v: ptr GLushort): void {.stdcall.}](glGetProc("glSecondaryColor3usv"))
  glSecondaryColorPointer = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glSecondaryColorPointer"))
  glWindowPos2d = cast[proc(x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glWindowPos2d"))
  glWindowPos2dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glWindowPos2dv"))
  glWindowPos2f = cast[proc(x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glWindowPos2f"))
  glWindowPos2fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glWindowPos2fv"))
  glWindowPos2i = cast[proc(x: GLint, y: GLint): void {.stdcall.}](glGetProc("glWindowPos2i"))
  glWindowPos2iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glWindowPos2iv"))
  glWindowPos2s = cast[proc(x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glWindowPos2s"))
  glWindowPos2sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glWindowPos2sv"))
  glWindowPos3d = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glWindowPos3d"))
  glWindowPos3dv = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glWindowPos3dv"))
  glWindowPos3f = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glWindowPos3f"))
  glWindowPos3fv = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glWindowPos3fv"))
  glWindowPos3i = cast[proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glWindowPos3i"))
  glWindowPos3iv = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glWindowPos3iv"))
  glWindowPos3s = cast[proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glWindowPos3s"))
  glWindowPos3sv = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glWindowPos3sv"))
  glBlendColor = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}](glGetProc("glBlendColor"))
  glBlendEquation = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glBlendEquation"))

# OpenGL 1_5 loader
proc glLoad1_5*() =
  glGenQueries = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glGenQueries"))
  glDeleteQueries = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteQueries"))
  glIsQuery = cast[proc(id: GLuint): GLboolean {.stdcall.}](glGetProc("glIsQuery"))
  glBeginQuery = cast[proc(target: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glBeginQuery"))
  glEndQuery = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glEndQuery"))
  glGetQueryiv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetQueryiv"))
  glGetQueryObjectiv = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetQueryObjectiv"))
  glGetQueryObjectuiv = cast[proc(id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetQueryObjectuiv"))
  glBindBuffer = cast[proc(target: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glBindBuffer"))
  glDeleteBuffers = cast[proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteBuffers"))
  glGenBuffers = cast[proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenBuffers"))
  glIsBuffer = cast[proc(buffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsBuffer"))
  glBufferData = cast[proc(target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum): void {.stdcall.}](glGetProc("glBufferData"))
  glBufferSubData = cast[proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glBufferSubData"))
  glGetBufferSubData = cast[proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glGetBufferSubData"))
  glMapBuffer = cast[proc(target: GLenum, access: GLenum): pointer {.stdcall.}](glGetProc("glMapBuffer"))
  glUnmapBuffer = cast[proc(target: GLenum): GLboolean {.stdcall.}](glGetProc("glUnmapBuffer"))
  glGetBufferParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetBufferParameteriv"))
  glGetBufferPointerv = cast[proc(target: GLenum, pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetBufferPointerv"))

# OpenGL 2_0 loader
proc glLoad2_0*() =
  glBlendEquationSeparate = cast[proc(modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendEquationSeparate"))
  glDrawBuffers = cast[proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}](glGetProc("glDrawBuffers"))
  glStencilOpSeparate = cast[proc(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum): void {.stdcall.}](glGetProc("glStencilOpSeparate"))
  glStencilFuncSeparate = cast[proc(face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}](glGetProc("glStencilFuncSeparate"))
  glStencilMaskSeparate = cast[proc(face: GLenum, mask: GLuint): void {.stdcall.}](glGetProc("glStencilMaskSeparate"))
  glAttachShader = cast[proc(program: GLuint, shader: GLuint): void {.stdcall.}](glGetProc("glAttachShader"))
  glBindAttribLocation = cast[proc(program: GLuint, index: GLuint, name: cstring): void {.stdcall.}](glGetProc("glBindAttribLocation"))
  glCompileShader = cast[proc(shader: GLuint): void {.stdcall.}](glGetProc("glCompileShader"))
  glCreateProgram = cast[proc(): GLuint {.stdcall.}](glGetProc("glCreateProgram"))
  glCreateShader = cast[proc(`type`: GLenum): GLuint {.stdcall.}](glGetProc("glCreateShader"))
  glDeleteProgram = cast[proc(program: GLuint): void {.stdcall.}](glGetProc("glDeleteProgram"))
  glDeleteShader = cast[proc(shader: GLuint): void {.stdcall.}](glGetProc("glDeleteShader"))
  glDetachShader = cast[proc(program: GLuint, shader: GLuint): void {.stdcall.}](glGetProc("glDetachShader"))
  glDisableVertexAttribArray = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glDisableVertexAttribArray"))
  glEnableVertexAttribArray = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glEnableVertexAttribArray"))
  glGetActiveAttrib = cast[proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring): void {.stdcall.}](glGetProc("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring): void {.stdcall.}](glGetProc("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc(program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint): void {.stdcall.}](glGetProc("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc(program: GLuint, name: cstring): GLint {.stdcall.}](glGetProc("glGetAttribLocation"))
  glGetProgramiv = cast[proc(program: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc(program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}](glGetProc("glGetProgramInfoLog"))
  glGetShaderiv = cast[proc(shader: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc(shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}](glGetProc("glGetShaderInfoLog"))
  glGetShaderSource = cast[proc(shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring): void {.stdcall.}](glGetProc("glGetShaderSource"))
  glGetUniformLocation = cast[proc(program: GLuint, name: cstring): GLint {.stdcall.}](glGetProc("glGetUniformLocation"))
  glGetUniformfv = cast[proc(program: GLuint, location: GLint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetUniformfv"))
  glGetUniformiv = cast[proc(program: GLuint, location: GLint, params: ptr GLint): void {.stdcall.}](glGetProc("glGetUniformiv"))
  glGetVertexAttribdv = cast[proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVertexAttribdv"))
  glGetVertexAttribfv = cast[proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc(index: GLuint, pname: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glGetVertexAttribPointerv"))
  glIsProgram = cast[proc(program: GLuint): GLboolean {.stdcall.}](glGetProc("glIsProgram"))
  glIsShader = cast[proc(shader: GLuint): GLboolean {.stdcall.}](glGetProc("glIsShader"))
  glLinkProgram = cast[proc(program: GLuint): void {.stdcall.}](glGetProc("glLinkProgram"))
  glShaderSource = cast[proc(shader: GLuint, count: GLsizei, string: ptr cstring, length: ptr GLint): void {.stdcall.}](glGetProc("glShaderSource"))
  glUseProgram = cast[proc(program: GLuint): void {.stdcall.}](glGetProc("glUseProgram"))
  glUniform1f = cast[proc(location: GLint, v0: GLfloat): void {.stdcall.}](glGetProc("glUniform1f"))
  glUniform2f = cast[proc(location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}](glGetProc("glUniform2f"))
  glUniform3f = cast[proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}](glGetProc("glUniform3f"))
  glUniform4f = cast[proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}](glGetProc("glUniform4f"))
  glUniform1i = cast[proc(location: GLint, v0: GLint): void {.stdcall.}](glGetProc("glUniform1i"))
  glUniform2i = cast[proc(location: GLint, v0: GLint, v1: GLint): void {.stdcall.}](glGetProc("glUniform2i"))
  glUniform3i = cast[proc(location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}](glGetProc("glUniform3i"))
  glUniform4i = cast[proc(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}](glGetProc("glUniform4i"))
  glUniform1fv = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform1fv"))
  glUniform2fv = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform2fv"))
  glUniform3fv = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform3fv"))
  glUniform4fv = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform4fv"))
  glUniform1iv = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform1iv"))
  glUniform2iv = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform2iv"))
  glUniform3iv = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform3iv"))
  glUniform4iv = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform4iv"))
  glUniformMatrix2fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix4fv"))
  glValidateProgram = cast[proc(program: GLuint): void {.stdcall.}](glGetProc("glValidateProgram"))
  glVertexAttrib1d = cast[proc(index: GLuint, x: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1d"))
  glVertexAttrib1dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1dv"))
  glVertexAttrib1f = cast[proc(index: GLuint, x: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1fv"))
  glVertexAttrib1s = cast[proc(index: GLuint, x: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1s"))
  glVertexAttrib1sv = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1sv"))
  glVertexAttrib2d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2d"))
  glVertexAttrib2dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2dv"))
  glVertexAttrib2f = cast[proc(index: GLuint, x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2fv"))
  glVertexAttrib2s = cast[proc(index: GLuint, x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2s"))
  glVertexAttrib2sv = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2sv"))
  glVertexAttrib3d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3d"))
  glVertexAttrib3dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3dv"))
  glVertexAttrib3f = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3fv"))
  glVertexAttrib3s = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3s"))
  glVertexAttrib3sv = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3sv"))
  glVertexAttrib4Nbv = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttrib4Nbv"))
  glVertexAttrib4Niv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttrib4Niv"))
  glVertexAttrib4Nsv = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4Nsv"))
  glVertexAttrib4Nub = cast[proc(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4Nub"))
  glVertexAttrib4Nubv = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4Nubv"))
  glVertexAttrib4Nuiv = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttrib4Nuiv"))
  glVertexAttrib4Nusv = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttrib4Nusv"))
  glVertexAttrib4bv = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttrib4bv"))
  glVertexAttrib4d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4d"))
  glVertexAttrib4dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4dv"))
  glVertexAttrib4f = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4fv"))
  glVertexAttrib4iv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttrib4iv"))
  glVertexAttrib4s = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4s"))
  glVertexAttrib4sv = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4sv"))
  glVertexAttrib4ubv = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4ubv"))
  glVertexAttrib4uiv = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttrib4uiv"))
  glVertexAttrib4usv = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttrib4usv"))
  glVertexAttribPointer = cast[proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribPointer"))

# OpenGL 2_1 loader
proc glLoad2_1*() =
  glUniformMatrix2x3fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix2x3fv"))
  glUniformMatrix3x2fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix3x2fv"))
  glUniformMatrix2x4fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix2x4fv"))
  glUniformMatrix4x2fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix4x2fv"))
  glUniformMatrix3x4fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix3x4fv"))
  glUniformMatrix4x3fv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix4x3fv"))

# OpenGL 3_0 loader
proc glLoad3_0*() =
  glColorMaski = cast[proc(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void {.stdcall.}](glGetProc("glColorMaski"))
  glGetBooleani_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLboolean): void {.stdcall.}](glGetProc("glGetBooleani_v"))
  glGetIntegeri_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}](glGetProc("glGetIntegeri_v"))
  glEnablei = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glEnablei"))
  glDisablei = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glDisablei"))
  glIsEnabledi = cast[proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}](glGetProc("glIsEnabledi"))
  glBeginTransformFeedback = cast[proc(primitiveMode: GLenum): void {.stdcall.}](glGetProc("glBeginTransformFeedback"))
  glEndTransformFeedback = cast[proc(): void {.stdcall.}](glGetProc("glEndTransformFeedback"))
  glBindBufferRange = cast[proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glBindBufferRange"))
  glBindBufferBase = cast[proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glBindBufferBase"))
  glTransformFeedbackVaryings = cast[proc(program: GLuint, count: GLsizei, varyings: ptr cstring, bufferMode: GLenum): void {.stdcall.}](glGetProc("glTransformFeedbackVaryings"))
  glGetTransformFeedbackVarying = cast[proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring): void {.stdcall.}](glGetProc("glGetTransformFeedbackVarying"))
  glClampColor = cast[proc(target: GLenum, clamp: GLenum): void {.stdcall.}](glGetProc("glClampColor"))
  glBeginConditionalRender = cast[proc(id: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glBeginConditionalRender"))
  glEndConditionalRender = cast[proc(): void {.stdcall.}](glGetProc("glEndConditionalRender"))
  glVertexAttribIPointer = cast[proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribIPointer"))
  glGetVertexAttribIiv = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexAttribIiv"))
  glGetVertexAttribIuiv = cast[proc(index: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetVertexAttribIuiv"))
  glVertexAttribI1i = cast[proc(index: GLuint, x: GLint): void {.stdcall.}](glGetProc("glVertexAttribI1i"))
  glVertexAttribI2i = cast[proc(index: GLuint, x: GLint, y: GLint): void {.stdcall.}](glGetProc("glVertexAttribI2i"))
  glVertexAttribI3i = cast[proc(index: GLuint, x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glVertexAttribI3i"))
  glVertexAttribI4i = cast[proc(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glVertexAttribI4i"))
  glVertexAttribI1ui = cast[proc(index: GLuint, x: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI1ui"))
  glVertexAttribI2ui = cast[proc(index: GLuint, x: GLuint, y: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI2ui"))
  glVertexAttribI3ui = cast[proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI3ui"))
  glVertexAttribI4ui = cast[proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI4ui"))
  glVertexAttribI1iv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI1iv"))
  glVertexAttribI2iv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI2iv"))
  glVertexAttribI3iv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI3iv"))
  glVertexAttribI4iv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI4iv"))
  glVertexAttribI1uiv = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI1uiv"))
  glVertexAttribI2uiv = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI2uiv"))
  glVertexAttribI3uiv = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI3uiv"))
  glVertexAttribI4uiv = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI4uiv"))
  glVertexAttribI4bv = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttribI4bv"))
  glVertexAttribI4sv = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttribI4sv"))
  glVertexAttribI4ubv = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttribI4ubv"))
  glVertexAttribI4usv = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttribI4usv"))
  glGetUniformuiv = cast[proc(program: GLuint, location: GLint, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetUniformuiv"))
  glBindFragDataLocation = cast[proc(program: GLuint, color: GLuint, name: cstring): void {.stdcall.}](glGetProc("glBindFragDataLocation"))
  glGetFragDataLocation = cast[proc(program: GLuint, name: cstring): GLint {.stdcall.}](glGetProc("glGetFragDataLocation"))
  glUniform1ui = cast[proc(location: GLint, v0: GLuint): void {.stdcall.}](glGetProc("glUniform1ui"))
  glUniform2ui = cast[proc(location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}](glGetProc("glUniform2ui"))
  glUniform3ui = cast[proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}](glGetProc("glUniform3ui"))
  glUniform4ui = cast[proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}](glGetProc("glUniform4ui"))
  glUniform1uiv = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform1uiv"))
  glUniform2uiv = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform2uiv"))
  glUniform3uiv = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform3uiv"))
  glUniform4uiv = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform4uiv"))
  glTexParameterIiv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTexParameterIiv"))
  glTexParameterIuiv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glTexParameterIuiv"))
  glGetTexParameterIiv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTexParameterIiv"))
  glGetTexParameterIuiv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetTexParameterIuiv"))
  glClearBufferiv = cast[proc(buffer: GLenum, drawbuffer: GLint, value: ptr GLint): void {.stdcall.}](glGetProc("glClearBufferiv"))
  glClearBufferuiv = cast[proc(buffer: GLenum, drawbuffer: GLint, value: ptr GLuint): void {.stdcall.}](glGetProc("glClearBufferuiv"))
  glClearBufferfv = cast[proc(buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat): void {.stdcall.}](glGetProc("glClearBufferfv"))
  glClearBufferfi = cast[proc(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void {.stdcall.}](glGetProc("glClearBufferfi"))
  glGetStringi = cast[proc(name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}](glGetProc("glGetStringi"))
  glIsRenderbuffer = cast[proc(renderbuffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc(framebuffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsFramebuffer"))
  glBindFramebuffer = cast[proc(target: GLenum, framebuffer: GLuint): void {.stdcall.}](glGetProc("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc(target: GLenum): GLenum {.stdcall.}](glGetProc("glCheckFramebufferStatus"))
  glFramebufferTexture1D = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture1D"))
  glFramebufferTexture2D = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture2D"))
  glFramebufferTexture3D = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture3D"))
  glFramebufferRenderbuffer = cast[proc(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glGenerateMipmap"))
  glBlitFramebuffer = cast[proc(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}](glGetProc("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glFramebufferTextureLayer"))
  glMapBufferRange = cast[proc(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](glGetProc("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc(target: GLenum, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}](glGetProc("glFlushMappedBufferRange"))
  glBindVertexArray = cast[proc(array: GLuint): void {.stdcall.}](glGetProc("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glGenVertexArrays"))
  glIsVertexArray = cast[proc(array: GLuint): GLboolean {.stdcall.}](glGetProc("glIsVertexArray"))

# OpenGL 3_1 loader
proc glLoad3_1*() =
  glDrawArraysInstanced = cast[proc(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei): void {.stdcall.}](glGetProc("glDrawArraysInstanced"))
  glDrawElementsInstanced = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei): void {.stdcall.}](glGetProc("glDrawElementsInstanced"))
  glTexBuffer = cast[proc(target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glTexBuffer"))
  glPrimitiveRestartIndex = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glPrimitiveRestartIndex"))
  glCopyBufferSubData = cast[proc(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glCopyBufferSubData"))
  glGetUniformIndices = cast[proc(program: GLuint, uniformCount: GLsizei, uniformNames: ptr cstring, uniformIndices: ptr GLuint): void {.stdcall.}](glGetProc("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc(program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring): void {.stdcall.}](glGetProc("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc(program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}](glGetProc("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring): void {.stdcall.}](glGetProc("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void {.stdcall.}](glGetProc("glUniformBlockBinding"))
  glBindBufferRange = cast[proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glBindBufferRange"))
  glBindBufferBase = cast[proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glBindBufferBase"))
  glGetIntegeri_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}](glGetProc("glGetIntegeri_v"))

# OpenGL 3_2 loader
proc glLoad3_2*() =
  glDrawElementsBaseVertex = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}](glGetProc("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}](glGetProc("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint): void {.stdcall.}](glGetProc("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint): void {.stdcall.}](glGetProc("glMultiDrawElementsBaseVertex"))
  glProvokingVertex = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glProvokingVertex"))
  glFenceSync = cast[proc(condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}](glGetProc("glFenceSync"))
  glIsSync = cast[proc(sync: GLsync): GLboolean {.stdcall.}](glGetProc("glIsSync"))
  glDeleteSync = cast[proc(sync: GLsync): void {.stdcall.}](glGetProc("glDeleteSync"))
  glClientWaitSync = cast[proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}](glGetProc("glClientWaitSync"))
  glWaitSync = cast[proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): void {.stdcall.}](glGetProc("glWaitSync"))
  glGetInteger64v = cast[proc(pname: GLenum, data: ptr GLint64): void {.stdcall.}](glGetProc("glGetInteger64v"))
  glGetSynciv = cast[proc(sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint): void {.stdcall.}](glGetProc("glGetSynciv"))
  glGetInteger64i_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLint64): void {.stdcall.}](glGetProc("glGetInteger64i_v"))
  glGetBufferParameteri64v = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetBufferParameteri64v"))
  glFramebufferTexture = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture"))
  glTexImage2DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexImage2DMultisample"))
  glTexImage3DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexImage3DMultisample"))
  glGetMultisamplefv = cast[proc(pname: GLenum, index: GLuint, val: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMultisamplefv"))
  glSampleMaski = cast[proc(maskNumber: GLuint, mask: GLbitfield): void {.stdcall.}](glGetProc("glSampleMaski"))

# OpenGL 3_3 loader
proc glLoad3_3*() =
  glBindFragDataLocationIndexed = cast[proc(program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring): void {.stdcall.}](glGetProc("glBindFragDataLocationIndexed"))
  glGetFragDataIndex = cast[proc(program: GLuint, name: cstring): GLint {.stdcall.}](glGetProc("glGetFragDataIndex"))
  glGenSamplers = cast[proc(count: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glGenSamplers"))
  glDeleteSamplers = cast[proc(count: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteSamplers"))
  glIsSampler = cast[proc(sampler: GLuint): GLboolean {.stdcall.}](glGetProc("glIsSampler"))
  glBindSampler = cast[proc(unit: GLuint, sampler: GLuint): void {.stdcall.}](glGetProc("glBindSampler"))
  glSamplerParameteri = cast[proc(sampler: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glSamplerParameteri"))
  glSamplerParameteriv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glSamplerParameteriv"))
  glSamplerParameterf = cast[proc(sampler: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glSamplerParameterf"))
  glSamplerParameterfv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLfloat): void {.stdcall.}](glGetProc("glSamplerParameterfv"))
  glSamplerParameterIiv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glSamplerParameterIiv"))
  glSamplerParameterIuiv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLuint): void {.stdcall.}](glGetProc("glSamplerParameterIuiv"))
  glGetSamplerParameteriv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetSamplerParameteriv"))
  glGetSamplerParameterIiv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetSamplerParameterIiv"))
  glGetSamplerParameterfv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetSamplerParameterfv"))
  glGetSamplerParameterIuiv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetSamplerParameterIuiv"))
  glQueryCounter = cast[proc(id: GLuint, target: GLenum): void {.stdcall.}](glGetProc("glQueryCounter"))
  glGetQueryObjecti64v = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetQueryObjecti64v"))
  glGetQueryObjectui64v = cast[proc(id: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}](glGetProc("glGetQueryObjectui64v"))
  glVertexAttribDivisor = cast[proc(index: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexAttribDivisor"))
  glVertexAttribP1ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP1ui"))
  glVertexAttribP1uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP1uiv"))
  glVertexAttribP2ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP2ui"))
  glVertexAttribP2uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP2uiv"))
  glVertexAttribP3ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP3ui"))
  glVertexAttribP3uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP3uiv"))
  glVertexAttribP4ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP4ui"))
  glVertexAttribP4uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP4uiv"))

# OpenGL 4_0 loader
proc glLoad4_0*() =
  glMinSampleShading = cast[proc(value: GLfloat): void {.stdcall.}](glGetProc("glMinSampleShading"))
  glBlendEquationi = cast[proc(buf: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glBlendEquationi"))
  glBlendEquationSeparatei = cast[proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendEquationSeparatei"))
  glBlendFunci = cast[proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}](glGetProc("glBlendFunci"))
  glBlendFuncSeparatei = cast[proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendFuncSeparatei"))
  glDrawArraysIndirect = cast[proc(mode: GLenum, indirect: pointer): void {.stdcall.}](glGetProc("glDrawArraysIndirect"))
  glDrawElementsIndirect = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer): void {.stdcall.}](glGetProc("glDrawElementsIndirect"))
  glUniform1d = cast[proc(location: GLint, x: GLdouble): void {.stdcall.}](glGetProc("glUniform1d"))
  glUniform2d = cast[proc(location: GLint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glUniform2d"))
  glUniform3d = cast[proc(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glUniform3d"))
  glUniform4d = cast[proc(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glUniform4d"))
  glUniform1dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform1dv"))
  glUniform2dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform2dv"))
  glUniform3dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform3dv"))
  glUniform4dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform4dv"))
  glUniformMatrix2dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix2dv"))
  glUniformMatrix3dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix3dv"))
  glUniformMatrix4dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix4dv"))
  glUniformMatrix2x3dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix2x3dv"))
  glUniformMatrix2x4dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix2x4dv"))
  glUniformMatrix3x2dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix3x2dv"))
  glUniformMatrix3x4dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix3x4dv"))
  glUniformMatrix4x2dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix4x2dv"))
  glUniformMatrix4x3dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix4x3dv"))
  glGetUniformdv = cast[proc(program: GLuint, location: GLint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetUniformdv"))
  glGetSubroutineUniformLocation = cast[proc(program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}](glGetProc("glGetSubroutineUniformLocation"))
  glGetSubroutineIndex = cast[proc(program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}](glGetProc("glGetSubroutineIndex"))
  glGetActiveSubroutineUniformiv = cast[proc(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveSubroutineUniformiv"))
  glGetActiveSubroutineUniformName = cast[proc(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}](glGetProc("glGetActiveSubroutineUniformName"))
  glGetActiveSubroutineName = cast[proc(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}](glGetProc("glGetActiveSubroutineName"))
  glUniformSubroutinesuiv = cast[proc(shadertype: GLenum, count: GLsizei, indices: ptr GLuint): void {.stdcall.}](glGetProc("glUniformSubroutinesuiv"))
  glGetUniformSubroutineuiv = cast[proc(shadertype: GLenum, location: GLint, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetUniformSubroutineuiv"))
  glGetProgramStageiv = cast[proc(program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramStageiv"))
  glPatchParameteri = cast[proc(pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glPatchParameteri"))
  glPatchParameterfv = cast[proc(pname: GLenum, values: ptr GLfloat): void {.stdcall.}](glGetProc("glPatchParameterfv"))
  glBindTransformFeedback = cast[proc(target: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glBindTransformFeedback"))
  glDeleteTransformFeedbacks = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteTransformFeedbacks"))
  glGenTransformFeedbacks = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glGenTransformFeedbacks"))
  glIsTransformFeedback = cast[proc(id: GLuint): GLboolean {.stdcall.}](glGetProc("glIsTransformFeedback"))
  glPauseTransformFeedback = cast[proc(): void {.stdcall.}](glGetProc("glPauseTransformFeedback"))
  glResumeTransformFeedback = cast[proc(): void {.stdcall.}](glGetProc("glResumeTransformFeedback"))
  glDrawTransformFeedback = cast[proc(mode: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glDrawTransformFeedback"))
  glDrawTransformFeedbackStream = cast[proc(mode: GLenum, id: GLuint, stream: GLuint): void {.stdcall.}](glGetProc("glDrawTransformFeedbackStream"))
  glBeginQueryIndexed = cast[proc(target: GLenum, index: GLuint, id: GLuint): void {.stdcall.}](glGetProc("glBeginQueryIndexed"))
  glEndQueryIndexed = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glEndQueryIndexed"))
  glGetQueryIndexediv = cast[proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetQueryIndexediv"))

# OpenGL 4_1 loader
proc glLoad4_1*() =
  glReleaseShaderCompiler = cast[proc(): void {.stdcall.}](glGetProc("glReleaseShaderCompiler"))
  glShaderBinary = cast[proc(count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei): void {.stdcall.}](glGetProc("glShaderBinary"))
  glGetShaderPrecisionFormat = cast[proc(shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint): void {.stdcall.}](glGetProc("glGetShaderPrecisionFormat"))
  glDepthRangef = cast[proc(n: GLfloat, f: GLfloat): void {.stdcall.}](glGetProc("glDepthRangef"))
  glClearDepthf = cast[proc(d: GLfloat): void {.stdcall.}](glGetProc("glClearDepthf"))
  glGetProgramBinary = cast[proc(program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer): void {.stdcall.}](glGetProc("glGetProgramBinary"))
  glProgramBinary = cast[proc(program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei): void {.stdcall.}](glGetProc("glProgramBinary"))
  glProgramParameteri = cast[proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glProgramParameteri"))
  glUseProgramStages = cast[proc(pipeline: GLuint, stages: GLbitfield, program: GLuint): void {.stdcall.}](glGetProc("glUseProgramStages"))
  glActiveShaderProgram = cast[proc(pipeline: GLuint, program: GLuint): void {.stdcall.}](glGetProc("glActiveShaderProgram"))
  glCreateShaderProgramv = cast[proc(`type`: GLenum, count: GLsizei, strings: ptr cstring): GLuint {.stdcall.}](glGetProc("glCreateShaderProgramv"))
  glBindProgramPipeline = cast[proc(pipeline: GLuint): void {.stdcall.}](glGetProc("glBindProgramPipeline"))
  glDeleteProgramPipelines = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteProgramPipelines"))
  glGenProgramPipelines = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glGenProgramPipelines"))
  glIsProgramPipeline = cast[proc(pipeline: GLuint): GLboolean {.stdcall.}](glGetProc("glIsProgramPipeline"))
  glGetProgramPipelineiv = cast[proc(pipeline: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramPipelineiv"))
  glProgramParameteri = cast[proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glProgramParameteri"))
  glProgramUniform1i = cast[proc(program: GLuint, location: GLint, v0: GLint): void {.stdcall.}](glGetProc("glProgramUniform1i"))
  glProgramUniform1iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform1iv"))
  glProgramUniform1f = cast[proc(program: GLuint, location: GLint, v0: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1f"))
  glProgramUniform1fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1fv"))
  glProgramUniform1d = cast[proc(program: GLuint, location: GLint, v0: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform1d"))
  glProgramUniform1dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform1dv"))
  glProgramUniform1ui = cast[proc(program: GLuint, location: GLint, v0: GLuint): void {.stdcall.}](glGetProc("glProgramUniform1ui"))
  glProgramUniform1uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform1uiv"))
  glProgramUniform2i = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint): void {.stdcall.}](glGetProc("glProgramUniform2i"))
  glProgramUniform2iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform2iv"))
  glProgramUniform2f = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2f"))
  glProgramUniform2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2fv"))
  glProgramUniform2d = cast[proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform2d"))
  glProgramUniform2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform2dv"))
  glProgramUniform2ui = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}](glGetProc("glProgramUniform2ui"))
  glProgramUniform2uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform2uiv"))
  glProgramUniform3i = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}](glGetProc("glProgramUniform3i"))
  glProgramUniform3iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform3iv"))
  glProgramUniform3f = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3f"))
  glProgramUniform3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3fv"))
  glProgramUniform3d = cast[proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform3d"))
  glProgramUniform3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform3dv"))
  glProgramUniform3ui = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}](glGetProc("glProgramUniform3ui"))
  glProgramUniform3uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform3uiv"))
  glProgramUniform4i = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}](glGetProc("glProgramUniform4i"))
  glProgramUniform4iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform4iv"))
  glProgramUniform4f = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4f"))
  glProgramUniform4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4fv"))
  glProgramUniform4d = cast[proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform4d"))
  glProgramUniform4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform4dv"))
  glProgramUniform4ui = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}](glGetProc("glProgramUniform4ui"))
  glProgramUniform4uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform4uiv"))
  glProgramUniformMatrix2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2fv"))
  glProgramUniformMatrix3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3fv"))
  glProgramUniformMatrix4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4fv"))
  glProgramUniformMatrix2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2dv"))
  glProgramUniformMatrix3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3dv"))
  glProgramUniformMatrix4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4dv"))
  glProgramUniformMatrix2x3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x3fv"))
  glProgramUniformMatrix3x2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x2fv"))
  glProgramUniformMatrix2x4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x4fv"))
  glProgramUniformMatrix4x2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x2fv"))
  glProgramUniformMatrix3x4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x4fv"))
  glProgramUniformMatrix4x3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x3fv"))
  glProgramUniformMatrix2x3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x3dv"))
  glProgramUniformMatrix3x2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x2dv"))
  glProgramUniformMatrix2x4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x4dv"))
  glProgramUniformMatrix4x2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x2dv"))
  glProgramUniformMatrix3x4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x4dv"))
  glProgramUniformMatrix4x3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x3dv"))
  glValidateProgramPipeline = cast[proc(pipeline: GLuint): void {.stdcall.}](glGetProc("glValidateProgramPipeline"))
  glGetProgramPipelineInfoLog = cast[proc(pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}](glGetProc("glGetProgramPipelineInfoLog"))
  glVertexAttribL1d = cast[proc(index: GLuint, x: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL1d"))
  glVertexAttribL2d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL2d"))
  glVertexAttribL3d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL3d"))
  glVertexAttribL4d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL4d"))
  glVertexAttribL1dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL1dv"))
  glVertexAttribL2dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL2dv"))
  glVertexAttribL3dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL3dv"))
  glVertexAttribL4dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL4dv"))
  glVertexAttribLPointer = cast[proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribLPointer"))
  glGetVertexAttribLdv = cast[proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVertexAttribLdv"))
  glViewportArrayv = cast[proc(first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glViewportArrayv"))
  glViewportIndexedf = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat): void {.stdcall.}](glGetProc("glViewportIndexedf"))
  glViewportIndexedfv = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glViewportIndexedfv"))
  glScissorArrayv = cast[proc(first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}](glGetProc("glScissorArrayv"))
  glScissorIndexed = cast[proc(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glScissorIndexed"))
  glScissorIndexedv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glScissorIndexedv"))
  glDepthRangeArrayv = cast[proc(first: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glDepthRangeArrayv"))
  glDepthRangeIndexed = cast[proc(index: GLuint, n: GLdouble, f: GLdouble): void {.stdcall.}](glGetProc("glDepthRangeIndexed"))
  glGetFloati_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFloati_v"))
  glGetDoublei_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLdouble): void {.stdcall.}](glGetProc("glGetDoublei_v"))

# OpenGL 4_2 loader
proc glLoad4_2*() =
  glDrawArraysInstancedBaseInstance = cast[proc(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}](glGetProc("glDrawArraysInstancedBaseInstance"))
  glDrawElementsInstancedBaseInstance = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}](glGetProc("glDrawElementsInstancedBaseInstance"))
  glDrawElementsInstancedBaseVertexBaseInstance = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint): void {.stdcall.}](glGetProc("glDrawElementsInstancedBaseVertexBaseInstance"))
  glGetInternalformativ = cast[proc(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetInternalformativ"))
  glGetActiveAtomicCounterBufferiv = cast[proc(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveAtomicCounterBufferiv"))
  glBindImageTexture = cast[proc(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum): void {.stdcall.}](glGetProc("glBindImageTexture"))
  glMemoryBarrier = cast[proc(barriers: GLbitfield): void {.stdcall.}](glGetProc("glMemoryBarrier"))
  glTexStorage1D = cast[proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}](glGetProc("glTexStorage1D"))
  glTexStorage2D = cast[proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glTexStorage2D"))
  glTexStorage3D = cast[proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glTexStorage3D"))
  glDrawTransformFeedbackInstanced = cast[proc(mode: GLenum, id: GLuint, instancecount: GLsizei): void {.stdcall.}](glGetProc("glDrawTransformFeedbackInstanced"))
  glDrawTransformFeedbackStreamInstanced = cast[proc(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei): void {.stdcall.}](glGetProc("glDrawTransformFeedbackStreamInstanced"))

# OpenGL 4_3 loader
proc glLoad4_3*() =
  glClearBufferData = cast[proc(target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearBufferData"))
  glClearBufferSubData = cast[proc(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearBufferSubData"))
  glDispatchCompute = cast[proc(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint): void {.stdcall.}](glGetProc("glDispatchCompute"))
  glDispatchComputeIndirect = cast[proc(indirect: GLintptr): void {.stdcall.}](glGetProc("glDispatchComputeIndirect"))
  glCopyImageSubData = cast[proc(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void {.stdcall.}](glGetProc("glCopyImageSubData"))
  glFramebufferParameteri = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glFramebufferParameteri"))
  glGetFramebufferParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFramebufferParameteriv"))
  glGetInternalformati64v = cast[proc(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetInternalformati64v"))
  glInvalidateTexSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glInvalidateTexSubImage"))
  glInvalidateTexImage = cast[proc(texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glInvalidateTexImage"))
  glInvalidateBufferSubData = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}](glGetProc("glInvalidateBufferSubData"))
  glInvalidateBufferData = cast[proc(buffer: GLuint): void {.stdcall.}](glGetProc("glInvalidateBufferData"))
  glInvalidateFramebuffer = cast[proc(target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum): void {.stdcall.}](glGetProc("glInvalidateFramebuffer"))
  glInvalidateSubFramebuffer = cast[proc(target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glInvalidateSubFramebuffer"))
  glMultiDrawArraysIndirect = cast[proc(mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawArraysIndirect"))
  glMultiDrawElementsIndirect = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElementsIndirect"))
  glGetProgramInterfaceiv = cast[proc(program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramInterfaceiv"))
  glGetProgramResourceIndex = cast[proc(program: GLuint, programInterface: GLenum, name: cstring): GLuint {.stdcall.}](glGetProc("glGetProgramResourceIndex"))
  glGetProgramResourceName = cast[proc(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}](glGetProc("glGetProgramResourceName"))
  glGetProgramResourceiv = cast[proc(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramResourceiv"))
  glGetProgramResourceLocation = cast[proc(program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](glGetProc("glGetProgramResourceLocation"))
  glGetProgramResourceLocationIndex = cast[proc(program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](glGetProc("glGetProgramResourceLocationIndex"))
  glShaderStorageBlockBinding = cast[proc(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint): void {.stdcall.}](glGetProc("glShaderStorageBlockBinding"))
  glTexBufferRange = cast[proc(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glTexBufferRange"))
  glTexStorage2DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexStorage2DMultisample"))
  glTexStorage3DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexStorage3DMultisample"))
  glTextureView = cast[proc(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint): void {.stdcall.}](glGetProc("glTextureView"))
  glBindVertexBuffer = cast[proc(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}](glGetProc("glBindVertexBuffer"))
  glVertexAttribFormat = cast[proc(attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexAttribFormat"))
  glVertexAttribIFormat = cast[proc(attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexAttribIFormat"))
  glVertexAttribLFormat = cast[proc(attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexAttribLFormat"))
  glVertexAttribBinding = cast[proc(attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}](glGetProc("glVertexAttribBinding"))
  glVertexBindingDivisor = cast[proc(bindingindex: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexBindingDivisor"))
  glDebugMessageControl = cast[proc(source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}](glGetProc("glDebugMessageControl"))
  glDebugMessageInsert = cast[proc(source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring): void {.stdcall.}](glGetProc("glDebugMessageInsert"))
  glDebugMessageCallback = cast[proc(callback: GLDEBUGPROC, userParam: pointer): void {.stdcall.}](glGetProc("glDebugMessageCallback"))
  glGetDebugMessageLog = cast[proc(count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](glGetProc("glGetDebugMessageLog"))
  glPushDebugGroup = cast[proc(source: GLenum, id: GLuint, length: GLsizei, message: cstring): void {.stdcall.}](glGetProc("glPushDebugGroup"))
  glPopDebugGroup = cast[proc(): void {.stdcall.}](glGetProc("glPopDebugGroup"))
  glObjectLabel = cast[proc(identifier: GLenum, name: GLuint, length: GLsizei, label: cstring): void {.stdcall.}](glGetProc("glObjectLabel"))
  glGetObjectLabel = cast[proc(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}](glGetProc("glGetObjectLabel"))
  glObjectPtrLabel = cast[proc(`ptr`: pointer, length: GLsizei, label: cstring): void {.stdcall.}](glGetProc("glObjectPtrLabel"))
  glGetObjectPtrLabel = cast[proc(`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}](glGetProc("glGetObjectPtrLabel"))
  glGetPointerv = cast[proc(pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetPointerv"))

# OpenGL 4_4 loader
proc glLoad4_4*() =
  glBufferStorage = cast[proc(target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}](glGetProc("glBufferStorage"))
  glClearTexImage = cast[proc(texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearTexImage"))
  glClearTexSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearTexSubImage"))
  glBindBuffersBase = cast[proc(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glBindBuffersBase"))
  glBindBuffersRange = cast[proc(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr): void {.stdcall.}](glGetProc("glBindBuffersRange"))
  glBindTextures = cast[proc(first: GLuint, count: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glBindTextures"))
  glBindSamplers = cast[proc(first: GLuint, count: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glBindSamplers"))
  glBindImageTextures = cast[proc(first: GLuint, count: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glBindImageTextures"))
  glBindVertexBuffers = cast[proc(first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei): void {.stdcall.}](glGetProc("glBindVertexBuffers"))

# OpenGL 4_5 loader
proc glLoad4_5*() =
  glClipControl = cast[proc(origin: GLenum, depth: GLenum): void {.stdcall.}](glGetProc("glClipControl"))
  glCreateTransformFeedbacks = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glCreateTransformFeedbacks"))
  glTransformFeedbackBufferBase = cast[proc(xfb: GLuint, index: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glTransformFeedbackBufferBase"))
  glTransformFeedbackBufferRange = cast[proc(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glTransformFeedbackBufferRange"))
  glGetTransformFeedbackiv = cast[proc(xfb: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetTransformFeedbackiv"))
  glGetTransformFeedbacki64_v = cast[proc(xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64): void {.stdcall.}](glGetProc("glGetTransformFeedbacki64_v"))
  glCreateBuffers = cast[proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateBuffers"))
  glNamedBufferStorage = cast[proc(buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}](glGetProc("glNamedBufferStorage"))
  glNamedBufferData = cast[proc(buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum): void {.stdcall.}](glGetProc("glNamedBufferData"))
  glNamedBufferSubData = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glNamedBufferSubData"))
  glCopyNamedBufferSubData = cast[proc(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glCopyNamedBufferSubData"))
  glClearNamedBufferData = cast[proc(buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearNamedBufferData"))
  glClearNamedBufferSubData = cast[proc(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearNamedBufferSubData"))
  glMapNamedBuffer = cast[proc(buffer: GLuint, access: GLenum): pointer {.stdcall.}](glGetProc("glMapNamedBuffer"))
  glMapNamedBufferRange = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](glGetProc("glMapNamedBufferRange"))
  glUnmapNamedBuffer = cast[proc(buffer: GLuint): GLboolean {.stdcall.}](glGetProc("glUnmapNamedBuffer"))
  glFlushMappedNamedBufferRange = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}](glGetProc("glFlushMappedNamedBufferRange"))
  glGetNamedBufferParameteriv = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedBufferParameteriv"))
  glGetNamedBufferParameteri64v = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetNamedBufferParameteri64v"))
  glGetNamedBufferPointerv = cast[proc(buffer: GLuint, pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetNamedBufferPointerv"))
  glGetNamedBufferSubData = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glGetNamedBufferSubData"))
  glCreateFramebuffers = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateFramebuffers"))
  glNamedFramebufferRenderbuffer = cast[proc(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glNamedFramebufferRenderbuffer"))
  glNamedFramebufferParameteri = cast[proc(framebuffer: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferParameteri"))
  glNamedFramebufferTexture = cast[proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTexture"))
  glNamedFramebufferTextureLayer = cast[proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTextureLayer"))
  glNamedFramebufferDrawBuffer = cast[proc(framebuffer: GLuint, buf: GLenum): void {.stdcall.}](glGetProc("glNamedFramebufferDrawBuffer"))
  glNamedFramebufferDrawBuffers = cast[proc(framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum): void {.stdcall.}](glGetProc("glNamedFramebufferDrawBuffers"))
  glNamedFramebufferReadBuffer = cast[proc(framebuffer: GLuint, src: GLenum): void {.stdcall.}](glGetProc("glNamedFramebufferReadBuffer"))
  glInvalidateNamedFramebufferData = cast[proc(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum): void {.stdcall.}](glGetProc("glInvalidateNamedFramebufferData"))
  glInvalidateNamedFramebufferSubData = cast[proc(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glInvalidateNamedFramebufferSubData"))
  glClearNamedFramebufferiv = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint): void {.stdcall.}](glGetProc("glClearNamedFramebufferiv"))
  glClearNamedFramebufferuiv = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint): void {.stdcall.}](glGetProc("glClearNamedFramebufferuiv"))
  glClearNamedFramebufferfv = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat): void {.stdcall.}](glGetProc("glClearNamedFramebufferfv"))
  glClearNamedFramebufferfi = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void {.stdcall.}](glGetProc("glClearNamedFramebufferfi"))
  glBlitNamedFramebuffer = cast[proc(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}](glGetProc("glBlitNamedFramebuffer"))
  glCheckNamedFramebufferStatus = cast[proc(framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}](glGetProc("glCheckNamedFramebufferStatus"))
  glGetNamedFramebufferParameteriv = cast[proc(framebuffer: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedFramebufferParameteriv"))
  glGetNamedFramebufferAttachmentParameteriv = cast[proc(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedFramebufferAttachmentParameteriv"))
  glCreateRenderbuffers = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateRenderbuffers"))
  glNamedRenderbufferStorage = cast[proc(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorage"))
  glNamedRenderbufferStorageMultisample = cast[proc(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorageMultisample"))
  glGetNamedRenderbufferParameteriv = cast[proc(renderbuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedRenderbufferParameteriv"))
  glCreateTextures = cast[proc(target: GLenum, n: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glCreateTextures"))
  glTextureBuffer = cast[proc(texture: GLuint, internalformat: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glTextureBuffer"))
  glTextureBufferRange = cast[proc(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glTextureBufferRange"))
  glTextureStorage1D = cast[proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage1D"))
  glTextureStorage2D = cast[proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage2D"))
  glTextureStorage3D = cast[proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage3D"))
  glTextureStorage2DMultisample = cast[proc(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTextureStorage2DMultisample"))
  glTextureStorage3DMultisample = cast[proc(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTextureStorage3DMultisample"))
  glTextureSubImage1D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage1D"))
  glTextureSubImage2D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage2D"))
  glTextureSubImage3D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage3D"))
  glCompressedTextureSubImage1D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage1D"))
  glCompressedTextureSubImage2D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage2D"))
  glCompressedTextureSubImage3D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage3D"))
  glCopyTextureSubImage1D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage1D"))
  glCopyTextureSubImage2D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage2D"))
  glCopyTextureSubImage3D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage3D"))
  glTextureParameterf = cast[proc(texture: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glTextureParameterf"))
  glTextureParameterfv = cast[proc(texture: GLuint, pname: GLenum, param: ptr GLfloat): void {.stdcall.}](glGetProc("glTextureParameterfv"))
  glTextureParameteri = cast[proc(texture: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glTextureParameteri"))
  glTextureParameterIiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTextureParameterIiv"))
  glTextureParameterIuiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glTextureParameterIuiv"))
  glTextureParameteriv = cast[proc(texture: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glTextureParameteriv"))
  glGenerateTextureMipmap = cast[proc(texture: GLuint): void {.stdcall.}](glGetProc("glGenerateTextureMipmap"))
  glBindTextureUnit = cast[proc(unit: GLuint, texture: GLuint): void {.stdcall.}](glGetProc("glBindTextureUnit"))
  glGetTextureImage = cast[proc(texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetTextureImage"))
  glGetCompressedTextureImage = cast[proc(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetCompressedTextureImage"))
  glGetTextureLevelParameterfv = cast[proc(texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTextureLevelParameterfv"))
  glGetTextureLevelParameteriv = cast[proc(texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureLevelParameteriv"))
  glGetTextureParameterfv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTextureParameterfv"))
  glGetTextureParameterIiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureParameterIiv"))
  glGetTextureParameterIuiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetTextureParameterIuiv"))
  glGetTextureParameteriv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureParameteriv"))
  glCreateVertexArrays = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glCreateVertexArrays"))
  glDisableVertexArrayAttrib = cast[proc(vaobj: GLuint, index: GLuint): void {.stdcall.}](glGetProc("glDisableVertexArrayAttrib"))
  glEnableVertexArrayAttrib = cast[proc(vaobj: GLuint, index: GLuint): void {.stdcall.}](glGetProc("glEnableVertexArrayAttrib"))
  glVertexArrayElementBuffer = cast[proc(vaobj: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glVertexArrayElementBuffer"))
  glVertexArrayVertexBuffer = cast[proc(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}](glGetProc("glVertexArrayVertexBuffer"))
  glVertexArrayVertexBuffers = cast[proc(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei): void {.stdcall.}](glGetProc("glVertexArrayVertexBuffers"))
  glVertexArrayAttribBinding = cast[proc(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribBinding"))
  glVertexArrayAttribFormat = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribFormat"))
  glVertexArrayAttribIFormat = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribIFormat"))
  glVertexArrayAttribLFormat = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribLFormat"))
  glVertexArrayBindingDivisor = cast[proc(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexArrayBindingDivisor"))
  glGetVertexArrayiv = cast[proc(vaobj: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexArrayiv"))
  glGetVertexArrayIndexediv = cast[proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexArrayIndexediv"))
  glGetVertexArrayIndexed64iv = cast[proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64): void {.stdcall.}](glGetProc("glGetVertexArrayIndexed64iv"))
  glCreateSamplers = cast[proc(n: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateSamplers"))
  glCreateProgramPipelines = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glCreateProgramPipelines"))
  glCreateQueries = cast[proc(target: GLenum, n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glCreateQueries"))
  glGetQueryBufferObjecti64v = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjecti64v"))
  glGetQueryBufferObjectiv = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjectiv"))
  glGetQueryBufferObjectui64v = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjectui64v"))
  glGetQueryBufferObjectuiv = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjectuiv"))
  glMemoryBarrierByRegion = cast[proc(barriers: GLbitfield): void {.stdcall.}](glGetProc("glMemoryBarrierByRegion"))
  glGetTextureSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetTextureSubImage"))
  glGetCompressedTextureSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetCompressedTextureSubImage"))
  glGetGraphicsResetStatus = cast[proc(): GLenum {.stdcall.}](glGetProc("glGetGraphicsResetStatus"))
  glGetnCompressedTexImage = cast[proc(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetnCompressedTexImage"))
  glGetnTexImage = cast[proc(target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetnTexImage"))
  glGetnUniformdv = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetnUniformdv"))
  glGetnUniformfv = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetnUniformfv"))
  glGetnUniformiv = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetnUniformiv"))
  glGetnUniformuiv = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetnUniformuiv"))
  glReadnPixels = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glReadnPixels"))
  glTextureBarrier = cast[proc(): void {.stdcall.}](glGetProc("glTextureBarrier"))

# OpenGL 4_6 loader
proc glLoad4_6*() =
  glSpecializeShader = cast[proc(shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint): void {.stdcall.}](glGetProc("glSpecializeShader"))
  glMultiDrawArraysIndirectCount = cast[proc(mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawArraysIndirectCount"))
  glMultiDrawElementsIndirectCount = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElementsIndirectCount"))
  glPolygonOffsetClamp = cast[proc(factor: GLfloat, units: GLfloat, clamp: GLfloat): void {.stdcall.}](glGetProc("glPolygonOffsetClamp"))

proc glInit*(): bool =
  glGetString = cast[proc(name: GLenum): ptr GLubyte {.stdcall.}](glGetProc("glGetString"))
  if glGetString == nil:
    return false

  let glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion.isNil:
    return false

  let prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]
  var version: string = $glVersion
  for prefix in prefixes:
    if version.startsWith(prefix):
      version = version.replace(prefix)
      break

  let major = ord(glVersion[0]) - ord('0')
  let minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  if (major == 1 and minor >= 0) or major > 1: glLoad1_0()
  if (major == 1 and minor >= 1) or major > 1: glLoad1_1()
  if (major == 1 and minor >= 2) or major > 1: glLoad1_2()
  if (major == 1 and minor >= 3) or major > 1: glLoad1_3()
  if (major == 1 and minor >= 4) or major > 1: glLoad1_4()
  if (major == 1 and minor >= 5) or major > 1: glLoad1_5()
  if (major == 2 and minor >= 0) or major > 2: glLoad2_0()
  if (major == 2 and minor >= 1) or major > 2: glLoad2_1()
  if (major == 3 and minor >= 0) or major > 3: glLoad3_0()
  if (major == 3 and minor >= 1) or major > 3: glLoad3_1()
  if (major == 3 and minor >= 2) or major > 3: glLoad3_2()
  if (major == 3 and minor >= 3) or major > 3: glLoad3_3()
  if (major == 4 and minor >= 0) or major > 4: glLoad4_0()
  if (major == 4 and minor >= 1) or major > 4: glLoad4_1()
  if (major == 4 and minor >= 2) or major > 4: glLoad4_2()
  if (major == 4 and minor >= 3) or major > 4: glLoad4_3()
  if (major == 4 and minor >= 4) or major > 4: glLoad4_4()
  if (major == 4 and minor >= 5) or major > 4: glLoad4_5()
  if (major == 4 and minor >= 6) or major > 4: glLoad4_6()
  return true

# Extensions

# Load GL_3DFX_tbuffer
proc loadGL_3DFX_tbuffer*() =
  glTbufferMask3DFX = cast[proc(mask: GLuint): void {.stdcall.}](glGetProc("glTbufferMask3DFX"))

# Load GL_AMD_debug_output
proc loadGL_AMD_debug_output*() =
  glDebugMessageEnableAMD = cast[proc(category: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}](glGetProc("glDebugMessageEnableAMD"))
  glDebugMessageInsertAMD = cast[proc(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: cstring): void {.stdcall.}](glGetProc("glDebugMessageInsertAMD"))
  glDebugMessageCallbackAMD = cast[proc(callback: GLDEBUGPROCAMD, userParam: pointer): void {.stdcall.}](glGetProc("glDebugMessageCallbackAMD"))
  glGetDebugMessageLogAMD = cast[proc(count: GLuint, bufSize: GLsizei, categories: ptr GLenum, severities: ptr GLuint, ids: ptr GLuint, lengths: ptr GLsizei, message: cstring): GLuint {.stdcall.}](glGetProc("glGetDebugMessageLogAMD"))

# Load GL_AMD_draw_buffers_blend
proc loadGL_AMD_draw_buffers_blend*() =
  glBlendFuncIndexedAMD = cast[proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}](glGetProc("glBlendFuncIndexedAMD"))
  glBlendFuncSeparateIndexedAMD = cast[proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendFuncSeparateIndexedAMD"))
  glBlendEquationIndexedAMD = cast[proc(buf: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glBlendEquationIndexedAMD"))
  glBlendEquationSeparateIndexedAMD = cast[proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendEquationSeparateIndexedAMD"))

# Load GL_AMD_framebuffer_multisample_advanced
proc loadGL_AMD_framebuffer_multisample_advanced*() =
  glRenderbufferStorageMultisampleAdvancedAMD = cast[proc(target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorageMultisampleAdvancedAMD"))
  glNamedRenderbufferStorageMultisampleAdvancedAMD = cast[proc(renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorageMultisampleAdvancedAMD"))

# Load GL_AMD_framebuffer_sample_positions
proc loadGL_AMD_framebuffer_sample_positions*() =
  glFramebufferSamplePositionsfvAMD = cast[proc(target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat): void {.stdcall.}](glGetProc("glFramebufferSamplePositionsfvAMD"))
  glNamedFramebufferSamplePositionsfvAMD = cast[proc(framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat): void {.stdcall.}](glGetProc("glNamedFramebufferSamplePositionsfvAMD"))
  glGetFramebufferParameterfvAMD = cast[proc(target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFramebufferParameterfvAMD"))
  glGetNamedFramebufferParameterfvAMD = cast[proc(framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat): void {.stdcall.}](glGetProc("glGetNamedFramebufferParameterfvAMD"))

# Load GL_AMD_gpu_shader_int64
proc loadGL_AMD_gpu_shader_int64*() =
  glUniform1i64NV = cast[proc(location: GLint, x: GLint64EXT): void {.stdcall.}](glGetProc("glUniform1i64NV"))
  glUniform2i64NV = cast[proc(location: GLint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}](glGetProc("glUniform2i64NV"))
  glUniform3i64NV = cast[proc(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}](glGetProc("glUniform3i64NV"))
  glUniform4i64NV = cast[proc(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}](glGetProc("glUniform4i64NV"))
  glUniform1i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform1i64vNV"))
  glUniform2i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform2i64vNV"))
  glUniform3i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform3i64vNV"))
  glUniform4i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform4i64vNV"))
  glUniform1ui64NV = cast[proc(location: GLint, x: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform1ui64NV"))
  glUniform2ui64NV = cast[proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform2ui64NV"))
  glUniform3ui64NV = cast[proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform3ui64NV"))
  glUniform4ui64NV = cast[proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform4ui64NV"))
  glUniform1ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform1ui64vNV"))
  glUniform2ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform2ui64vNV"))
  glUniform3ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform3ui64vNV"))
  glUniform4ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform4ui64vNV"))
  glGetUniformi64vNV = cast[proc(program: GLuint, location: GLint, params: ptr GLint64EXT): void {.stdcall.}](glGetProc("glGetUniformi64vNV"))
  glGetUniformui64vNV = cast[proc(program: GLuint, location: GLint, params: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetUniformui64vNV"))
  glProgramUniform1i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1i64NV"))
  glProgramUniform2i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2i64NV"))
  glProgramUniform3i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3i64NV"))
  glProgramUniform4i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4i64NV"))
  glProgramUniform1i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1i64vNV"))
  glProgramUniform2i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2i64vNV"))
  glProgramUniform3i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3i64vNV"))
  glProgramUniform4i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4i64vNV"))
  glProgramUniform1ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1ui64NV"))
  glProgramUniform2ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2ui64NV"))
  glProgramUniform3ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3ui64NV"))
  glProgramUniform4ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4ui64NV"))
  glProgramUniform1ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1ui64vNV"))
  glProgramUniform2ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2ui64vNV"))
  glProgramUniform3ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3ui64vNV"))
  glProgramUniform4ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4ui64vNV"))

# Load GL_AMD_interleaved_elements
proc loadGL_AMD_interleaved_elements*() =
  glVertexAttribParameteriAMD = cast[proc(index: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glVertexAttribParameteriAMD"))

# Load GL_AMD_multi_draw_indirect
proc loadGL_AMD_multi_draw_indirect*() =
  glMultiDrawArraysIndirectAMD = cast[proc(mode: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawArraysIndirectAMD"))
  glMultiDrawElementsIndirectAMD = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElementsIndirectAMD"))

# Load GL_AMD_name_gen_delete
proc loadGL_AMD_name_gen_delete*() =
  glGenNamesAMD = cast[proc(identifier: GLenum, num: GLuint, names: ptr GLuint): void {.stdcall.}](glGetProc("glGenNamesAMD"))
  glDeleteNamesAMD = cast[proc(identifier: GLenum, num: GLuint, names: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteNamesAMD"))
  glIsNameAMD = cast[proc(identifier: GLenum, name: GLuint): GLboolean {.stdcall.}](glGetProc("glIsNameAMD"))

# Load GL_AMD_occlusion_query_event
proc loadGL_AMD_occlusion_query_event*() =
  glQueryObjectParameteruiAMD = cast[proc(target: GLenum, id: GLuint, pname: GLenum, param: GLuint): void {.stdcall.}](glGetProc("glQueryObjectParameteruiAMD"))

# Load GL_AMD_performance_monitor
proc loadGL_AMD_performance_monitor*() =
  glGetPerfMonitorGroupsAMD = cast[proc(numGroups: ptr GLint, groupsSize: GLsizei, groups: ptr GLuint): void {.stdcall.}](glGetProc("glGetPerfMonitorGroupsAMD"))
  glGetPerfMonitorCountersAMD = cast[proc(group: GLuint, numCounters: ptr GLint, maxActiveCounters: ptr GLint, counterSize: GLsizei, counters: ptr GLuint): void {.stdcall.}](glGetProc("glGetPerfMonitorCountersAMD"))
  glGetPerfMonitorGroupStringAMD = cast[proc(group: GLuint, bufSize: GLsizei, length: ptr GLsizei, groupString: cstring): void {.stdcall.}](glGetProc("glGetPerfMonitorGroupStringAMD"))
  glGetPerfMonitorCounterStringAMD = cast[proc(group: GLuint, counter: GLuint, bufSize: GLsizei, length: ptr GLsizei, counterString: cstring): void {.stdcall.}](glGetProc("glGetPerfMonitorCounterStringAMD"))
  glGetPerfMonitorCounterInfoAMD = cast[proc(group: GLuint, counter: GLuint, pname: GLenum, data: pointer): void {.stdcall.}](glGetProc("glGetPerfMonitorCounterInfoAMD"))
  glGenPerfMonitorsAMD = cast[proc(n: GLsizei, monitors: ptr GLuint): void {.stdcall.}](glGetProc("glGenPerfMonitorsAMD"))
  glDeletePerfMonitorsAMD = cast[proc(n: GLsizei, monitors: ptr GLuint): void {.stdcall.}](glGetProc("glDeletePerfMonitorsAMD"))
  glSelectPerfMonitorCountersAMD = cast[proc(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: ptr GLuint): void {.stdcall.}](glGetProc("glSelectPerfMonitorCountersAMD"))
  glBeginPerfMonitorAMD = cast[proc(monitor: GLuint): void {.stdcall.}](glGetProc("glBeginPerfMonitorAMD"))
  glEndPerfMonitorAMD = cast[proc(monitor: GLuint): void {.stdcall.}](glGetProc("glEndPerfMonitorAMD"))
  glGetPerfMonitorCounterDataAMD = cast[proc(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: ptr GLuint, bytesWritten: ptr GLint): void {.stdcall.}](glGetProc("glGetPerfMonitorCounterDataAMD"))

# Load GL_AMD_sample_positions
proc loadGL_AMD_sample_positions*() =
  glSetMultisamplefvAMD = cast[proc(pname: GLenum, index: GLuint, val: ptr GLfloat): void {.stdcall.}](glGetProc("glSetMultisamplefvAMD"))

# Load GL_AMD_sparse_texture
proc loadGL_AMD_sparse_texture*() =
  glTexStorageSparseAMD = cast[proc(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield): void {.stdcall.}](glGetProc("glTexStorageSparseAMD"))
  glTextureStorageSparseAMD = cast[proc(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield): void {.stdcall.}](glGetProc("glTextureStorageSparseAMD"))

# Load GL_AMD_stencil_operation_extended
proc loadGL_AMD_stencil_operation_extended*() =
  glStencilOpValueAMD = cast[proc(face: GLenum, value: GLuint): void {.stdcall.}](glGetProc("glStencilOpValueAMD"))

# Load GL_AMD_vertex_shader_tessellator
proc loadGL_AMD_vertex_shader_tessellator*() =
  glTessellationFactorAMD = cast[proc(factor: GLfloat): void {.stdcall.}](glGetProc("glTessellationFactorAMD"))
  glTessellationModeAMD = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glTessellationModeAMD"))

# Load GL_APPLE_element_array
proc loadGL_APPLE_element_array*() =
  glElementPointerAPPLE = cast[proc(`type`: GLenum, pointer: pointer): void {.stdcall.}](glGetProc("glElementPointerAPPLE"))
  glDrawElementArrayAPPLE = cast[proc(mode: GLenum, first: GLint, count: GLsizei): void {.stdcall.}](glGetProc("glDrawElementArrayAPPLE"))
  glDrawRangeElementArrayAPPLE = cast[proc(mode: GLenum, start: GLuint, `end`: GLuint, first: GLint, count: GLsizei): void {.stdcall.}](glGetProc("glDrawRangeElementArrayAPPLE"))
  glMultiDrawElementArrayAPPLE = cast[proc(mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElementArrayAPPLE"))
  glMultiDrawRangeElementArrayAPPLE = cast[proc(mode: GLenum, start: GLuint, `end`: GLuint, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawRangeElementArrayAPPLE"))

# Load GL_APPLE_fence
proc loadGL_APPLE_fence*() =
  glGenFencesAPPLE = cast[proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}](glGetProc("glGenFencesAPPLE"))
  glDeleteFencesAPPLE = cast[proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteFencesAPPLE"))
  glSetFenceAPPLE = cast[proc(fence: GLuint): void {.stdcall.}](glGetProc("glSetFenceAPPLE"))
  glIsFenceAPPLE = cast[proc(fence: GLuint): GLboolean {.stdcall.}](glGetProc("glIsFenceAPPLE"))
  glTestFenceAPPLE = cast[proc(fence: GLuint): GLboolean {.stdcall.}](glGetProc("glTestFenceAPPLE"))
  glFinishFenceAPPLE = cast[proc(fence: GLuint): void {.stdcall.}](glGetProc("glFinishFenceAPPLE"))
  glTestObjectAPPLE = cast[proc(`object`: GLenum, name: GLuint): GLboolean {.stdcall.}](glGetProc("glTestObjectAPPLE"))
  glFinishObjectAPPLE = cast[proc(`object`: GLenum, name: GLint): void {.stdcall.}](glGetProc("glFinishObjectAPPLE"))

# Load GL_APPLE_flush_buffer_range
proc loadGL_APPLE_flush_buffer_range*() =
  glBufferParameteriAPPLE = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glBufferParameteriAPPLE"))
  glFlushMappedBufferRangeAPPLE = cast[proc(target: GLenum, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glFlushMappedBufferRangeAPPLE"))

# Load GL_APPLE_object_purgeable
proc loadGL_APPLE_object_purgeable*() =
  glObjectPurgeableAPPLE = cast[proc(objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}](glGetProc("glObjectPurgeableAPPLE"))
  glObjectUnpurgeableAPPLE = cast[proc(objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}](glGetProc("glObjectUnpurgeableAPPLE"))
  glGetObjectParameterivAPPLE = cast[proc(objectType: GLenum, name: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetObjectParameterivAPPLE"))

# Load GL_APPLE_texture_range
proc loadGL_APPLE_texture_range*() =
  glTextureRangeAPPLE = cast[proc(target: GLenum, length: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glTextureRangeAPPLE"))
  glGetTexParameterPointervAPPLE = cast[proc(target: GLenum, pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetTexParameterPointervAPPLE"))

# Load GL_APPLE_vertex_array_object
proc loadGL_APPLE_vertex_array_object*() =
  glBindVertexArrayAPPLE = cast[proc(array: GLuint): void {.stdcall.}](glGetProc("glBindVertexArrayAPPLE"))
  glDeleteVertexArraysAPPLE = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteVertexArraysAPPLE"))
  glGenVertexArraysAPPLE = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glGenVertexArraysAPPLE"))
  glIsVertexArrayAPPLE = cast[proc(array: GLuint): GLboolean {.stdcall.}](glGetProc("glIsVertexArrayAPPLE"))

# Load GL_APPLE_vertex_array_range
proc loadGL_APPLE_vertex_array_range*() =
  glVertexArrayRangeAPPLE = cast[proc(length: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexArrayRangeAPPLE"))
  glFlushVertexArrayRangeAPPLE = cast[proc(length: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glFlushVertexArrayRangeAPPLE"))
  glVertexArrayParameteriAPPLE = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glVertexArrayParameteriAPPLE"))

# Load GL_APPLE_vertex_program_evaluators
proc loadGL_APPLE_vertex_program_evaluators*() =
  glEnableVertexAttribAPPLE = cast[proc(index: GLuint, pname: GLenum): void {.stdcall.}](glGetProc("glEnableVertexAttribAPPLE"))
  glDisableVertexAttribAPPLE = cast[proc(index: GLuint, pname: GLenum): void {.stdcall.}](glGetProc("glDisableVertexAttribAPPLE"))
  glIsVertexAttribEnabledAPPLE = cast[proc(index: GLuint, pname: GLenum): GLboolean {.stdcall.}](glGetProc("glIsVertexAttribEnabledAPPLE"))
  glMapVertexAttrib1dAPPLE = cast[proc(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble): void {.stdcall.}](glGetProc("glMapVertexAttrib1dAPPLE"))
  glMapVertexAttrib1fAPPLE = cast[proc(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat): void {.stdcall.}](glGetProc("glMapVertexAttrib1fAPPLE"))
  glMapVertexAttrib2dAPPLE = cast[proc(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble): void {.stdcall.}](glGetProc("glMapVertexAttrib2dAPPLE"))
  glMapVertexAttrib2fAPPLE = cast[proc(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat): void {.stdcall.}](glGetProc("glMapVertexAttrib2fAPPLE"))

# Load GL_ARB_ES2_compatibility
proc loadGL_ARB_ES2_compatibility*() =
  glReleaseShaderCompiler = cast[proc(): void {.stdcall.}](glGetProc("glReleaseShaderCompiler"))
  glShaderBinary = cast[proc(count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei): void {.stdcall.}](glGetProc("glShaderBinary"))
  glGetShaderPrecisionFormat = cast[proc(shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint): void {.stdcall.}](glGetProc("glGetShaderPrecisionFormat"))
  glDepthRangef = cast[proc(n: GLfloat, f: GLfloat): void {.stdcall.}](glGetProc("glDepthRangef"))
  glClearDepthf = cast[proc(d: GLfloat): void {.stdcall.}](glGetProc("glClearDepthf"))

# Load GL_ARB_ES3_1_compatibility
proc loadGL_ARB_ES3_1_compatibility*() =
  glMemoryBarrierByRegion = cast[proc(barriers: GLbitfield): void {.stdcall.}](glGetProc("glMemoryBarrierByRegion"))

# Load GL_ARB_ES3_2_compatibility
proc loadGL_ARB_ES3_2_compatibility*() =
  glPrimitiveBoundingBoxARB = cast[proc(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat): void {.stdcall.}](glGetProc("glPrimitiveBoundingBoxARB"))

# Load GL_ARB_base_instance
proc loadGL_ARB_base_instance*() =
  glDrawArraysInstancedBaseInstance = cast[proc(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}](glGetProc("glDrawArraysInstancedBaseInstance"))
  glDrawElementsInstancedBaseInstance = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint): void {.stdcall.}](glGetProc("glDrawElementsInstancedBaseInstance"))
  glDrawElementsInstancedBaseVertexBaseInstance = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint): void {.stdcall.}](glGetProc("glDrawElementsInstancedBaseVertexBaseInstance"))

# Load GL_ARB_bindless_texture
proc loadGL_ARB_bindless_texture*() =
  glGetTextureHandleARB = cast[proc(texture: GLuint): GLuint64 {.stdcall.}](glGetProc("glGetTextureHandleARB"))
  glGetTextureSamplerHandleARB = cast[proc(texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}](glGetProc("glGetTextureSamplerHandleARB"))
  glMakeTextureHandleResidentARB = cast[proc(handle: GLuint64): void {.stdcall.}](glGetProc("glMakeTextureHandleResidentARB"))
  glMakeTextureHandleNonResidentARB = cast[proc(handle: GLuint64): void {.stdcall.}](glGetProc("glMakeTextureHandleNonResidentARB"))
  glGetImageHandleARB = cast[proc(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}](glGetProc("glGetImageHandleARB"))
  glMakeImageHandleResidentARB = cast[proc(handle: GLuint64, access: GLenum): void {.stdcall.}](glGetProc("glMakeImageHandleResidentARB"))
  glMakeImageHandleNonResidentARB = cast[proc(handle: GLuint64): void {.stdcall.}](glGetProc("glMakeImageHandleNonResidentARB"))
  glUniformHandleui64ARB = cast[proc(location: GLint, value: GLuint64): void {.stdcall.}](glGetProc("glUniformHandleui64ARB"))
  glUniformHandleui64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glUniformHandleui64vARB"))
  glProgramUniformHandleui64ARB = cast[proc(program: GLuint, location: GLint, value: GLuint64): void {.stdcall.}](glGetProc("glProgramUniformHandleui64ARB"))
  glProgramUniformHandleui64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64): void {.stdcall.}](glGetProc("glProgramUniformHandleui64vARB"))
  glIsTextureHandleResidentARB = cast[proc(handle: GLuint64): GLboolean {.stdcall.}](glGetProc("glIsTextureHandleResidentARB"))
  glIsImageHandleResidentARB = cast[proc(handle: GLuint64): GLboolean {.stdcall.}](glGetProc("glIsImageHandleResidentARB"))
  glVertexAttribL1ui64ARB = cast[proc(index: GLuint, x: GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL1ui64ARB"))
  glVertexAttribL1ui64vARB = cast[proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL1ui64vARB"))
  glGetVertexAttribLui64vARB = cast[proc(index: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetVertexAttribLui64vARB"))

# Load GL_ARB_blend_func_extended
proc loadGL_ARB_blend_func_extended*() =
  glBindFragDataLocationIndexed = cast[proc(program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring): void {.stdcall.}](glGetProc("glBindFragDataLocationIndexed"))
  glGetFragDataIndex = cast[proc(program: GLuint, name: cstring): GLint {.stdcall.}](glGetProc("glGetFragDataIndex"))

# Load GL_ARB_buffer_storage
proc loadGL_ARB_buffer_storage*() =
  glBufferStorage = cast[proc(target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}](glGetProc("glBufferStorage"))

# Load GL_ARB_cl_event
proc loadGL_ARB_cl_event*() =
  glCreateSyncFromCLeventARB = cast[proc(context: ClContext, event: ClEvent, flags: GLbitfield): GLsync {.stdcall.}](glGetProc("glCreateSyncFromCLeventARB"))

# Load GL_ARB_clear_buffer_object
proc loadGL_ARB_clear_buffer_object*() =
  glClearBufferData = cast[proc(target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearBufferData"))
  glClearBufferSubData = cast[proc(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearBufferSubData"))

# Load GL_ARB_clear_texture
proc loadGL_ARB_clear_texture*() =
  glClearTexImage = cast[proc(texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearTexImage"))
  glClearTexSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearTexSubImage"))

# Load GL_ARB_clip_control
proc loadGL_ARB_clip_control*() =
  glClipControl = cast[proc(origin: GLenum, depth: GLenum): void {.stdcall.}](glGetProc("glClipControl"))

# Load GL_ARB_color_buffer_float
proc loadGL_ARB_color_buffer_float*() =
  glClampColorARB = cast[proc(target: GLenum, clamp: GLenum): void {.stdcall.}](glGetProc("glClampColorARB"))

# Load GL_ARB_compute_shader
proc loadGL_ARB_compute_shader*() =
  glDispatchCompute = cast[proc(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint): void {.stdcall.}](glGetProc("glDispatchCompute"))
  glDispatchComputeIndirect = cast[proc(indirect: GLintptr): void {.stdcall.}](glGetProc("glDispatchComputeIndirect"))

# Load GL_ARB_compute_variable_group_size
proc loadGL_ARB_compute_variable_group_size*() =
  glDispatchComputeGroupSizeARB = cast[proc(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint): void {.stdcall.}](glGetProc("glDispatchComputeGroupSizeARB"))

# Load GL_ARB_copy_buffer
proc loadGL_ARB_copy_buffer*() =
  glCopyBufferSubData = cast[proc(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glCopyBufferSubData"))

# Load GL_ARB_copy_image
proc loadGL_ARB_copy_image*() =
  glCopyImageSubData = cast[proc(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void {.stdcall.}](glGetProc("glCopyImageSubData"))

# Load GL_ARB_debug_output
proc loadGL_ARB_debug_output*() =
  glDebugMessageControlARB = cast[proc(source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}](glGetProc("glDebugMessageControlARB"))
  glDebugMessageInsertARB = cast[proc(source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring): void {.stdcall.}](glGetProc("glDebugMessageInsertARB"))
  glDebugMessageCallbackARB = cast[proc(callback: GLDEBUGPROCARB, userParam: pointer): void {.stdcall.}](glGetProc("glDebugMessageCallbackARB"))
  glGetDebugMessageLogARB = cast[proc(count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](glGetProc("glGetDebugMessageLogARB"))

# Load GL_ARB_direct_state_access
proc loadGL_ARB_direct_state_access*() =
  glCreateTransformFeedbacks = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glCreateTransformFeedbacks"))
  glTransformFeedbackBufferBase = cast[proc(xfb: GLuint, index: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glTransformFeedbackBufferBase"))
  glTransformFeedbackBufferRange = cast[proc(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glTransformFeedbackBufferRange"))
  glGetTransformFeedbackiv = cast[proc(xfb: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetTransformFeedbackiv"))
  glGetTransformFeedbacki64_v = cast[proc(xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64): void {.stdcall.}](glGetProc("glGetTransformFeedbacki64_v"))
  glCreateBuffers = cast[proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateBuffers"))
  glNamedBufferStorage = cast[proc(buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}](glGetProc("glNamedBufferStorage"))
  glNamedBufferData = cast[proc(buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum): void {.stdcall.}](glGetProc("glNamedBufferData"))
  glNamedBufferSubData = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glNamedBufferSubData"))
  glCopyNamedBufferSubData = cast[proc(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glCopyNamedBufferSubData"))
  glClearNamedBufferData = cast[proc(buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearNamedBufferData"))
  glClearNamedBufferSubData = cast[proc(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearNamedBufferSubData"))
  glMapNamedBuffer = cast[proc(buffer: GLuint, access: GLenum): pointer {.stdcall.}](glGetProc("glMapNamedBuffer"))
  glMapNamedBufferRange = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](glGetProc("glMapNamedBufferRange"))
  glUnmapNamedBuffer = cast[proc(buffer: GLuint): GLboolean {.stdcall.}](glGetProc("glUnmapNamedBuffer"))
  glFlushMappedNamedBufferRange = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}](glGetProc("glFlushMappedNamedBufferRange"))
  glGetNamedBufferParameteriv = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedBufferParameteriv"))
  glGetNamedBufferParameteri64v = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetNamedBufferParameteri64v"))
  glGetNamedBufferPointerv = cast[proc(buffer: GLuint, pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetNamedBufferPointerv"))
  glGetNamedBufferSubData = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glGetNamedBufferSubData"))
  glCreateFramebuffers = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateFramebuffers"))
  glNamedFramebufferRenderbuffer = cast[proc(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glNamedFramebufferRenderbuffer"))
  glNamedFramebufferParameteri = cast[proc(framebuffer: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferParameteri"))
  glNamedFramebufferTexture = cast[proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTexture"))
  glNamedFramebufferTextureLayer = cast[proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTextureLayer"))
  glNamedFramebufferDrawBuffer = cast[proc(framebuffer: GLuint, buf: GLenum): void {.stdcall.}](glGetProc("glNamedFramebufferDrawBuffer"))
  glNamedFramebufferDrawBuffers = cast[proc(framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum): void {.stdcall.}](glGetProc("glNamedFramebufferDrawBuffers"))
  glNamedFramebufferReadBuffer = cast[proc(framebuffer: GLuint, src: GLenum): void {.stdcall.}](glGetProc("glNamedFramebufferReadBuffer"))
  glInvalidateNamedFramebufferData = cast[proc(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum): void {.stdcall.}](glGetProc("glInvalidateNamedFramebufferData"))
  glInvalidateNamedFramebufferSubData = cast[proc(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glInvalidateNamedFramebufferSubData"))
  glClearNamedFramebufferiv = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint): void {.stdcall.}](glGetProc("glClearNamedFramebufferiv"))
  glClearNamedFramebufferuiv = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint): void {.stdcall.}](glGetProc("glClearNamedFramebufferuiv"))
  glClearNamedFramebufferfv = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat): void {.stdcall.}](glGetProc("glClearNamedFramebufferfv"))
  glClearNamedFramebufferfi = cast[proc(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void {.stdcall.}](glGetProc("glClearNamedFramebufferfi"))
  glBlitNamedFramebuffer = cast[proc(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}](glGetProc("glBlitNamedFramebuffer"))
  glCheckNamedFramebufferStatus = cast[proc(framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}](glGetProc("glCheckNamedFramebufferStatus"))
  glGetNamedFramebufferParameteriv = cast[proc(framebuffer: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedFramebufferParameteriv"))
  glGetNamedFramebufferAttachmentParameteriv = cast[proc(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedFramebufferAttachmentParameteriv"))
  glCreateRenderbuffers = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateRenderbuffers"))
  glNamedRenderbufferStorage = cast[proc(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorage"))
  glNamedRenderbufferStorageMultisample = cast[proc(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorageMultisample"))
  glGetNamedRenderbufferParameteriv = cast[proc(renderbuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedRenderbufferParameteriv"))
  glCreateTextures = cast[proc(target: GLenum, n: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glCreateTextures"))
  glTextureBuffer = cast[proc(texture: GLuint, internalformat: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glTextureBuffer"))
  glTextureBufferRange = cast[proc(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glTextureBufferRange"))
  glTextureStorage1D = cast[proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage1D"))
  glTextureStorage2D = cast[proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage2D"))
  glTextureStorage3D = cast[proc(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage3D"))
  glTextureStorage2DMultisample = cast[proc(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTextureStorage2DMultisample"))
  glTextureStorage3DMultisample = cast[proc(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTextureStorage3DMultisample"))
  glTextureSubImage1D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage1D"))
  glTextureSubImage2D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage2D"))
  glTextureSubImage3D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage3D"))
  glCompressedTextureSubImage1D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage1D"))
  glCompressedTextureSubImage2D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage2D"))
  glCompressedTextureSubImage3D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage3D"))
  glCopyTextureSubImage1D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage1D"))
  glCopyTextureSubImage2D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage2D"))
  glCopyTextureSubImage3D = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage3D"))
  glTextureParameterf = cast[proc(texture: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glTextureParameterf"))
  glTextureParameterfv = cast[proc(texture: GLuint, pname: GLenum, param: ptr GLfloat): void {.stdcall.}](glGetProc("glTextureParameterfv"))
  glTextureParameteri = cast[proc(texture: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glTextureParameteri"))
  glTextureParameterIiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTextureParameterIiv"))
  glTextureParameterIuiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glTextureParameterIuiv"))
  glTextureParameteriv = cast[proc(texture: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glTextureParameteriv"))
  glGenerateTextureMipmap = cast[proc(texture: GLuint): void {.stdcall.}](glGetProc("glGenerateTextureMipmap"))
  glBindTextureUnit = cast[proc(unit: GLuint, texture: GLuint): void {.stdcall.}](glGetProc("glBindTextureUnit"))
  glGetTextureImage = cast[proc(texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetTextureImage"))
  glGetCompressedTextureImage = cast[proc(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetCompressedTextureImage"))
  glGetTextureLevelParameterfv = cast[proc(texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTextureLevelParameterfv"))
  glGetTextureLevelParameteriv = cast[proc(texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureLevelParameteriv"))
  glGetTextureParameterfv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTextureParameterfv"))
  glGetTextureParameterIiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureParameterIiv"))
  glGetTextureParameterIuiv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetTextureParameterIuiv"))
  glGetTextureParameteriv = cast[proc(texture: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureParameteriv"))
  glCreateVertexArrays = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glCreateVertexArrays"))
  glDisableVertexArrayAttrib = cast[proc(vaobj: GLuint, index: GLuint): void {.stdcall.}](glGetProc("glDisableVertexArrayAttrib"))
  glEnableVertexArrayAttrib = cast[proc(vaobj: GLuint, index: GLuint): void {.stdcall.}](glGetProc("glEnableVertexArrayAttrib"))
  glVertexArrayElementBuffer = cast[proc(vaobj: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glVertexArrayElementBuffer"))
  glVertexArrayVertexBuffer = cast[proc(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}](glGetProc("glVertexArrayVertexBuffer"))
  glVertexArrayVertexBuffers = cast[proc(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei): void {.stdcall.}](glGetProc("glVertexArrayVertexBuffers"))
  glVertexArrayAttribBinding = cast[proc(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribBinding"))
  glVertexArrayAttribFormat = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribFormat"))
  glVertexArrayAttribIFormat = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribIFormat"))
  glVertexArrayAttribLFormat = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayAttribLFormat"))
  glVertexArrayBindingDivisor = cast[proc(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexArrayBindingDivisor"))
  glGetVertexArrayiv = cast[proc(vaobj: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexArrayiv"))
  glGetVertexArrayIndexediv = cast[proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexArrayIndexediv"))
  glGetVertexArrayIndexed64iv = cast[proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64): void {.stdcall.}](glGetProc("glGetVertexArrayIndexed64iv"))
  glCreateSamplers = cast[proc(n: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glCreateSamplers"))
  glCreateProgramPipelines = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glCreateProgramPipelines"))
  glCreateQueries = cast[proc(target: GLenum, n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glCreateQueries"))
  glGetQueryBufferObjecti64v = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjecti64v"))
  glGetQueryBufferObjectiv = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjectiv"))
  glGetQueryBufferObjectui64v = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjectui64v"))
  glGetQueryBufferObjectuiv = cast[proc(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void {.stdcall.}](glGetProc("glGetQueryBufferObjectuiv"))

# Load GL_ARB_draw_buffers
proc loadGL_ARB_draw_buffers*() =
  glDrawBuffersARB = cast[proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}](glGetProc("glDrawBuffersARB"))

# Load GL_ARB_draw_buffers_blend
proc loadGL_ARB_draw_buffers_blend*() =
  glBlendEquationiARB = cast[proc(buf: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glBlendEquationiARB"))
  glBlendEquationSeparateiARB = cast[proc(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendEquationSeparateiARB"))
  glBlendFunciARB = cast[proc(buf: GLuint, src: GLenum, dst: GLenum): void {.stdcall.}](glGetProc("glBlendFunciARB"))
  glBlendFuncSeparateiARB = cast[proc(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendFuncSeparateiARB"))

# Load GL_ARB_draw_elements_base_vertex
proc loadGL_ARB_draw_elements_base_vertex*() =
  glDrawElementsBaseVertex = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}](glGetProc("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint): void {.stdcall.}](glGetProc("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint): void {.stdcall.}](glGetProc("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint): void {.stdcall.}](glGetProc("glMultiDrawElementsBaseVertex"))

# Load GL_ARB_draw_indirect
proc loadGL_ARB_draw_indirect*() =
  glDrawArraysIndirect = cast[proc(mode: GLenum, indirect: pointer): void {.stdcall.}](glGetProc("glDrawArraysIndirect"))
  glDrawElementsIndirect = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer): void {.stdcall.}](glGetProc("glDrawElementsIndirect"))

# Load GL_ARB_draw_instanced
proc loadGL_ARB_draw_instanced*() =
  glDrawArraysInstancedARB = cast[proc(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void {.stdcall.}](glGetProc("glDrawArraysInstancedARB"))
  glDrawElementsInstancedARB = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei): void {.stdcall.}](glGetProc("glDrawElementsInstancedARB"))

# Load GL_ARB_fragment_program
proc loadGL_ARB_fragment_program*() =
  glProgramStringARB = cast[proc(target: GLenum, format: GLenum, len: GLsizei, string: pointer): void {.stdcall.}](glGetProc("glProgramStringARB"))
  glBindProgramARB = cast[proc(target: GLenum, program: GLuint): void {.stdcall.}](glGetProc("glBindProgramARB"))
  glDeleteProgramsARB = cast[proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteProgramsARB"))
  glGenProgramsARB = cast[proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}](glGetProc("glGenProgramsARB"))
  glProgramEnvParameter4dARB = cast[proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glProgramEnvParameter4dARB"))
  glProgramEnvParameter4dvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramEnvParameter4dvARB"))
  glProgramEnvParameter4fARB = cast[proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glProgramEnvParameter4fARB"))
  glProgramEnvParameter4fvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramEnvParameter4fvARB"))
  glProgramLocalParameter4dARB = cast[proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glProgramLocalParameter4dARB"))
  glProgramLocalParameter4dvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramLocalParameter4dvARB"))
  glProgramLocalParameter4fARB = cast[proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glProgramLocalParameter4fARB"))
  glProgramLocalParameter4fvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramLocalParameter4fvARB"))
  glGetProgramEnvParameterdvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetProgramEnvParameterdvARB"))
  glGetProgramEnvParameterfvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetProgramEnvParameterfvARB"))
  glGetProgramLocalParameterdvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetProgramLocalParameterdvARB"))
  glGetProgramLocalParameterfvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetProgramLocalParameterfvARB"))
  glGetProgramivARB = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramivARB"))
  glGetProgramStringARB = cast[proc(target: GLenum, pname: GLenum, string: pointer): void {.stdcall.}](glGetProc("glGetProgramStringARB"))
  glIsProgramARB = cast[proc(program: GLuint): GLboolean {.stdcall.}](glGetProc("glIsProgramARB"))

# Load GL_ARB_framebuffer_no_attachments
proc loadGL_ARB_framebuffer_no_attachments*() =
  glFramebufferParameteri = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glFramebufferParameteri"))
  glGetFramebufferParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFramebufferParameteriv"))

# Load GL_ARB_framebuffer_object
proc loadGL_ARB_framebuffer_object*() =
  glIsRenderbuffer = cast[proc(renderbuffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc(framebuffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsFramebuffer"))
  glBindFramebuffer = cast[proc(target: GLenum, framebuffer: GLuint): void {.stdcall.}](glGetProc("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc(target: GLenum): GLenum {.stdcall.}](glGetProc("glCheckFramebufferStatus"))
  glFramebufferTexture1D = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture1D"))
  glFramebufferTexture2D = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture2D"))
  glFramebufferTexture3D = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture3D"))
  glFramebufferRenderbuffer = cast[proc(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glGenerateMipmap"))
  glBlitFramebuffer = cast[proc(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}](glGetProc("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glFramebufferTextureLayer"))

# Load GL_ARB_geometry_shader4
proc loadGL_ARB_geometry_shader4*() =
  glProgramParameteriARB = cast[proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glProgramParameteriARB"))
  glFramebufferTextureARB = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTextureARB"))
  glFramebufferTextureLayerARB = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glFramebufferTextureLayerARB"))
  glFramebufferTextureFaceARB = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void {.stdcall.}](glGetProc("glFramebufferTextureFaceARB"))

# Load GL_ARB_get_program_binary
proc loadGL_ARB_get_program_binary*() =
  glGetProgramBinary = cast[proc(program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer): void {.stdcall.}](glGetProc("glGetProgramBinary"))
  glProgramBinary = cast[proc(program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei): void {.stdcall.}](glGetProc("glProgramBinary"))
  glProgramParameteri = cast[proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glProgramParameteri"))

# Load GL_ARB_get_texture_sub_image
proc loadGL_ARB_get_texture_sub_image*() =
  glGetTextureSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetTextureSubImage"))
  glGetCompressedTextureSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer): void {.stdcall.}](glGetProc("glGetCompressedTextureSubImage"))

# Load GL_ARB_gl_spirv
proc loadGL_ARB_gl_spirv*() =
  glSpecializeShaderARB = cast[proc(shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint): void {.stdcall.}](glGetProc("glSpecializeShaderARB"))

# Load GL_ARB_gpu_shader_fp64
proc loadGL_ARB_gpu_shader_fp64*() =
  glUniform1d = cast[proc(location: GLint, x: GLdouble): void {.stdcall.}](glGetProc("glUniform1d"))
  glUniform2d = cast[proc(location: GLint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glUniform2d"))
  glUniform3d = cast[proc(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glUniform3d"))
  glUniform4d = cast[proc(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glUniform4d"))
  glUniform1dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform1dv"))
  glUniform2dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform2dv"))
  glUniform3dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform3dv"))
  glUniform4dv = cast[proc(location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniform4dv"))
  glUniformMatrix2dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix2dv"))
  glUniformMatrix3dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix3dv"))
  glUniformMatrix4dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix4dv"))
  glUniformMatrix2x3dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix2x3dv"))
  glUniformMatrix2x4dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix2x4dv"))
  glUniformMatrix3x2dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix3x2dv"))
  glUniformMatrix3x4dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix3x4dv"))
  glUniformMatrix4x2dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix4x2dv"))
  glUniformMatrix4x3dv = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glUniformMatrix4x3dv"))
  glGetUniformdv = cast[proc(program: GLuint, location: GLint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetUniformdv"))

# Load GL_ARB_gpu_shader_int64
proc loadGL_ARB_gpu_shader_int64*() =
  glUniform1i64ARB = cast[proc(location: GLint, x: GLint64): void {.stdcall.}](glGetProc("glUniform1i64ARB"))
  glUniform2i64ARB = cast[proc(location: GLint, x: GLint64, y: GLint64): void {.stdcall.}](glGetProc("glUniform2i64ARB"))
  glUniform3i64ARB = cast[proc(location: GLint, x: GLint64, y: GLint64, z: GLint64): void {.stdcall.}](glGetProc("glUniform3i64ARB"))
  glUniform4i64ARB = cast[proc(location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64): void {.stdcall.}](glGetProc("glUniform4i64ARB"))
  glUniform1i64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glUniform1i64vARB"))
  glUniform2i64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glUniform2i64vARB"))
  glUniform3i64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glUniform3i64vARB"))
  glUniform4i64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glUniform4i64vARB"))
  glUniform1ui64ARB = cast[proc(location: GLint, x: GLuint64): void {.stdcall.}](glGetProc("glUniform1ui64ARB"))
  glUniform2ui64ARB = cast[proc(location: GLint, x: GLuint64, y: GLuint64): void {.stdcall.}](glGetProc("glUniform2ui64ARB"))
  glUniform3ui64ARB = cast[proc(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64): void {.stdcall.}](glGetProc("glUniform3ui64ARB"))
  glUniform4ui64ARB = cast[proc(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64): void {.stdcall.}](glGetProc("glUniform4ui64ARB"))
  glUniform1ui64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glUniform1ui64vARB"))
  glUniform2ui64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glUniform2ui64vARB"))
  glUniform3ui64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glUniform3ui64vARB"))
  glUniform4ui64vARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glUniform4ui64vARB"))
  glGetUniformi64vARB = cast[proc(program: GLuint, location: GLint, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetUniformi64vARB"))
  glGetUniformui64vARB = cast[proc(program: GLuint, location: GLint, params: ptr GLuint64): void {.stdcall.}](glGetProc("glGetUniformui64vARB"))
  glGetnUniformi64vARB = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetnUniformi64vARB"))
  glGetnUniformui64vARB = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint64): void {.stdcall.}](glGetProc("glGetnUniformui64vARB"))
  glProgramUniform1i64ARB = cast[proc(program: GLuint, location: GLint, x: GLint64): void {.stdcall.}](glGetProc("glProgramUniform1i64ARB"))
  glProgramUniform2i64ARB = cast[proc(program: GLuint, location: GLint, x: GLint64, y: GLint64): void {.stdcall.}](glGetProc("glProgramUniform2i64ARB"))
  glProgramUniform3i64ARB = cast[proc(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64): void {.stdcall.}](glGetProc("glProgramUniform3i64ARB"))
  glProgramUniform4i64ARB = cast[proc(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64): void {.stdcall.}](glGetProc("glProgramUniform4i64ARB"))
  glProgramUniform1i64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glProgramUniform1i64vARB"))
  glProgramUniform2i64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glProgramUniform2i64vARB"))
  glProgramUniform3i64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glProgramUniform3i64vARB"))
  glProgramUniform4i64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64): void {.stdcall.}](glGetProc("glProgramUniform4i64vARB"))
  glProgramUniform1ui64ARB = cast[proc(program: GLuint, location: GLint, x: GLuint64): void {.stdcall.}](glGetProc("glProgramUniform1ui64ARB"))
  glProgramUniform2ui64ARB = cast[proc(program: GLuint, location: GLint, x: GLuint64, y: GLuint64): void {.stdcall.}](glGetProc("glProgramUniform2ui64ARB"))
  glProgramUniform3ui64ARB = cast[proc(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64): void {.stdcall.}](glGetProc("glProgramUniform3ui64ARB"))
  glProgramUniform4ui64ARB = cast[proc(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64): void {.stdcall.}](glGetProc("glProgramUniform4ui64ARB"))
  glProgramUniform1ui64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glProgramUniform1ui64vARB"))
  glProgramUniform2ui64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glProgramUniform2ui64vARB"))
  glProgramUniform3ui64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glProgramUniform3ui64vARB"))
  glProgramUniform4ui64vARB = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glProgramUniform4ui64vARB"))

# Load GL_ARB_imaging
proc loadGL_ARB_imaging*() =
  glBlendColor = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}](glGetProc("glBlendColor"))
  glBlendEquation = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glBlendEquation"))
  glColorTable = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}](glGetProc("glColorTable"))
  glColorTableParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glColorTableParameterfv"))
  glColorTableParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glColorTableParameteriv"))
  glCopyColorTable = cast[proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyColorTable"))
  glGetColorTable = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}](glGetProc("glGetColorTable"))
  glGetColorTableParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetColorTableParameterfv"))
  glGetColorTableParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetColorTableParameteriv"))
  glColorSubTable = cast[proc(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glColorSubTable"))
  glCopyColorSubTable = cast[proc(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyColorSubTable"))
  glConvolutionFilter1D = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}](glGetProc("glConvolutionFilter1D"))
  glConvolutionFilter2D = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}](glGetProc("glConvolutionFilter2D"))
  glConvolutionParameterf = cast[proc(target: GLenum, pname: GLenum, params: GLfloat): void {.stdcall.}](glGetProc("glConvolutionParameterf"))
  glConvolutionParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glConvolutionParameterfv"))
  glConvolutionParameteri = cast[proc(target: GLenum, pname: GLenum, params: GLint): void {.stdcall.}](glGetProc("glConvolutionParameteri"))
  glConvolutionParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glConvolutionParameteriv"))
  glCopyConvolutionFilter1D = cast[proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyConvolutionFilter1D"))
  glCopyConvolutionFilter2D = cast[proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyConvolutionFilter2D"))
  glGetConvolutionFilter = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}](glGetProc("glGetConvolutionFilter"))
  glGetConvolutionParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetConvolutionParameterfv"))
  glGetConvolutionParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetConvolutionParameteriv"))
  glGetSeparableFilter = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer): void {.stdcall.}](glGetProc("glGetSeparableFilter"))
  glSeparableFilter2D = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer): void {.stdcall.}](glGetProc("glSeparableFilter2D"))
  glGetHistogram = cast[proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}](glGetProc("glGetHistogram"))
  glGetHistogramParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetHistogramParameterfv"))
  glGetHistogramParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetHistogramParameteriv"))
  glGetMinmax = cast[proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}](glGetProc("glGetMinmax"))
  glGetMinmaxParameterfv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMinmaxParameterfv"))
  glGetMinmaxParameteriv = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMinmaxParameteriv"))
  glHistogram = cast[proc(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean): void {.stdcall.}](glGetProc("glHistogram"))
  glMinmax = cast[proc(target: GLenum, internalformat: GLenum, sink: GLboolean): void {.stdcall.}](glGetProc("glMinmax"))
  glResetHistogram = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glResetHistogram"))
  glResetMinmax = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glResetMinmax"))

# Load GL_ARB_indirect_parameters
proc loadGL_ARB_indirect_parameters*() =
  glMultiDrawArraysIndirectCountARB = cast[proc(mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawArraysIndirectCountARB"))
  glMultiDrawElementsIndirectCountARB = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElementsIndirectCountARB"))

# Load GL_ARB_instanced_arrays
proc loadGL_ARB_instanced_arrays*() =
  glVertexAttribDivisorARB = cast[proc(index: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexAttribDivisorARB"))

# Load GL_ARB_internalformat_query
proc loadGL_ARB_internalformat_query*() =
  glGetInternalformativ = cast[proc(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetInternalformativ"))

# Load GL_ARB_internalformat_query2
proc loadGL_ARB_internalformat_query2*() =
  glGetInternalformati64v = cast[proc(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetInternalformati64v"))

# Load GL_ARB_invalidate_subdata
proc loadGL_ARB_invalidate_subdata*() =
  glInvalidateTexSubImage = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glInvalidateTexSubImage"))
  glInvalidateTexImage = cast[proc(texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glInvalidateTexImage"))
  glInvalidateBufferSubData = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}](glGetProc("glInvalidateBufferSubData"))
  glInvalidateBufferData = cast[proc(buffer: GLuint): void {.stdcall.}](glGetProc("glInvalidateBufferData"))
  glInvalidateFramebuffer = cast[proc(target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum): void {.stdcall.}](glGetProc("glInvalidateFramebuffer"))
  glInvalidateSubFramebuffer = cast[proc(target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glInvalidateSubFramebuffer"))

# Load GL_ARB_map_buffer_range
proc loadGL_ARB_map_buffer_range*() =
  glMapBufferRange = cast[proc(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](glGetProc("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc(target: GLenum, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}](glGetProc("glFlushMappedBufferRange"))

# Load GL_ARB_matrix_palette
proc loadGL_ARB_matrix_palette*() =
  glCurrentPaletteMatrixARB = cast[proc(index: GLint): void {.stdcall.}](glGetProc("glCurrentPaletteMatrixARB"))
  glMatrixIndexubvARB = cast[proc(size: GLint, indices: ptr GLubyte): void {.stdcall.}](glGetProc("glMatrixIndexubvARB"))
  glMatrixIndexusvARB = cast[proc(size: GLint, indices: ptr GLushort): void {.stdcall.}](glGetProc("glMatrixIndexusvARB"))
  glMatrixIndexuivARB = cast[proc(size: GLint, indices: ptr GLuint): void {.stdcall.}](glGetProc("glMatrixIndexuivARB"))
  glMatrixIndexPointerARB = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glMatrixIndexPointerARB"))

# Load GL_ARB_multi_bind
proc loadGL_ARB_multi_bind*() =
  glBindBuffersBase = cast[proc(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glBindBuffersBase"))
  glBindBuffersRange = cast[proc(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr): void {.stdcall.}](glGetProc("glBindBuffersRange"))
  glBindTextures = cast[proc(first: GLuint, count: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glBindTextures"))
  glBindSamplers = cast[proc(first: GLuint, count: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glBindSamplers"))
  glBindImageTextures = cast[proc(first: GLuint, count: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glBindImageTextures"))
  glBindVertexBuffers = cast[proc(first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei): void {.stdcall.}](glGetProc("glBindVertexBuffers"))

# Load GL_ARB_multi_draw_indirect
proc loadGL_ARB_multi_draw_indirect*() =
  glMultiDrawArraysIndirect = cast[proc(mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawArraysIndirect"))
  glMultiDrawElementsIndirect = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElementsIndirect"))

# Load GL_ARB_multisample
proc loadGL_ARB_multisample*() =
  glSampleCoverageARB = cast[proc(value: GLfloat, invert: GLboolean): void {.stdcall.}](glGetProc("glSampleCoverageARB"))

# Load GL_ARB_multitexture
proc loadGL_ARB_multitexture*() =
  glActiveTextureARB = cast[proc(texture: GLenum): void {.stdcall.}](glGetProc("glActiveTextureARB"))
  glClientActiveTextureARB = cast[proc(texture: GLenum): void {.stdcall.}](glGetProc("glClientActiveTextureARB"))
  glMultiTexCoord1dARB = cast[proc(target: GLenum, s: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord1dARB"))
  glMultiTexCoord1dvARB = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord1dvARB"))
  glMultiTexCoord1fARB = cast[proc(target: GLenum, s: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord1fARB"))
  glMultiTexCoord1fvARB = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord1fvARB"))
  glMultiTexCoord1iARB = cast[proc(target: GLenum, s: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord1iARB"))
  glMultiTexCoord1ivARB = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord1ivARB"))
  glMultiTexCoord1sARB = cast[proc(target: GLenum, s: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord1sARB"))
  glMultiTexCoord1svARB = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord1svARB"))
  glMultiTexCoord2dARB = cast[proc(target: GLenum, s: GLdouble, t: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord2dARB"))
  glMultiTexCoord2dvARB = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord2dvARB"))
  glMultiTexCoord2fARB = cast[proc(target: GLenum, s: GLfloat, t: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord2fARB"))
  glMultiTexCoord2fvARB = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord2fvARB"))
  glMultiTexCoord2iARB = cast[proc(target: GLenum, s: GLint, t: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord2iARB"))
  glMultiTexCoord2ivARB = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord2ivARB"))
  glMultiTexCoord2sARB = cast[proc(target: GLenum, s: GLshort, t: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord2sARB"))
  glMultiTexCoord2svARB = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord2svARB"))
  glMultiTexCoord3dARB = cast[proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord3dARB"))
  glMultiTexCoord3dvARB = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord3dvARB"))
  glMultiTexCoord3fARB = cast[proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord3fARB"))
  glMultiTexCoord3fvARB = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord3fvARB"))
  glMultiTexCoord3iARB = cast[proc(target: GLenum, s: GLint, t: GLint, r: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord3iARB"))
  glMultiTexCoord3ivARB = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord3ivARB"))
  glMultiTexCoord3sARB = cast[proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord3sARB"))
  glMultiTexCoord3svARB = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord3svARB"))
  glMultiTexCoord4dARB = cast[proc(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord4dARB"))
  glMultiTexCoord4dvARB = cast[proc(target: GLenum, v: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexCoord4dvARB"))
  glMultiTexCoord4fARB = cast[proc(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord4fARB"))
  glMultiTexCoord4fvARB = cast[proc(target: GLenum, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexCoord4fvARB"))
  glMultiTexCoord4iARB = cast[proc(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint): void {.stdcall.}](glGetProc("glMultiTexCoord4iARB"))
  glMultiTexCoord4ivARB = cast[proc(target: GLenum, v: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexCoord4ivARB"))
  glMultiTexCoord4sARB = cast[proc(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord4sARB"))
  glMultiTexCoord4svARB = cast[proc(target: GLenum, v: ptr GLshort): void {.stdcall.}](glGetProc("glMultiTexCoord4svARB"))

# Load GL_ARB_occlusion_query
proc loadGL_ARB_occlusion_query*() =
  glGenQueriesARB = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glGenQueriesARB"))
  glDeleteQueriesARB = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteQueriesARB"))
  glIsQueryARB = cast[proc(id: GLuint): GLboolean {.stdcall.}](glGetProc("glIsQueryARB"))
  glBeginQueryARB = cast[proc(target: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glBeginQueryARB"))
  glEndQueryARB = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glEndQueryARB"))
  glGetQueryivARB = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetQueryivARB"))
  glGetQueryObjectivARB = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetQueryObjectivARB"))
  glGetQueryObjectuivARB = cast[proc(id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetQueryObjectuivARB"))

# Load GL_ARB_parallel_shader_compile
proc loadGL_ARB_parallel_shader_compile*() =
  glMaxShaderCompilerThreadsARB = cast[proc(count: GLuint): void {.stdcall.}](glGetProc("glMaxShaderCompilerThreadsARB"))

# Load GL_ARB_point_parameters
proc loadGL_ARB_point_parameters*() =
  glPointParameterfARB = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPointParameterfARB"))
  glPointParameterfvARB = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glPointParameterfvARB"))

# Load GL_ARB_polygon_offset_clamp
proc loadGL_ARB_polygon_offset_clamp*() =
  glPolygonOffsetClamp = cast[proc(factor: GLfloat, units: GLfloat, clamp: GLfloat): void {.stdcall.}](glGetProc("glPolygonOffsetClamp"))

# Load GL_ARB_program_interface_query
proc loadGL_ARB_program_interface_query*() =
  glGetProgramInterfaceiv = cast[proc(program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramInterfaceiv"))
  glGetProgramResourceIndex = cast[proc(program: GLuint, programInterface: GLenum, name: cstring): GLuint {.stdcall.}](glGetProc("glGetProgramResourceIndex"))
  glGetProgramResourceName = cast[proc(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}](glGetProc("glGetProgramResourceName"))
  glGetProgramResourceiv = cast[proc(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramResourceiv"))
  glGetProgramResourceLocation = cast[proc(program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](glGetProc("glGetProgramResourceLocation"))
  glGetProgramResourceLocationIndex = cast[proc(program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](glGetProc("glGetProgramResourceLocationIndex"))

# Load GL_ARB_provoking_vertex
proc loadGL_ARB_provoking_vertex*() =
  glProvokingVertex = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glProvokingVertex"))

# Load GL_ARB_robustness
proc loadGL_ARB_robustness*() =
  glGetGraphicsResetStatusARB = cast[proc(): GLenum {.stdcall.}](glGetProc("glGetGraphicsResetStatusARB"))
  glGetnTexImageARB = cast[proc(target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, img: pointer): void {.stdcall.}](glGetProc("glGetnTexImageARB"))
  glReadnPixelsARB = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glReadnPixelsARB"))
  glGetnCompressedTexImageARB = cast[proc(target: GLenum, lod: GLint, bufSize: GLsizei, img: pointer): void {.stdcall.}](glGetProc("glGetnCompressedTexImageARB"))
  glGetnUniformfvARB = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetnUniformfvARB"))
  glGetnUniformivARB = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetnUniformivARB"))
  glGetnUniformuivARB = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetnUniformuivARB"))
  glGetnUniformdvARB = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetnUniformdvARB"))
  glGetnMapdvARB = cast[proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glGetnMapdvARB"))
  glGetnMapfvARB = cast[proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glGetnMapfvARB"))
  glGetnMapivARB = cast[proc(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint): void {.stdcall.}](glGetProc("glGetnMapivARB"))
  glGetnPixelMapfvARB = cast[proc(map: GLenum, bufSize: GLsizei, values: ptr GLfloat): void {.stdcall.}](glGetProc("glGetnPixelMapfvARB"))
  glGetnPixelMapuivARB = cast[proc(map: GLenum, bufSize: GLsizei, values: ptr GLuint): void {.stdcall.}](glGetProc("glGetnPixelMapuivARB"))
  glGetnPixelMapusvARB = cast[proc(map: GLenum, bufSize: GLsizei, values: ptr GLushort): void {.stdcall.}](glGetProc("glGetnPixelMapusvARB"))
  glGetnPolygonStippleARB = cast[proc(bufSize: GLsizei, pattern: ptr GLubyte): void {.stdcall.}](glGetProc("glGetnPolygonStippleARB"))
  glGetnColorTableARB = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer): void {.stdcall.}](glGetProc("glGetnColorTableARB"))
  glGetnConvolutionFilterARB = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer): void {.stdcall.}](glGetProc("glGetnConvolutionFilterARB"))
  glGetnSeparableFilterARB = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer): void {.stdcall.}](glGetProc("glGetnSeparableFilterARB"))
  glGetnHistogramARB = cast[proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer): void {.stdcall.}](glGetProc("glGetnHistogramARB"))
  glGetnMinmaxARB = cast[proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer): void {.stdcall.}](glGetProc("glGetnMinmaxARB"))

# Load GL_ARB_sample_locations
proc loadGL_ARB_sample_locations*() =
  glFramebufferSampleLocationsfvARB = cast[proc(target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glFramebufferSampleLocationsfvARB"))
  glNamedFramebufferSampleLocationsfvARB = cast[proc(framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glNamedFramebufferSampleLocationsfvARB"))
  glEvaluateDepthValuesARB = cast[proc(): void {.stdcall.}](glGetProc("glEvaluateDepthValuesARB"))

# Load GL_ARB_sample_shading
proc loadGL_ARB_sample_shading*() =
  glMinSampleShadingARB = cast[proc(value: GLfloat): void {.stdcall.}](glGetProc("glMinSampleShadingARB"))

# Load GL_ARB_sampler_objects
proc loadGL_ARB_sampler_objects*() =
  glGenSamplers = cast[proc(count: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glGenSamplers"))
  glDeleteSamplers = cast[proc(count: GLsizei, samplers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteSamplers"))
  glIsSampler = cast[proc(sampler: GLuint): GLboolean {.stdcall.}](glGetProc("glIsSampler"))
  glBindSampler = cast[proc(unit: GLuint, sampler: GLuint): void {.stdcall.}](glGetProc("glBindSampler"))
  glSamplerParameteri = cast[proc(sampler: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glSamplerParameteri"))
  glSamplerParameteriv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glSamplerParameteriv"))
  glSamplerParameterf = cast[proc(sampler: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glSamplerParameterf"))
  glSamplerParameterfv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLfloat): void {.stdcall.}](glGetProc("glSamplerParameterfv"))
  glSamplerParameterIiv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glSamplerParameterIiv"))
  glSamplerParameterIuiv = cast[proc(sampler: GLuint, pname: GLenum, param: ptr GLuint): void {.stdcall.}](glGetProc("glSamplerParameterIuiv"))
  glGetSamplerParameteriv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetSamplerParameteriv"))
  glGetSamplerParameterIiv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetSamplerParameterIiv"))
  glGetSamplerParameterfv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetSamplerParameterfv"))
  glGetSamplerParameterIuiv = cast[proc(sampler: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetSamplerParameterIuiv"))

# Load GL_ARB_separate_shader_objects
proc loadGL_ARB_separate_shader_objects*() =
  glUseProgramStages = cast[proc(pipeline: GLuint, stages: GLbitfield, program: GLuint): void {.stdcall.}](glGetProc("glUseProgramStages"))
  glActiveShaderProgram = cast[proc(pipeline: GLuint, program: GLuint): void {.stdcall.}](glGetProc("glActiveShaderProgram"))
  glCreateShaderProgramv = cast[proc(`type`: GLenum, count: GLsizei, strings: ptr cstring): GLuint {.stdcall.}](glGetProc("glCreateShaderProgramv"))
  glBindProgramPipeline = cast[proc(pipeline: GLuint): void {.stdcall.}](glGetProc("glBindProgramPipeline"))
  glDeleteProgramPipelines = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteProgramPipelines"))
  glGenProgramPipelines = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glGenProgramPipelines"))
  glIsProgramPipeline = cast[proc(pipeline: GLuint): GLboolean {.stdcall.}](glGetProc("glIsProgramPipeline"))
  glGetProgramPipelineiv = cast[proc(pipeline: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramPipelineiv"))
  glProgramParameteri = cast[proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glProgramParameteri"))
  glProgramUniform1i = cast[proc(program: GLuint, location: GLint, v0: GLint): void {.stdcall.}](glGetProc("glProgramUniform1i"))
  glProgramUniform1iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform1iv"))
  glProgramUniform1f = cast[proc(program: GLuint, location: GLint, v0: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1f"))
  glProgramUniform1fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1fv"))
  glProgramUniform1d = cast[proc(program: GLuint, location: GLint, v0: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform1d"))
  glProgramUniform1dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform1dv"))
  glProgramUniform1ui = cast[proc(program: GLuint, location: GLint, v0: GLuint): void {.stdcall.}](glGetProc("glProgramUniform1ui"))
  glProgramUniform1uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform1uiv"))
  glProgramUniform2i = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint): void {.stdcall.}](glGetProc("glProgramUniform2i"))
  glProgramUniform2iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform2iv"))
  glProgramUniform2f = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2f"))
  glProgramUniform2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2fv"))
  glProgramUniform2d = cast[proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform2d"))
  glProgramUniform2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform2dv"))
  glProgramUniform2ui = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}](glGetProc("glProgramUniform2ui"))
  glProgramUniform2uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform2uiv"))
  glProgramUniform3i = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}](glGetProc("glProgramUniform3i"))
  glProgramUniform3iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform3iv"))
  glProgramUniform3f = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3f"))
  glProgramUniform3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3fv"))
  glProgramUniform3d = cast[proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform3d"))
  glProgramUniform3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform3dv"))
  glProgramUniform3ui = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}](glGetProc("glProgramUniform3ui"))
  glProgramUniform3uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform3uiv"))
  glProgramUniform4i = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}](glGetProc("glProgramUniform4i"))
  glProgramUniform4iv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform4iv"))
  glProgramUniform4f = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4f"))
  glProgramUniform4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4fv"))
  glProgramUniform4d = cast[proc(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform4d"))
  glProgramUniform4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform4dv"))
  glProgramUniform4ui = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}](glGetProc("glProgramUniform4ui"))
  glProgramUniform4uiv = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform4uiv"))
  glProgramUniformMatrix2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2fv"))
  glProgramUniformMatrix3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3fv"))
  glProgramUniformMatrix4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4fv"))
  glProgramUniformMatrix2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2dv"))
  glProgramUniformMatrix3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3dv"))
  glProgramUniformMatrix4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4dv"))
  glProgramUniformMatrix2x3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x3fv"))
  glProgramUniformMatrix3x2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x2fv"))
  glProgramUniformMatrix2x4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x4fv"))
  glProgramUniformMatrix4x2fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x2fv"))
  glProgramUniformMatrix3x4fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x4fv"))
  glProgramUniformMatrix4x3fv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x3fv"))
  glProgramUniformMatrix2x3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x3dv"))
  glProgramUniformMatrix3x2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x2dv"))
  glProgramUniformMatrix2x4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x4dv"))
  glProgramUniformMatrix4x2dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x2dv"))
  glProgramUniformMatrix3x4dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x4dv"))
  glProgramUniformMatrix4x3dv = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x3dv"))
  glValidateProgramPipeline = cast[proc(pipeline: GLuint): void {.stdcall.}](glGetProc("glValidateProgramPipeline"))
  glGetProgramPipelineInfoLog = cast[proc(pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}](glGetProc("glGetProgramPipelineInfoLog"))

# Load GL_ARB_shader_atomic_counters
proc loadGL_ARB_shader_atomic_counters*() =
  glGetActiveAtomicCounterBufferiv = cast[proc(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveAtomicCounterBufferiv"))

# Load GL_ARB_shader_image_load_store
proc loadGL_ARB_shader_image_load_store*() =
  glBindImageTexture = cast[proc(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum): void {.stdcall.}](glGetProc("glBindImageTexture"))
  glMemoryBarrier = cast[proc(barriers: GLbitfield): void {.stdcall.}](glGetProc("glMemoryBarrier"))

# Load GL_ARB_shader_objects
proc loadGL_ARB_shader_objects*() =
  glDeleteObjectARB = cast[proc(obj: GLhandleARB): void {.stdcall.}](glGetProc("glDeleteObjectARB"))
  glGetHandleARB = cast[proc(pname: GLenum): GLhandleARB {.stdcall.}](glGetProc("glGetHandleARB"))
  glDetachObjectARB = cast[proc(containerObj: GLhandleARB, attachedObj: GLhandleARB): void {.stdcall.}](glGetProc("glDetachObjectARB"))
  glCreateShaderObjectARB = cast[proc(shaderType: GLenum): GLhandleARB {.stdcall.}](glGetProc("glCreateShaderObjectARB"))
  glShaderSourceARB = cast[proc(shaderObj: GLhandleARB, count: GLsizei, string: ptr ptr GLcharARB, length: ptr GLint): void {.stdcall.}](glGetProc("glShaderSourceARB"))
  glCompileShaderARB = cast[proc(shaderObj: GLhandleARB): void {.stdcall.}](glGetProc("glCompileShaderARB"))
  glCreateProgramObjectARB = cast[proc(): GLhandleARB {.stdcall.}](glGetProc("glCreateProgramObjectARB"))
  glAttachObjectARB = cast[proc(containerObj: GLhandleARB, obj: GLhandleARB): void {.stdcall.}](glGetProc("glAttachObjectARB"))
  glLinkProgramARB = cast[proc(programObj: GLhandleARB): void {.stdcall.}](glGetProc("glLinkProgramARB"))
  glUseProgramObjectARB = cast[proc(programObj: GLhandleARB): void {.stdcall.}](glGetProc("glUseProgramObjectARB"))
  glValidateProgramARB = cast[proc(programObj: GLhandleARB): void {.stdcall.}](glGetProc("glValidateProgramARB"))
  glUniform1fARB = cast[proc(location: GLint, v0: GLfloat): void {.stdcall.}](glGetProc("glUniform1fARB"))
  glUniform2fARB = cast[proc(location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}](glGetProc("glUniform2fARB"))
  glUniform3fARB = cast[proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}](glGetProc("glUniform3fARB"))
  glUniform4fARB = cast[proc(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}](glGetProc("glUniform4fARB"))
  glUniform1iARB = cast[proc(location: GLint, v0: GLint): void {.stdcall.}](glGetProc("glUniform1iARB"))
  glUniform2iARB = cast[proc(location: GLint, v0: GLint, v1: GLint): void {.stdcall.}](glGetProc("glUniform2iARB"))
  glUniform3iARB = cast[proc(location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}](glGetProc("glUniform3iARB"))
  glUniform4iARB = cast[proc(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}](glGetProc("glUniform4iARB"))
  glUniform1fvARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform1fvARB"))
  glUniform2fvARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform2fvARB"))
  glUniform3fvARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform3fvARB"))
  glUniform4fvARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniform4fvARB"))
  glUniform1ivARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform1ivARB"))
  glUniform2ivARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform2ivARB"))
  glUniform3ivARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform3ivARB"))
  glUniform4ivARB = cast[proc(location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glUniform4ivARB"))
  glUniformMatrix2fvARB = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix2fvARB"))
  glUniformMatrix3fvARB = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix3fvARB"))
  glUniformMatrix4fvARB = cast[proc(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glUniformMatrix4fvARB"))
  glGetObjectParameterfvARB = cast[proc(obj: GLhandleARB, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetObjectParameterfvARB"))
  glGetObjectParameterivARB = cast[proc(obj: GLhandleARB, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetObjectParameterivARB"))
  glGetInfoLogARB = cast[proc(obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, infoLog: ptr GLcharARB): void {.stdcall.}](glGetProc("glGetInfoLogARB"))
  glGetAttachedObjectsARB = cast[proc(containerObj: GLhandleARB, maxCount: GLsizei, count: ptr GLsizei, obj: ptr GLhandleARB): void {.stdcall.}](glGetProc("glGetAttachedObjectsARB"))
  glGetUniformLocationARB = cast[proc(programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}](glGetProc("glGetUniformLocationARB"))
  glGetActiveUniformARB = cast[proc(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB): void {.stdcall.}](glGetProc("glGetActiveUniformARB"))
  glGetUniformfvARB = cast[proc(programObj: GLhandleARB, location: GLint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetUniformfvARB"))
  glGetUniformivARB = cast[proc(programObj: GLhandleARB, location: GLint, params: ptr GLint): void {.stdcall.}](glGetProc("glGetUniformivARB"))
  glGetShaderSourceARB = cast[proc(obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, source: ptr GLcharARB): void {.stdcall.}](glGetProc("glGetShaderSourceARB"))

# Load GL_ARB_shader_storage_buffer_object
proc loadGL_ARB_shader_storage_buffer_object*() =
  glShaderStorageBlockBinding = cast[proc(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint): void {.stdcall.}](glGetProc("glShaderStorageBlockBinding"))

# Load GL_ARB_shader_subroutine
proc loadGL_ARB_shader_subroutine*() =
  glGetSubroutineUniformLocation = cast[proc(program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}](glGetProc("glGetSubroutineUniformLocation"))
  glGetSubroutineIndex = cast[proc(program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}](glGetProc("glGetSubroutineIndex"))
  glGetActiveSubroutineUniformiv = cast[proc(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveSubroutineUniformiv"))
  glGetActiveSubroutineUniformName = cast[proc(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}](glGetProc("glGetActiveSubroutineUniformName"))
  glGetActiveSubroutineName = cast[proc(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring): void {.stdcall.}](glGetProc("glGetActiveSubroutineName"))
  glUniformSubroutinesuiv = cast[proc(shadertype: GLenum, count: GLsizei, indices: ptr GLuint): void {.stdcall.}](glGetProc("glUniformSubroutinesuiv"))
  glGetUniformSubroutineuiv = cast[proc(shadertype: GLenum, location: GLint, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetUniformSubroutineuiv"))
  glGetProgramStageiv = cast[proc(program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramStageiv"))

# Load GL_ARB_shading_language_include
proc loadGL_ARB_shading_language_include*() =
  glNamedStringARB = cast[proc(`type`: GLenum, namelen: GLint, name: cstring, stringlen: GLint, string: cstring): void {.stdcall.}](glGetProc("glNamedStringARB"))
  glDeleteNamedStringARB = cast[proc(namelen: GLint, name: cstring): void {.stdcall.}](glGetProc("glDeleteNamedStringARB"))
  glCompileShaderIncludeARB = cast[proc(shader: GLuint, count: GLsizei, path: ptr cstring, length: ptr GLint): void {.stdcall.}](glGetProc("glCompileShaderIncludeARB"))
  glIsNamedStringARB = cast[proc(namelen: GLint, name: cstring): GLboolean {.stdcall.}](glGetProc("glIsNamedStringARB"))
  glGetNamedStringARB = cast[proc(namelen: GLint, name: cstring, bufSize: GLsizei, stringlen: ptr GLint, string: cstring): void {.stdcall.}](glGetProc("glGetNamedStringARB"))
  glGetNamedStringivARB = cast[proc(namelen: GLint, name: cstring, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedStringivARB"))

# Load GL_ARB_sparse_buffer
proc loadGL_ARB_sparse_buffer*() =
  glBufferPageCommitmentARB = cast[proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void {.stdcall.}](glGetProc("glBufferPageCommitmentARB"))
  glNamedBufferPageCommitmentEXT = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void {.stdcall.}](glGetProc("glNamedBufferPageCommitmentEXT"))
  glNamedBufferPageCommitmentARB = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void {.stdcall.}](glGetProc("glNamedBufferPageCommitmentARB"))

# Load GL_ARB_sparse_texture
proc loadGL_ARB_sparse_texture*() =
  glTexPageCommitmentARB = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean): void {.stdcall.}](glGetProc("glTexPageCommitmentARB"))

# Load GL_ARB_sync
proc loadGL_ARB_sync*() =
  glFenceSync = cast[proc(condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}](glGetProc("glFenceSync"))
  glIsSync = cast[proc(sync: GLsync): GLboolean {.stdcall.}](glGetProc("glIsSync"))
  glDeleteSync = cast[proc(sync: GLsync): void {.stdcall.}](glGetProc("glDeleteSync"))
  glClientWaitSync = cast[proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}](glGetProc("glClientWaitSync"))
  glWaitSync = cast[proc(sync: GLsync, flags: GLbitfield, timeout: GLuint64): void {.stdcall.}](glGetProc("glWaitSync"))
  glGetInteger64v = cast[proc(pname: GLenum, data: ptr GLint64): void {.stdcall.}](glGetProc("glGetInteger64v"))
  glGetSynciv = cast[proc(sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint): void {.stdcall.}](glGetProc("glGetSynciv"))

# Load GL_ARB_tessellation_shader
proc loadGL_ARB_tessellation_shader*() =
  glPatchParameteri = cast[proc(pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glPatchParameteri"))
  glPatchParameterfv = cast[proc(pname: GLenum, values: ptr GLfloat): void {.stdcall.}](glGetProc("glPatchParameterfv"))

# Load GL_ARB_texture_barrier
proc loadGL_ARB_texture_barrier*() =
  glTextureBarrier = cast[proc(): void {.stdcall.}](glGetProc("glTextureBarrier"))

# Load GL_ARB_texture_buffer_object
proc loadGL_ARB_texture_buffer_object*() =
  glTexBufferARB = cast[proc(target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glTexBufferARB"))

# Load GL_ARB_texture_buffer_range
proc loadGL_ARB_texture_buffer_range*() =
  glTexBufferRange = cast[proc(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glTexBufferRange"))

# Load GL_ARB_texture_compression
proc loadGL_ARB_texture_compression*() =
  glCompressedTexImage3DARB = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexImage3DARB"))
  glCompressedTexImage2DARB = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexImage2DARB"))
  glCompressedTexImage1DARB = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexImage1DARB"))
  glCompressedTexSubImage3DARB = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexSubImage3DARB"))
  glCompressedTexSubImage2DARB = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexSubImage2DARB"))
  glCompressedTexSubImage1DARB = cast[proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glCompressedTexSubImage1DARB"))
  glGetCompressedTexImageARB = cast[proc(target: GLenum, level: GLint, img: pointer): void {.stdcall.}](glGetProc("glGetCompressedTexImageARB"))

# Load GL_ARB_texture_multisample
proc loadGL_ARB_texture_multisample*() =
  glTexImage2DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexImage2DMultisample"))
  glTexImage3DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexImage3DMultisample"))
  glGetMultisamplefv = cast[proc(pname: GLenum, index: GLuint, val: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMultisamplefv"))
  glSampleMaski = cast[proc(maskNumber: GLuint, mask: GLbitfield): void {.stdcall.}](glGetProc("glSampleMaski"))

# Load GL_ARB_texture_storage
proc loadGL_ARB_texture_storage*() =
  glTexStorage1D = cast[proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}](glGetProc("glTexStorage1D"))
  glTexStorage2D = cast[proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glTexStorage2D"))
  glTexStorage3D = cast[proc(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glTexStorage3D"))

# Load GL_ARB_texture_storage_multisample
proc loadGL_ARB_texture_storage_multisample*() =
  glTexStorage2DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexStorage2DMultisample"))
  glTexStorage3DMultisample = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTexStorage3DMultisample"))

# Load GL_ARB_texture_view
proc loadGL_ARB_texture_view*() =
  glTextureView = cast[proc(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint): void {.stdcall.}](glGetProc("glTextureView"))

# Load GL_ARB_timer_query
proc loadGL_ARB_timer_query*() =
  glQueryCounter = cast[proc(id: GLuint, target: GLenum): void {.stdcall.}](glGetProc("glQueryCounter"))
  glGetQueryObjecti64v = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetQueryObjecti64v"))
  glGetQueryObjectui64v = cast[proc(id: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}](glGetProc("glGetQueryObjectui64v"))

# Load GL_ARB_transform_feedback2
proc loadGL_ARB_transform_feedback2*() =
  glBindTransformFeedback = cast[proc(target: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glBindTransformFeedback"))
  glDeleteTransformFeedbacks = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteTransformFeedbacks"))
  glGenTransformFeedbacks = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glGenTransformFeedbacks"))
  glIsTransformFeedback = cast[proc(id: GLuint): GLboolean {.stdcall.}](glGetProc("glIsTransformFeedback"))
  glPauseTransformFeedback = cast[proc(): void {.stdcall.}](glGetProc("glPauseTransformFeedback"))
  glResumeTransformFeedback = cast[proc(): void {.stdcall.}](glGetProc("glResumeTransformFeedback"))
  glDrawTransformFeedback = cast[proc(mode: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glDrawTransformFeedback"))

# Load GL_ARB_transform_feedback3
proc loadGL_ARB_transform_feedback3*() =
  glDrawTransformFeedbackStream = cast[proc(mode: GLenum, id: GLuint, stream: GLuint): void {.stdcall.}](glGetProc("glDrawTransformFeedbackStream"))
  glBeginQueryIndexed = cast[proc(target: GLenum, index: GLuint, id: GLuint): void {.stdcall.}](glGetProc("glBeginQueryIndexed"))
  glEndQueryIndexed = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glEndQueryIndexed"))
  glGetQueryIndexediv = cast[proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetQueryIndexediv"))

# Load GL_ARB_transform_feedback_instanced
proc loadGL_ARB_transform_feedback_instanced*() =
  glDrawTransformFeedbackInstanced = cast[proc(mode: GLenum, id: GLuint, instancecount: GLsizei): void {.stdcall.}](glGetProc("glDrawTransformFeedbackInstanced"))
  glDrawTransformFeedbackStreamInstanced = cast[proc(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei): void {.stdcall.}](glGetProc("glDrawTransformFeedbackStreamInstanced"))

# Load GL_ARB_transpose_matrix
proc loadGL_ARB_transpose_matrix*() =
  glLoadTransposeMatrixfARB = cast[proc(m: ptr GLfloat): void {.stdcall.}](glGetProc("glLoadTransposeMatrixfARB"))
  glLoadTransposeMatrixdARB = cast[proc(m: ptr GLdouble): void {.stdcall.}](glGetProc("glLoadTransposeMatrixdARB"))
  glMultTransposeMatrixfARB = cast[proc(m: ptr GLfloat): void {.stdcall.}](glGetProc("glMultTransposeMatrixfARB"))
  glMultTransposeMatrixdARB = cast[proc(m: ptr GLdouble): void {.stdcall.}](glGetProc("glMultTransposeMatrixdARB"))

# Load GL_ARB_uniform_buffer_object
proc loadGL_ARB_uniform_buffer_object*() =
  glGetUniformIndices = cast[proc(program: GLuint, uniformCount: GLsizei, uniformNames: ptr cstring, uniformIndices: ptr GLuint): void {.stdcall.}](glGetProc("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc(program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring): void {.stdcall.}](glGetProc("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc(program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}](glGetProc("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring): void {.stdcall.}](glGetProc("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void {.stdcall.}](glGetProc("glUniformBlockBinding"))
  glBindBufferRange = cast[proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glBindBufferRange"))
  glBindBufferBase = cast[proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glBindBufferBase"))
  glGetIntegeri_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}](glGetProc("glGetIntegeri_v"))

# Load GL_ARB_vertex_array_object
proc loadGL_ARB_vertex_array_object*() =
  glBindVertexArray = cast[proc(array: GLuint): void {.stdcall.}](glGetProc("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc(n: GLsizei, arrays: ptr GLuint): void {.stdcall.}](glGetProc("glGenVertexArrays"))
  glIsVertexArray = cast[proc(array: GLuint): GLboolean {.stdcall.}](glGetProc("glIsVertexArray"))

# Load GL_ARB_vertex_attrib_64bit
proc loadGL_ARB_vertex_attrib_64bit*() =
  glVertexAttribL1d = cast[proc(index: GLuint, x: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL1d"))
  glVertexAttribL2d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL2d"))
  glVertexAttribL3d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL3d"))
  glVertexAttribL4d = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL4d"))
  glVertexAttribL1dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL1dv"))
  glVertexAttribL2dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL2dv"))
  glVertexAttribL3dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL3dv"))
  glVertexAttribL4dv = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL4dv"))
  glVertexAttribLPointer = cast[proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribLPointer"))
  glGetVertexAttribLdv = cast[proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVertexAttribLdv"))

# Load GL_ARB_vertex_attrib_binding
proc loadGL_ARB_vertex_attrib_binding*() =
  glBindVertexBuffer = cast[proc(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}](glGetProc("glBindVertexBuffer"))
  glVertexAttribFormat = cast[proc(attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexAttribFormat"))
  glVertexAttribIFormat = cast[proc(attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexAttribIFormat"))
  glVertexAttribLFormat = cast[proc(attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexAttribLFormat"))
  glVertexAttribBinding = cast[proc(attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}](glGetProc("glVertexAttribBinding"))
  glVertexBindingDivisor = cast[proc(bindingindex: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexBindingDivisor"))

# Load GL_ARB_vertex_blend
proc loadGL_ARB_vertex_blend*() =
  glWeightbvARB = cast[proc(size: GLint, weights: ptr GLbyte): void {.stdcall.}](glGetProc("glWeightbvARB"))
  glWeightsvARB = cast[proc(size: GLint, weights: ptr GLshort): void {.stdcall.}](glGetProc("glWeightsvARB"))
  glWeightivARB = cast[proc(size: GLint, weights: ptr GLint): void {.stdcall.}](glGetProc("glWeightivARB"))
  glWeightfvARB = cast[proc(size: GLint, weights: ptr GLfloat): void {.stdcall.}](glGetProc("glWeightfvARB"))
  glWeightdvARB = cast[proc(size: GLint, weights: ptr GLdouble): void {.stdcall.}](glGetProc("glWeightdvARB"))
  glWeightubvARB = cast[proc(size: GLint, weights: ptr GLubyte): void {.stdcall.}](glGetProc("glWeightubvARB"))
  glWeightusvARB = cast[proc(size: GLint, weights: ptr GLushort): void {.stdcall.}](glGetProc("glWeightusvARB"))
  glWeightuivARB = cast[proc(size: GLint, weights: ptr GLuint): void {.stdcall.}](glGetProc("glWeightuivARB"))
  glWeightPointerARB = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glWeightPointerARB"))
  glVertexBlendARB = cast[proc(count: GLint): void {.stdcall.}](glGetProc("glVertexBlendARB"))

# Load GL_ARB_vertex_buffer_object
proc loadGL_ARB_vertex_buffer_object*() =
  glBindBufferARB = cast[proc(target: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glBindBufferARB"))
  glDeleteBuffersARB = cast[proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteBuffersARB"))
  glGenBuffersARB = cast[proc(n: GLsizei, buffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenBuffersARB"))
  glIsBufferARB = cast[proc(buffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsBufferARB"))
  glBufferDataARB = cast[proc(target: GLenum, size: GLsizeiptrARB, data: pointer, usage: GLenum): void {.stdcall.}](glGetProc("glBufferDataARB"))
  glBufferSubDataARB = cast[proc(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer): void {.stdcall.}](glGetProc("glBufferSubDataARB"))
  glGetBufferSubDataARB = cast[proc(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer): void {.stdcall.}](glGetProc("glGetBufferSubDataARB"))
  glMapBufferARB = cast[proc(target: GLenum, access: GLenum): pointer {.stdcall.}](glGetProc("glMapBufferARB"))
  glUnmapBufferARB = cast[proc(target: GLenum): GLboolean {.stdcall.}](glGetProc("glUnmapBufferARB"))
  glGetBufferParameterivARB = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetBufferParameterivARB"))
  glGetBufferPointervARB = cast[proc(target: GLenum, pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetBufferPointervARB"))

# Load GL_ARB_vertex_program
proc loadGL_ARB_vertex_program*() =
  glVertexAttrib1dARB = cast[proc(index: GLuint, x: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1dARB"))
  glVertexAttrib1dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1dvARB"))
  glVertexAttrib1fARB = cast[proc(index: GLuint, x: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1fARB"))
  glVertexAttrib1fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1fvARB"))
  glVertexAttrib1sARB = cast[proc(index: GLuint, x: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1sARB"))
  glVertexAttrib1svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1svARB"))
  glVertexAttrib2dARB = cast[proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2dARB"))
  glVertexAttrib2dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2dvARB"))
  glVertexAttrib2fARB = cast[proc(index: GLuint, x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2fARB"))
  glVertexAttrib2fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2fvARB"))
  glVertexAttrib2sARB = cast[proc(index: GLuint, x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2sARB"))
  glVertexAttrib2svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2svARB"))
  glVertexAttrib3dARB = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3dARB"))
  glVertexAttrib3dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3dvARB"))
  glVertexAttrib3fARB = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3fARB"))
  glVertexAttrib3fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3fvARB"))
  glVertexAttrib3sARB = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3sARB"))
  glVertexAttrib3svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3svARB"))
  glVertexAttrib4NbvARB = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttrib4NbvARB"))
  glVertexAttrib4NivARB = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttrib4NivARB"))
  glVertexAttrib4NsvARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4NsvARB"))
  glVertexAttrib4NubARB = cast[proc(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4NubARB"))
  glVertexAttrib4NubvARB = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4NubvARB"))
  glVertexAttrib4NuivARB = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttrib4NuivARB"))
  glVertexAttrib4NusvARB = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttrib4NusvARB"))
  glVertexAttrib4bvARB = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttrib4bvARB"))
  glVertexAttrib4dARB = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4dARB"))
  glVertexAttrib4dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4dvARB"))
  glVertexAttrib4fARB = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4fARB"))
  glVertexAttrib4fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4fvARB"))
  glVertexAttrib4ivARB = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttrib4ivARB"))
  glVertexAttrib4sARB = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4sARB"))
  glVertexAttrib4svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4svARB"))
  glVertexAttrib4ubvARB = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4ubvARB"))
  glVertexAttrib4uivARB = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttrib4uivARB"))
  glVertexAttrib4usvARB = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttrib4usvARB"))
  glVertexAttribPointerARB = cast[proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribPointerARB"))
  glEnableVertexAttribArrayARB = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glEnableVertexAttribArrayARB"))
  glDisableVertexAttribArrayARB = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glDisableVertexAttribArrayARB"))
  glProgramStringARB = cast[proc(target: GLenum, format: GLenum, len: GLsizei, string: pointer): void {.stdcall.}](glGetProc("glProgramStringARB"))
  glBindProgramARB = cast[proc(target: GLenum, program: GLuint): void {.stdcall.}](glGetProc("glBindProgramARB"))
  glDeleteProgramsARB = cast[proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteProgramsARB"))
  glGenProgramsARB = cast[proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}](glGetProc("glGenProgramsARB"))
  glProgramEnvParameter4dARB = cast[proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glProgramEnvParameter4dARB"))
  glProgramEnvParameter4dvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramEnvParameter4dvARB"))
  glProgramEnvParameter4fARB = cast[proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glProgramEnvParameter4fARB"))
  glProgramEnvParameter4fvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramEnvParameter4fvARB"))
  glProgramLocalParameter4dARB = cast[proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glProgramLocalParameter4dARB"))
  glProgramLocalParameter4dvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramLocalParameter4dvARB"))
  glProgramLocalParameter4fARB = cast[proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glProgramLocalParameter4fARB"))
  glProgramLocalParameter4fvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramLocalParameter4fvARB"))
  glGetProgramEnvParameterdvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetProgramEnvParameterdvARB"))
  glGetProgramEnvParameterfvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetProgramEnvParameterfvARB"))
  glGetProgramLocalParameterdvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetProgramLocalParameterdvARB"))
  glGetProgramLocalParameterfvARB = cast[proc(target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetProgramLocalParameterfvARB"))
  glGetProgramivARB = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramivARB"))
  glGetProgramStringARB = cast[proc(target: GLenum, pname: GLenum, string: pointer): void {.stdcall.}](glGetProc("glGetProgramStringARB"))
  glGetVertexAttribdvARB = cast[proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVertexAttribdvARB"))
  glGetVertexAttribfvARB = cast[proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVertexAttribfvARB"))
  glGetVertexAttribivARB = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexAttribivARB"))
  glGetVertexAttribPointervARB = cast[proc(index: GLuint, pname: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glGetVertexAttribPointervARB"))
  glIsProgramARB = cast[proc(program: GLuint): GLboolean {.stdcall.}](glGetProc("glIsProgramARB"))

# Load GL_ARB_vertex_shader
proc loadGL_ARB_vertex_shader*() =
  glVertexAttrib1fARB = cast[proc(index: GLuint, x: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1fARB"))
  glVertexAttrib1sARB = cast[proc(index: GLuint, x: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1sARB"))
  glVertexAttrib1dARB = cast[proc(index: GLuint, x: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1dARB"))
  glVertexAttrib2fARB = cast[proc(index: GLuint, x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2fARB"))
  glVertexAttrib2sARB = cast[proc(index: GLuint, x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2sARB"))
  glVertexAttrib2dARB = cast[proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2dARB"))
  glVertexAttrib3fARB = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3fARB"))
  glVertexAttrib3sARB = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3sARB"))
  glVertexAttrib3dARB = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3dARB"))
  glVertexAttrib4fARB = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4fARB"))
  glVertexAttrib4sARB = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4sARB"))
  glVertexAttrib4dARB = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4dARB"))
  glVertexAttrib4NubARB = cast[proc(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4NubARB"))
  glVertexAttrib1fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1fvARB"))
  glVertexAttrib1svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1svARB"))
  glVertexAttrib1dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1dvARB"))
  glVertexAttrib2fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2fvARB"))
  glVertexAttrib2svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2svARB"))
  glVertexAttrib2dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2dvARB"))
  glVertexAttrib3fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3fvARB"))
  glVertexAttrib3svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3svARB"))
  glVertexAttrib3dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3dvARB"))
  glVertexAttrib4fvARB = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4fvARB"))
  glVertexAttrib4svARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4svARB"))
  glVertexAttrib4dvARB = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4dvARB"))
  glVertexAttrib4ivARB = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttrib4ivARB"))
  glVertexAttrib4bvARB = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttrib4bvARB"))
  glVertexAttrib4ubvARB = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4ubvARB"))
  glVertexAttrib4usvARB = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttrib4usvARB"))
  glVertexAttrib4uivARB = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttrib4uivARB"))
  glVertexAttrib4NbvARB = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttrib4NbvARB"))
  glVertexAttrib4NsvARB = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4NsvARB"))
  glVertexAttrib4NivARB = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttrib4NivARB"))
  glVertexAttrib4NubvARB = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4NubvARB"))
  glVertexAttrib4NusvARB = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttrib4NusvARB"))
  glVertexAttrib4NuivARB = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttrib4NuivARB"))
  glVertexAttribPointerARB = cast[proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribPointerARB"))
  glEnableVertexAttribArrayARB = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glEnableVertexAttribArrayARB"))
  glDisableVertexAttribArrayARB = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glDisableVertexAttribArrayARB"))
  glBindAttribLocationARB = cast[proc(programObj: GLhandleARB, index: GLuint, name: ptr GLcharARB): void {.stdcall.}](glGetProc("glBindAttribLocationARB"))
  glGetActiveAttribARB = cast[proc(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB): void {.stdcall.}](glGetProc("glGetActiveAttribARB"))
  glGetAttribLocationARB = cast[proc(programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}](glGetProc("glGetAttribLocationARB"))
  glGetVertexAttribdvARB = cast[proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVertexAttribdvARB"))
  glGetVertexAttribfvARB = cast[proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVertexAttribfvARB"))
  glGetVertexAttribivARB = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexAttribivARB"))
  glGetVertexAttribPointervARB = cast[proc(index: GLuint, pname: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glGetVertexAttribPointervARB"))

# Load GL_ARB_vertex_type_2_10_10_10_rev
proc loadGL_ARB_vertex_type_2_10_10_10_rev*() =
  glVertexAttribP1ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP1ui"))
  glVertexAttribP1uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP1uiv"))
  glVertexAttribP2ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP2ui"))
  glVertexAttribP2uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP2uiv"))
  glVertexAttribP3ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP3ui"))
  glVertexAttribP3uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP3uiv"))
  glVertexAttribP4ui = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint): void {.stdcall.}](glGetProc("glVertexAttribP4ui"))
  glVertexAttribP4uiv = cast[proc(index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribP4uiv"))
  glVertexP2ui = cast[proc(`type`: GLenum, value: GLuint): void {.stdcall.}](glGetProc("glVertexP2ui"))
  glVertexP2uiv = cast[proc(`type`: GLenum, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexP2uiv"))
  glVertexP3ui = cast[proc(`type`: GLenum, value: GLuint): void {.stdcall.}](glGetProc("glVertexP3ui"))
  glVertexP3uiv = cast[proc(`type`: GLenum, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexP3uiv"))
  glVertexP4ui = cast[proc(`type`: GLenum, value: GLuint): void {.stdcall.}](glGetProc("glVertexP4ui"))
  glVertexP4uiv = cast[proc(`type`: GLenum, value: ptr GLuint): void {.stdcall.}](glGetProc("glVertexP4uiv"))
  glTexCoordP1ui = cast[proc(`type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glTexCoordP1ui"))
  glTexCoordP1uiv = cast[proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glTexCoordP1uiv"))
  glTexCoordP2ui = cast[proc(`type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glTexCoordP2ui"))
  glTexCoordP2uiv = cast[proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glTexCoordP2uiv"))
  glTexCoordP3ui = cast[proc(`type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glTexCoordP3ui"))
  glTexCoordP3uiv = cast[proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glTexCoordP3uiv"))
  glTexCoordP4ui = cast[proc(`type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glTexCoordP4ui"))
  glTexCoordP4uiv = cast[proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glTexCoordP4uiv"))
  glMultiTexCoordP1ui = cast[proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP1ui"))
  glMultiTexCoordP1uiv = cast[proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP1uiv"))
  glMultiTexCoordP2ui = cast[proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP2ui"))
  glMultiTexCoordP2uiv = cast[proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP2uiv"))
  glMultiTexCoordP3ui = cast[proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP3ui"))
  glMultiTexCoordP3uiv = cast[proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP3uiv"))
  glMultiTexCoordP4ui = cast[proc(texture: GLenum, `type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP4ui"))
  glMultiTexCoordP4uiv = cast[proc(texture: GLenum, `type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glMultiTexCoordP4uiv"))
  glNormalP3ui = cast[proc(`type`: GLenum, coords: GLuint): void {.stdcall.}](glGetProc("glNormalP3ui"))
  glNormalP3uiv = cast[proc(`type`: GLenum, coords: ptr GLuint): void {.stdcall.}](glGetProc("glNormalP3uiv"))
  glColorP3ui = cast[proc(`type`: GLenum, color: GLuint): void {.stdcall.}](glGetProc("glColorP3ui"))
  glColorP3uiv = cast[proc(`type`: GLenum, color: ptr GLuint): void {.stdcall.}](glGetProc("glColorP3uiv"))
  glColorP4ui = cast[proc(`type`: GLenum, color: GLuint): void {.stdcall.}](glGetProc("glColorP4ui"))
  glColorP4uiv = cast[proc(`type`: GLenum, color: ptr GLuint): void {.stdcall.}](glGetProc("glColorP4uiv"))
  glSecondaryColorP3ui = cast[proc(`type`: GLenum, color: GLuint): void {.stdcall.}](glGetProc("glSecondaryColorP3ui"))
  glSecondaryColorP3uiv = cast[proc(`type`: GLenum, color: ptr GLuint): void {.stdcall.}](glGetProc("glSecondaryColorP3uiv"))

# Load GL_ARB_viewport_array
proc loadGL_ARB_viewport_array*() =
  glViewportArrayv = cast[proc(first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glViewportArrayv"))
  glViewportIndexedf = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat): void {.stdcall.}](glGetProc("glViewportIndexedf"))
  glViewportIndexedfv = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glViewportIndexedfv"))
  glScissorArrayv = cast[proc(first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}](glGetProc("glScissorArrayv"))
  glScissorIndexed = cast[proc(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glScissorIndexed"))
  glScissorIndexedv = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glScissorIndexedv"))
  glDepthRangeArrayv = cast[proc(first: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glDepthRangeArrayv"))
  glDepthRangeIndexed = cast[proc(index: GLuint, n: GLdouble, f: GLdouble): void {.stdcall.}](glGetProc("glDepthRangeIndexed"))
  glGetFloati_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFloati_v"))
  glGetDoublei_v = cast[proc(target: GLenum, index: GLuint, data: ptr GLdouble): void {.stdcall.}](glGetProc("glGetDoublei_v"))

# Load GL_ARB_window_pos
proc loadGL_ARB_window_pos*() =
  glWindowPos2dARB = cast[proc(x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glWindowPos2dARB"))
  glWindowPos2dvARB = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glWindowPos2dvARB"))
  glWindowPos2fARB = cast[proc(x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glWindowPos2fARB"))
  glWindowPos2fvARB = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glWindowPos2fvARB"))
  glWindowPos2iARB = cast[proc(x: GLint, y: GLint): void {.stdcall.}](glGetProc("glWindowPos2iARB"))
  glWindowPos2ivARB = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glWindowPos2ivARB"))
  glWindowPos2sARB = cast[proc(x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glWindowPos2sARB"))
  glWindowPos2svARB = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glWindowPos2svARB"))
  glWindowPos3dARB = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glWindowPos3dARB"))
  glWindowPos3dvARB = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glWindowPos3dvARB"))
  glWindowPos3fARB = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glWindowPos3fARB"))
  glWindowPos3fvARB = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glWindowPos3fvARB"))
  glWindowPos3iARB = cast[proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glWindowPos3iARB"))
  glWindowPos3ivARB = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glWindowPos3ivARB"))
  glWindowPos3sARB = cast[proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glWindowPos3sARB"))
  glWindowPos3svARB = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glWindowPos3svARB"))

# Load GL_ATI_draw_buffers
proc loadGL_ATI_draw_buffers*() =
  glDrawBuffersATI = cast[proc(n: GLsizei, bufs: ptr GLenum): void {.stdcall.}](glGetProc("glDrawBuffersATI"))

# Load GL_ATI_element_array
proc loadGL_ATI_element_array*() =
  glElementPointerATI = cast[proc(`type`: GLenum, pointer: pointer): void {.stdcall.}](glGetProc("glElementPointerATI"))
  glDrawElementArrayATI = cast[proc(mode: GLenum, count: GLsizei): void {.stdcall.}](glGetProc("glDrawElementArrayATI"))
  glDrawRangeElementArrayATI = cast[proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei): void {.stdcall.}](glGetProc("glDrawRangeElementArrayATI"))

# Load GL_ATI_envmap_bumpmap
proc loadGL_ATI_envmap_bumpmap*() =
  glTexBumpParameterivATI = cast[proc(pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glTexBumpParameterivATI"))
  glTexBumpParameterfvATI = cast[proc(pname: GLenum, param: ptr GLfloat): void {.stdcall.}](glGetProc("glTexBumpParameterfvATI"))
  glGetTexBumpParameterivATI = cast[proc(pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetTexBumpParameterivATI"))
  glGetTexBumpParameterfvATI = cast[proc(pname: GLenum, param: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTexBumpParameterfvATI"))

# Load GL_ATI_fragment_shader
proc loadGL_ATI_fragment_shader*() =
  glGenFragmentShadersATI = cast[proc(range: GLuint): GLuint {.stdcall.}](glGetProc("glGenFragmentShadersATI"))
  glBindFragmentShaderATI = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glBindFragmentShaderATI"))
  glDeleteFragmentShaderATI = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glDeleteFragmentShaderATI"))
  glBeginFragmentShaderATI = cast[proc(): void {.stdcall.}](glGetProc("glBeginFragmentShaderATI"))
  glEndFragmentShaderATI = cast[proc(): void {.stdcall.}](glGetProc("glEndFragmentShaderATI"))
  glPassTexCoordATI = cast[proc(dst: GLuint, coord: GLuint, swizzle: GLenum): void {.stdcall.}](glGetProc("glPassTexCoordATI"))
  glSampleMapATI = cast[proc(dst: GLuint, interp: GLuint, swizzle: GLenum): void {.stdcall.}](glGetProc("glSampleMapATI"))
  glColorFragmentOp1ATI = cast[proc(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint): void {.stdcall.}](glGetProc("glColorFragmentOp1ATI"))
  glColorFragmentOp2ATI = cast[proc(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint): void {.stdcall.}](glGetProc("glColorFragmentOp2ATI"))
  glColorFragmentOp3ATI = cast[proc(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint): void {.stdcall.}](glGetProc("glColorFragmentOp3ATI"))
  glAlphaFragmentOp1ATI = cast[proc(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint): void {.stdcall.}](glGetProc("glAlphaFragmentOp1ATI"))
  glAlphaFragmentOp2ATI = cast[proc(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint): void {.stdcall.}](glGetProc("glAlphaFragmentOp2ATI"))
  glAlphaFragmentOp3ATI = cast[proc(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint): void {.stdcall.}](glGetProc("glAlphaFragmentOp3ATI"))
  glSetFragmentShaderConstantATI = cast[proc(dst: GLuint, value: ptr GLfloat): void {.stdcall.}](glGetProc("glSetFragmentShaderConstantATI"))

# Load GL_ATI_map_object_buffer
proc loadGL_ATI_map_object_buffer*() =
  glMapObjectBufferATI = cast[proc(buffer: GLuint): pointer {.stdcall.}](glGetProc("glMapObjectBufferATI"))
  glUnmapObjectBufferATI = cast[proc(buffer: GLuint): void {.stdcall.}](glGetProc("glUnmapObjectBufferATI"))

# Load GL_ATI_pn_triangles
proc loadGL_ATI_pn_triangles*() =
  glPNTrianglesiATI = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glPNTrianglesiATI"))
  glPNTrianglesfATI = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPNTrianglesfATI"))

# Load GL_ATI_separate_stencil
proc loadGL_ATI_separate_stencil*() =
  glStencilOpSeparateATI = cast[proc(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum): void {.stdcall.}](glGetProc("glStencilOpSeparateATI"))
  glStencilFuncSeparateATI = cast[proc(frontfunc: GLenum, backfunc: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}](glGetProc("glStencilFuncSeparateATI"))

# Load GL_ATI_vertex_array_object
proc loadGL_ATI_vertex_array_object*() =
  glNewObjectBufferATI = cast[proc(size: GLsizei, pointer: pointer, usage: GLenum): GLuint {.stdcall.}](glGetProc("glNewObjectBufferATI"))
  glIsObjectBufferATI = cast[proc(buffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsObjectBufferATI"))
  glUpdateObjectBufferATI = cast[proc(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: pointer, preserve: GLenum): void {.stdcall.}](glGetProc("glUpdateObjectBufferATI"))
  glGetObjectBufferfvATI = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetObjectBufferfvATI"))
  glGetObjectBufferivATI = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetObjectBufferivATI"))
  glFreeObjectBufferATI = cast[proc(buffer: GLuint): void {.stdcall.}](glGetProc("glFreeObjectBufferATI"))
  glArrayObjectATI = cast[proc(array: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint): void {.stdcall.}](glGetProc("glArrayObjectATI"))
  glGetArrayObjectfvATI = cast[proc(array: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetArrayObjectfvATI"))
  glGetArrayObjectivATI = cast[proc(array: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetArrayObjectivATI"))
  glVariantArrayObjectATI = cast[proc(id: GLuint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint): void {.stdcall.}](glGetProc("glVariantArrayObjectATI"))
  glGetVariantArrayObjectfvATI = cast[proc(id: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVariantArrayObjectfvATI"))
  glGetVariantArrayObjectivATI = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVariantArrayObjectivATI"))

# Load GL_ATI_vertex_attrib_array_object
proc loadGL_ATI_vertex_attrib_array_object*() =
  glVertexAttribArrayObjectATI = cast[proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint): void {.stdcall.}](glGetProc("glVertexAttribArrayObjectATI"))
  glGetVertexAttribArrayObjectfvATI = cast[proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVertexAttribArrayObjectfvATI"))
  glGetVertexAttribArrayObjectivATI = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexAttribArrayObjectivATI"))

# Load GL_ATI_vertex_streams
proc loadGL_ATI_vertex_streams*() =
  glVertexStream1sATI = cast[proc(stream: GLenum, x: GLshort): void {.stdcall.}](glGetProc("glVertexStream1sATI"))
  glVertexStream1svATI = cast[proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}](glGetProc("glVertexStream1svATI"))
  glVertexStream1iATI = cast[proc(stream: GLenum, x: GLint): void {.stdcall.}](glGetProc("glVertexStream1iATI"))
  glVertexStream1ivATI = cast[proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}](glGetProc("glVertexStream1ivATI"))
  glVertexStream1fATI = cast[proc(stream: GLenum, x: GLfloat): void {.stdcall.}](glGetProc("glVertexStream1fATI"))
  glVertexStream1fvATI = cast[proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexStream1fvATI"))
  glVertexStream1dATI = cast[proc(stream: GLenum, x: GLdouble): void {.stdcall.}](glGetProc("glVertexStream1dATI"))
  glVertexStream1dvATI = cast[proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexStream1dvATI"))
  glVertexStream2sATI = cast[proc(stream: GLenum, x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glVertexStream2sATI"))
  glVertexStream2svATI = cast[proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}](glGetProc("glVertexStream2svATI"))
  glVertexStream2iATI = cast[proc(stream: GLenum, x: GLint, y: GLint): void {.stdcall.}](glGetProc("glVertexStream2iATI"))
  glVertexStream2ivATI = cast[proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}](glGetProc("glVertexStream2ivATI"))
  glVertexStream2fATI = cast[proc(stream: GLenum, x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glVertexStream2fATI"))
  glVertexStream2fvATI = cast[proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexStream2fvATI"))
  glVertexStream2dATI = cast[proc(stream: GLenum, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexStream2dATI"))
  glVertexStream2dvATI = cast[proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexStream2dvATI"))
  glVertexStream3sATI = cast[proc(stream: GLenum, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glVertexStream3sATI"))
  glVertexStream3svATI = cast[proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}](glGetProc("glVertexStream3svATI"))
  glVertexStream3iATI = cast[proc(stream: GLenum, x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glVertexStream3iATI"))
  glVertexStream3ivATI = cast[proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}](glGetProc("glVertexStream3ivATI"))
  glVertexStream3fATI = cast[proc(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glVertexStream3fATI"))
  glVertexStream3fvATI = cast[proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexStream3fvATI"))
  glVertexStream3dATI = cast[proc(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexStream3dATI"))
  glVertexStream3dvATI = cast[proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexStream3dvATI"))
  glVertexStream4sATI = cast[proc(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glVertexStream4sATI"))
  glVertexStream4svATI = cast[proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}](glGetProc("glVertexStream4svATI"))
  glVertexStream4iATI = cast[proc(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glVertexStream4iATI"))
  glVertexStream4ivATI = cast[proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}](glGetProc("glVertexStream4ivATI"))
  glVertexStream4fATI = cast[proc(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glVertexStream4fATI"))
  glVertexStream4fvATI = cast[proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexStream4fvATI"))
  glVertexStream4dATI = cast[proc(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexStream4dATI"))
  glVertexStream4dvATI = cast[proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexStream4dvATI"))
  glNormalStream3bATI = cast[proc(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte): void {.stdcall.}](glGetProc("glNormalStream3bATI"))
  glNormalStream3bvATI = cast[proc(stream: GLenum, coords: ptr GLbyte): void {.stdcall.}](glGetProc("glNormalStream3bvATI"))
  glNormalStream3sATI = cast[proc(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort): void {.stdcall.}](glGetProc("glNormalStream3sATI"))
  glNormalStream3svATI = cast[proc(stream: GLenum, coords: ptr GLshort): void {.stdcall.}](glGetProc("glNormalStream3svATI"))
  glNormalStream3iATI = cast[proc(stream: GLenum, nx: GLint, ny: GLint, nz: GLint): void {.stdcall.}](glGetProc("glNormalStream3iATI"))
  glNormalStream3ivATI = cast[proc(stream: GLenum, coords: ptr GLint): void {.stdcall.}](glGetProc("glNormalStream3ivATI"))
  glNormalStream3fATI = cast[proc(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat): void {.stdcall.}](glGetProc("glNormalStream3fATI"))
  glNormalStream3fvATI = cast[proc(stream: GLenum, coords: ptr GLfloat): void {.stdcall.}](glGetProc("glNormalStream3fvATI"))
  glNormalStream3dATI = cast[proc(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble): void {.stdcall.}](glGetProc("glNormalStream3dATI"))
  glNormalStream3dvATI = cast[proc(stream: GLenum, coords: ptr GLdouble): void {.stdcall.}](glGetProc("glNormalStream3dvATI"))
  glClientActiveVertexStreamATI = cast[proc(stream: GLenum): void {.stdcall.}](glGetProc("glClientActiveVertexStreamATI"))
  glVertexBlendEnviATI = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glVertexBlendEnviATI"))
  glVertexBlendEnvfATI = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glVertexBlendEnvfATI"))

# Load GL_EXT_EGL_image_storage
proc loadGL_EXT_EGL_image_storage*() =
  glEGLImageTargetTexStorageEXT = cast[proc(target: GLenum, image: GLeglImageOES, attrib_list: ptr GLint): void {.stdcall.}](glGetProc("glEGLImageTargetTexStorageEXT"))
  glEGLImageTargetTextureStorageEXT = cast[proc(texture: GLuint, image: GLeglImageOES, attrib_list: ptr GLint): void {.stdcall.}](glGetProc("glEGLImageTargetTextureStorageEXT"))

# Load GL_EXT_bindable_uniform
proc loadGL_EXT_bindable_uniform*() =
  glUniformBufferEXT = cast[proc(program: GLuint, location: GLint, buffer: GLuint): void {.stdcall.}](glGetProc("glUniformBufferEXT"))
  glGetUniformBufferSizeEXT = cast[proc(program: GLuint, location: GLint): GLint {.stdcall.}](glGetProc("glGetUniformBufferSizeEXT"))
  glGetUniformOffsetEXT = cast[proc(program: GLuint, location: GLint): GLintptr {.stdcall.}](glGetProc("glGetUniformOffsetEXT"))

# Load GL_EXT_blend_color
proc loadGL_EXT_blend_color*() =
  glBlendColorEXT = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void {.stdcall.}](glGetProc("glBlendColorEXT"))

# Load GL_EXT_blend_equation_separate
proc loadGL_EXT_blend_equation_separate*() =
  glBlendEquationSeparateEXT = cast[proc(modeRGB: GLenum, modeAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendEquationSeparateEXT"))

# Load GL_EXT_blend_func_separate
proc loadGL_EXT_blend_func_separate*() =
  glBlendFuncSeparateEXT = cast[proc(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendFuncSeparateEXT"))

# Load GL_EXT_blend_minmax
proc loadGL_EXT_blend_minmax*() =
  glBlendEquationEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glBlendEquationEXT"))

# Load GL_EXT_color_subtable
proc loadGL_EXT_color_subtable*() =
  glColorSubTableEXT = cast[proc(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glColorSubTableEXT"))
  glCopyColorSubTableEXT = cast[proc(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyColorSubTableEXT"))

# Load GL_EXT_compiled_vertex_array
proc loadGL_EXT_compiled_vertex_array*() =
  glLockArraysEXT = cast[proc(first: GLint, count: GLsizei): void {.stdcall.}](glGetProc("glLockArraysEXT"))
  glUnlockArraysEXT = cast[proc(): void {.stdcall.}](glGetProc("glUnlockArraysEXT"))

# Load GL_EXT_convolution
proc loadGL_EXT_convolution*() =
  glConvolutionFilter1DEXT = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}](glGetProc("glConvolutionFilter1DEXT"))
  glConvolutionFilter2DEXT = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}](glGetProc("glConvolutionFilter2DEXT"))
  glConvolutionParameterfEXT = cast[proc(target: GLenum, pname: GLenum, params: GLfloat): void {.stdcall.}](glGetProc("glConvolutionParameterfEXT"))
  glConvolutionParameterfvEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glConvolutionParameterfvEXT"))
  glConvolutionParameteriEXT = cast[proc(target: GLenum, pname: GLenum, params: GLint): void {.stdcall.}](glGetProc("glConvolutionParameteriEXT"))
  glConvolutionParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glConvolutionParameterivEXT"))
  glCopyConvolutionFilter1DEXT = cast[proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyConvolutionFilter1DEXT"))
  glCopyConvolutionFilter2DEXT = cast[proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyConvolutionFilter2DEXT"))
  glGetConvolutionFilterEXT = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, image: pointer): void {.stdcall.}](glGetProc("glGetConvolutionFilterEXT"))
  glGetConvolutionParameterfvEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetConvolutionParameterfvEXT"))
  glGetConvolutionParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetConvolutionParameterivEXT"))
  glGetSeparableFilterEXT = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer): void {.stdcall.}](glGetProc("glGetSeparableFilterEXT"))
  glSeparableFilter2DEXT = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer): void {.stdcall.}](glGetProc("glSeparableFilter2DEXT"))

# Load GL_EXT_coordinate_frame
proc loadGL_EXT_coordinate_frame*() =
  glTangent3bEXT = cast[proc(tx: GLbyte, ty: GLbyte, tz: GLbyte): void {.stdcall.}](glGetProc("glTangent3bEXT"))
  glTangent3bvEXT = cast[proc(v: ptr GLbyte): void {.stdcall.}](glGetProc("glTangent3bvEXT"))
  glTangent3dEXT = cast[proc(tx: GLdouble, ty: GLdouble, tz: GLdouble): void {.stdcall.}](glGetProc("glTangent3dEXT"))
  glTangent3dvEXT = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glTangent3dvEXT"))
  glTangent3fEXT = cast[proc(tx: GLfloat, ty: GLfloat, tz: GLfloat): void {.stdcall.}](glGetProc("glTangent3fEXT"))
  glTangent3fvEXT = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glTangent3fvEXT"))
  glTangent3iEXT = cast[proc(tx: GLint, ty: GLint, tz: GLint): void {.stdcall.}](glGetProc("glTangent3iEXT"))
  glTangent3ivEXT = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glTangent3ivEXT"))
  glTangent3sEXT = cast[proc(tx: GLshort, ty: GLshort, tz: GLshort): void {.stdcall.}](glGetProc("glTangent3sEXT"))
  glTangent3svEXT = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glTangent3svEXT"))
  glBinormal3bEXT = cast[proc(bx: GLbyte, by: GLbyte, bz: GLbyte): void {.stdcall.}](glGetProc("glBinormal3bEXT"))
  glBinormal3bvEXT = cast[proc(v: ptr GLbyte): void {.stdcall.}](glGetProc("glBinormal3bvEXT"))
  glBinormal3dEXT = cast[proc(bx: GLdouble, by: GLdouble, bz: GLdouble): void {.stdcall.}](glGetProc("glBinormal3dEXT"))
  glBinormal3dvEXT = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glBinormal3dvEXT"))
  glBinormal3fEXT = cast[proc(bx: GLfloat, by: GLfloat, bz: GLfloat): void {.stdcall.}](glGetProc("glBinormal3fEXT"))
  glBinormal3fvEXT = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glBinormal3fvEXT"))
  glBinormal3iEXT = cast[proc(bx: GLint, by: GLint, bz: GLint): void {.stdcall.}](glGetProc("glBinormal3iEXT"))
  glBinormal3ivEXT = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glBinormal3ivEXT"))
  glBinormal3sEXT = cast[proc(bx: GLshort, by: GLshort, bz: GLshort): void {.stdcall.}](glGetProc("glBinormal3sEXT"))
  glBinormal3svEXT = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glBinormal3svEXT"))
  glTangentPointerEXT = cast[proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glTangentPointerEXT"))
  glBinormalPointerEXT = cast[proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glBinormalPointerEXT"))

# Load GL_EXT_copy_texture
proc loadGL_EXT_copy_texture*() =
  glCopyTexImage1DEXT = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyTexImage1DEXT"))
  glCopyTexImage2DEXT = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyTexImage2DEXT"))
  glCopyTexSubImage1DEXT = cast[proc(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyTexSubImage1DEXT"))
  glCopyTexSubImage2DEXT = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTexSubImage2DEXT"))
  glCopyTexSubImage3DEXT = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTexSubImage3DEXT"))

# Load GL_EXT_cull_vertex
proc loadGL_EXT_cull_vertex*() =
  glCullParameterdvEXT = cast[proc(pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glCullParameterdvEXT"))
  glCullParameterfvEXT = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glCullParameterfvEXT"))

# Load GL_EXT_debug_label
proc loadGL_EXT_debug_label*() =
  glLabelObjectEXT = cast[proc(`type`: GLenum, `object`: GLuint, length: GLsizei, label: cstring): void {.stdcall.}](glGetProc("glLabelObjectEXT"))
  glGetObjectLabelEXT = cast[proc(`type`: GLenum, `object`: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}](glGetProc("glGetObjectLabelEXT"))

# Load GL_EXT_debug_marker
proc loadGL_EXT_debug_marker*() =
  glInsertEventMarkerEXT = cast[proc(length: GLsizei, marker: cstring): void {.stdcall.}](glGetProc("glInsertEventMarkerEXT"))
  glPushGroupMarkerEXT = cast[proc(length: GLsizei, marker: cstring): void {.stdcall.}](glGetProc("glPushGroupMarkerEXT"))
  glPopGroupMarkerEXT = cast[proc(): void {.stdcall.}](glGetProc("glPopGroupMarkerEXT"))

# Load GL_EXT_depth_bounds_test
proc loadGL_EXT_depth_bounds_test*() =
  glDepthBoundsEXT = cast[proc(zmin: GLclampd, zmax: GLclampd): void {.stdcall.}](glGetProc("glDepthBoundsEXT"))

# Load GL_EXT_direct_state_access
proc loadGL_EXT_direct_state_access*() =
  glMatrixLoadfEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixLoadfEXT"))
  glMatrixLoaddEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixLoaddEXT"))
  glMatrixMultfEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixMultfEXT"))
  glMatrixMultdEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixMultdEXT"))
  glMatrixLoadIdentityEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glMatrixLoadIdentityEXT"))
  glMatrixRotatefEXT = cast[proc(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glMatrixRotatefEXT"))
  glMatrixRotatedEXT = cast[proc(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glMatrixRotatedEXT"))
  glMatrixScalefEXT = cast[proc(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glMatrixScalefEXT"))
  glMatrixScaledEXT = cast[proc(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glMatrixScaledEXT"))
  glMatrixTranslatefEXT = cast[proc(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glMatrixTranslatefEXT"))
  glMatrixTranslatedEXT = cast[proc(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glMatrixTranslatedEXT"))
  glMatrixFrustumEXT = cast[proc(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}](glGetProc("glMatrixFrustumEXT"))
  glMatrixOrthoEXT = cast[proc(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}](glGetProc("glMatrixOrthoEXT"))
  glMatrixPopEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glMatrixPopEXT"))
  glMatrixPushEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glMatrixPushEXT"))
  glClientAttribDefaultEXT = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glClientAttribDefaultEXT"))
  glPushClientAttribDefaultEXT = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glPushClientAttribDefaultEXT"))
  glTextureParameterfEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glTextureParameterfEXT"))
  glTextureParameterfvEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glTextureParameterfvEXT"))
  glTextureParameteriEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glTextureParameteriEXT"))
  glTextureParameterivEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTextureParameterivEXT"))
  glTextureImage1DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureImage1DEXT"))
  glTextureImage2DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureImage2DEXT"))
  glTextureSubImage1DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage1DEXT"))
  glTextureSubImage2DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage2DEXT"))
  glCopyTextureImage1DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyTextureImage1DEXT"))
  glCopyTextureImage2DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyTextureImage2DEXT"))
  glCopyTextureSubImage1DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage1DEXT"))
  glCopyTextureSubImage2DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage2DEXT"))
  glGetTextureImageEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glGetTextureImageEXT"))
  glGetTextureParameterfvEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTextureParameterfvEXT"))
  glGetTextureParameterivEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureParameterivEXT"))
  glGetTextureLevelParameterfvEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTextureLevelParameterfvEXT"))
  glGetTextureLevelParameterivEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureLevelParameterivEXT"))
  glTextureImage3DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureImage3DEXT"))
  glTextureSubImage3DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTextureSubImage3DEXT"))
  glCopyTextureSubImage3DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyTextureSubImage3DEXT"))
  glBindMultiTextureEXT = cast[proc(texunit: GLenum, target: GLenum, texture: GLuint): void {.stdcall.}](glGetProc("glBindMultiTextureEXT"))
  glMultiTexCoordPointerEXT = cast[proc(texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glMultiTexCoordPointerEXT"))
  glMultiTexEnvfEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glMultiTexEnvfEXT"))
  glMultiTexEnvfvEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexEnvfvEXT"))
  glMultiTexEnviEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glMultiTexEnviEXT"))
  glMultiTexEnvivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexEnvivEXT"))
  glMultiTexGendEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble): void {.stdcall.}](glGetProc("glMultiTexGendEXT"))
  glMultiTexGendvEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glMultiTexGendvEXT"))
  glMultiTexGenfEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glMultiTexGenfEXT"))
  glMultiTexGenfvEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexGenfvEXT"))
  glMultiTexGeniEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glMultiTexGeniEXT"))
  glMultiTexGenivEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexGenivEXT"))
  glGetMultiTexEnvfvEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMultiTexEnvfvEXT"))
  glGetMultiTexEnvivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMultiTexEnvivEXT"))
  glGetMultiTexGendvEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetMultiTexGendvEXT"))
  glGetMultiTexGenfvEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMultiTexGenfvEXT"))
  glGetMultiTexGenivEXT = cast[proc(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMultiTexGenivEXT"))
  glMultiTexParameteriEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glMultiTexParameteriEXT"))
  glMultiTexParameterivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexParameterivEXT"))
  glMultiTexParameterfEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glMultiTexParameterfEXT"))
  glMultiTexParameterfvEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glMultiTexParameterfvEXT"))
  glMultiTexImage1DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glMultiTexImage1DEXT"))
  glMultiTexImage2DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glMultiTexImage2DEXT"))
  glMultiTexSubImage1DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glMultiTexSubImage1DEXT"))
  glMultiTexSubImage2DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glMultiTexSubImage2DEXT"))
  glCopyMultiTexImage1DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyMultiTexImage1DEXT"))
  glCopyMultiTexImage2DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void {.stdcall.}](glGetProc("glCopyMultiTexImage2DEXT"))
  glCopyMultiTexSubImage1DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyMultiTexSubImage1DEXT"))
  glCopyMultiTexSubImage2DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyMultiTexSubImage2DEXT"))
  glGetMultiTexImageEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glGetMultiTexImageEXT"))
  glGetMultiTexParameterfvEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMultiTexParameterfvEXT"))
  glGetMultiTexParameterivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMultiTexParameterivEXT"))
  glGetMultiTexLevelParameterfvEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMultiTexLevelParameterfvEXT"))
  glGetMultiTexLevelParameterivEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMultiTexLevelParameterivEXT"))
  glMultiTexImage3DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glMultiTexImage3DEXT"))
  glMultiTexSubImage3DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glMultiTexSubImage3DEXT"))
  glCopyMultiTexSubImage3DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glCopyMultiTexSubImage3DEXT"))
  glEnableClientStateIndexedEXT = cast[proc(array: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glEnableClientStateIndexedEXT"))
  glDisableClientStateIndexedEXT = cast[proc(array: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glDisableClientStateIndexedEXT"))
  glGetFloatIndexedvEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFloatIndexedvEXT"))
  glGetDoubleIndexedvEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLdouble): void {.stdcall.}](glGetProc("glGetDoubleIndexedvEXT"))
  glGetPointerIndexedvEXT = cast[proc(target: GLenum, index: GLuint, data: ptr pointer): void {.stdcall.}](glGetProc("glGetPointerIndexedvEXT"))
  glEnableIndexedEXT = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glEnableIndexedEXT"))
  glDisableIndexedEXT = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glDisableIndexedEXT"))
  glIsEnabledIndexedEXT = cast[proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}](glGetProc("glIsEnabledIndexedEXT"))
  glGetIntegerIndexedvEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}](glGetProc("glGetIntegerIndexedvEXT"))
  glGetBooleanIndexedvEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLboolean): void {.stdcall.}](glGetProc("glGetBooleanIndexedvEXT"))
  glCompressedTextureImage3DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedTextureImage3DEXT"))
  glCompressedTextureImage2DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedTextureImage2DEXT"))
  glCompressedTextureImage1DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedTextureImage1DEXT"))
  glCompressedTextureSubImage3DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage3DEXT"))
  glCompressedTextureSubImage2DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage2DEXT"))
  glCompressedTextureSubImage1DEXT = cast[proc(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedTextureSubImage1DEXT"))
  glGetCompressedTextureImageEXT = cast[proc(texture: GLuint, target: GLenum, lod: GLint, img: pointer): void {.stdcall.}](glGetProc("glGetCompressedTextureImageEXT"))
  glCompressedMultiTexImage3DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedMultiTexImage3DEXT"))
  glCompressedMultiTexImage2DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedMultiTexImage2DEXT"))
  glCompressedMultiTexImage1DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedMultiTexImage1DEXT"))
  glCompressedMultiTexSubImage3DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedMultiTexSubImage3DEXT"))
  glCompressedMultiTexSubImage2DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedMultiTexSubImage2DEXT"))
  glCompressedMultiTexSubImage1DEXT = cast[proc(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer): void {.stdcall.}](glGetProc("glCompressedMultiTexSubImage1DEXT"))
  glGetCompressedMultiTexImageEXT = cast[proc(texunit: GLenum, target: GLenum, lod: GLint, img: pointer): void {.stdcall.}](glGetProc("glGetCompressedMultiTexImageEXT"))
  glMatrixLoadTransposefEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixLoadTransposefEXT"))
  glMatrixLoadTransposedEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixLoadTransposedEXT"))
  glMatrixMultTransposefEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixMultTransposefEXT"))
  glMatrixMultTransposedEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixMultTransposedEXT"))
  glNamedBufferDataEXT = cast[proc(buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum): void {.stdcall.}](glGetProc("glNamedBufferDataEXT"))
  glNamedBufferSubDataEXT = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glNamedBufferSubDataEXT"))
  glMapNamedBufferEXT = cast[proc(buffer: GLuint, access: GLenum): pointer {.stdcall.}](glGetProc("glMapNamedBufferEXT"))
  glUnmapNamedBufferEXT = cast[proc(buffer: GLuint): GLboolean {.stdcall.}](glGetProc("glUnmapNamedBufferEXT"))
  glGetNamedBufferParameterivEXT = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedBufferParameterivEXT"))
  glGetNamedBufferPointervEXT = cast[proc(buffer: GLuint, pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetNamedBufferPointervEXT"))
  glGetNamedBufferSubDataEXT = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glGetNamedBufferSubDataEXT"))
  glProgramUniform1fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1fEXT"))
  glProgramUniform2fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2fEXT"))
  glProgramUniform3fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3fEXT"))
  glProgramUniform4fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4fEXT"))
  glProgramUniform1iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint): void {.stdcall.}](glGetProc("glProgramUniform1iEXT"))
  glProgramUniform2iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint): void {.stdcall.}](glGetProc("glProgramUniform2iEXT"))
  glProgramUniform3iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}](glGetProc("glProgramUniform3iEXT"))
  glProgramUniform4iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}](glGetProc("glProgramUniform4iEXT"))
  glProgramUniform1fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1fvEXT"))
  glProgramUniform2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2fvEXT"))
  glProgramUniform3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3fvEXT"))
  glProgramUniform4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4fvEXT"))
  glProgramUniform1ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform1ivEXT"))
  glProgramUniform2ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform2ivEXT"))
  glProgramUniform3ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform3ivEXT"))
  glProgramUniform4ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform4ivEXT"))
  glProgramUniformMatrix2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2fvEXT"))
  glProgramUniformMatrix3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3fvEXT"))
  glProgramUniformMatrix4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4fvEXT"))
  glProgramUniformMatrix2x3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x3fvEXT"))
  glProgramUniformMatrix3x2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x2fvEXT"))
  glProgramUniformMatrix2x4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x4fvEXT"))
  glProgramUniformMatrix4x2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x2fvEXT"))
  glProgramUniformMatrix3x4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x4fvEXT"))
  glProgramUniformMatrix4x3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x3fvEXT"))
  glTextureBufferEXT = cast[proc(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glTextureBufferEXT"))
  glMultiTexBufferEXT = cast[proc(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glMultiTexBufferEXT"))
  glTextureParameterIivEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTextureParameterIivEXT"))
  glTextureParameterIuivEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glTextureParameterIuivEXT"))
  glGetTextureParameterIivEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTextureParameterIivEXT"))
  glGetTextureParameterIuivEXT = cast[proc(texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetTextureParameterIuivEXT"))
  glMultiTexParameterIivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMultiTexParameterIivEXT"))
  glMultiTexParameterIuivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glMultiTexParameterIuivEXT"))
  glGetMultiTexParameterIivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMultiTexParameterIivEXT"))
  glGetMultiTexParameterIuivEXT = cast[proc(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetMultiTexParameterIuivEXT"))
  glProgramUniform1uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint): void {.stdcall.}](glGetProc("glProgramUniform1uiEXT"))
  glProgramUniform2uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}](glGetProc("glProgramUniform2uiEXT"))
  glProgramUniform3uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}](glGetProc("glProgramUniform3uiEXT"))
  glProgramUniform4uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}](glGetProc("glProgramUniform4uiEXT"))
  glProgramUniform1uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform1uivEXT"))
  glProgramUniform2uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform2uivEXT"))
  glProgramUniform3uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform3uivEXT"))
  glProgramUniform4uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform4uivEXT"))
  glNamedProgramLocalParameters4fvEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glNamedProgramLocalParameters4fvEXT"))
  glNamedProgramLocalParameterI4iEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glNamedProgramLocalParameterI4iEXT"))
  glNamedProgramLocalParameterI4ivEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}](glGetProc("glNamedProgramLocalParameterI4ivEXT"))
  glNamedProgramLocalParametersI4ivEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glNamedProgramLocalParametersI4ivEXT"))
  glNamedProgramLocalParameterI4uiEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}](glGetProc("glNamedProgramLocalParameterI4uiEXT"))
  glNamedProgramLocalParameterI4uivEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}](glGetProc("glNamedProgramLocalParameterI4uivEXT"))
  glNamedProgramLocalParametersI4uivEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glNamedProgramLocalParametersI4uivEXT"))
  glGetNamedProgramLocalParameterIivEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedProgramLocalParameterIivEXT"))
  glGetNamedProgramLocalParameterIuivEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetNamedProgramLocalParameterIuivEXT"))
  glEnableClientStateiEXT = cast[proc(array: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glEnableClientStateiEXT"))
  glDisableClientStateiEXT = cast[proc(array: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glDisableClientStateiEXT"))
  glGetFloati_vEXT = cast[proc(pname: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFloati_vEXT"))
  glGetDoublei_vEXT = cast[proc(pname: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetDoublei_vEXT"))
  glGetPointeri_vEXT = cast[proc(pname: GLenum, index: GLuint, params: ptr pointer): void {.stdcall.}](glGetProc("glGetPointeri_vEXT"))
  glNamedProgramStringEXT = cast[proc(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: pointer): void {.stdcall.}](glGetProc("glNamedProgramStringEXT"))
  glNamedProgramLocalParameter4dEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glNamedProgramLocalParameter4dEXT"))
  glNamedProgramLocalParameter4dvEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glNamedProgramLocalParameter4dvEXT"))
  glNamedProgramLocalParameter4fEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glNamedProgramLocalParameter4fEXT"))
  glNamedProgramLocalParameter4fvEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glNamedProgramLocalParameter4fvEXT"))
  glGetNamedProgramLocalParameterdvEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetNamedProgramLocalParameterdvEXT"))
  glGetNamedProgramLocalParameterfvEXT = cast[proc(program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetNamedProgramLocalParameterfvEXT"))
  glGetNamedProgramivEXT = cast[proc(program: GLuint, target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedProgramivEXT"))
  glGetNamedProgramStringEXT = cast[proc(program: GLuint, target: GLenum, pname: GLenum, string: pointer): void {.stdcall.}](glGetProc("glGetNamedProgramStringEXT"))
  glNamedRenderbufferStorageEXT = cast[proc(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorageEXT"))
  glGetNamedRenderbufferParameterivEXT = cast[proc(renderbuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedRenderbufferParameterivEXT"))
  glNamedRenderbufferStorageMultisampleEXT = cast[proc(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorageMultisampleEXT"))
  glNamedRenderbufferStorageMultisampleCoverageEXT = cast[proc(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glNamedRenderbufferStorageMultisampleCoverageEXT"))
  glCheckNamedFramebufferStatusEXT = cast[proc(framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}](glGetProc("glCheckNamedFramebufferStatusEXT"))
  glNamedFramebufferTexture1DEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTexture1DEXT"))
  glNamedFramebufferTexture2DEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTexture2DEXT"))
  glNamedFramebufferTexture3DEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTexture3DEXT"))
  glNamedFramebufferRenderbufferEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glNamedFramebufferRenderbufferEXT"))
  glGetNamedFramebufferAttachmentParameterivEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedFramebufferAttachmentParameterivEXT"))
  glGenerateTextureMipmapEXT = cast[proc(texture: GLuint, target: GLenum): void {.stdcall.}](glGetProc("glGenerateTextureMipmapEXT"))
  glGenerateMultiTexMipmapEXT = cast[proc(texunit: GLenum, target: GLenum): void {.stdcall.}](glGetProc("glGenerateMultiTexMipmapEXT"))
  glFramebufferDrawBufferEXT = cast[proc(framebuffer: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glFramebufferDrawBufferEXT"))
  glFramebufferDrawBuffersEXT = cast[proc(framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum): void {.stdcall.}](glGetProc("glFramebufferDrawBuffersEXT"))
  glFramebufferReadBufferEXT = cast[proc(framebuffer: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glFramebufferReadBufferEXT"))
  glGetFramebufferParameterivEXT = cast[proc(framebuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFramebufferParameterivEXT"))
  glNamedCopyBufferSubDataEXT = cast[proc(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glNamedCopyBufferSubDataEXT"))
  glNamedFramebufferTextureEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTextureEXT"))
  glNamedFramebufferTextureLayerEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferTextureLayerEXT"))
  glNamedFramebufferTextureFaceEXT = cast[proc(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void {.stdcall.}](glGetProc("glNamedFramebufferTextureFaceEXT"))
  glTextureRenderbufferEXT = cast[proc(texture: GLuint, target: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glTextureRenderbufferEXT"))
  glMultiTexRenderbufferEXT = cast[proc(texunit: GLenum, target: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glMultiTexRenderbufferEXT"))
  glVertexArrayVertexOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayVertexOffsetEXT"))
  glVertexArrayColorOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayColorOffsetEXT"))
  glVertexArrayEdgeFlagOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayEdgeFlagOffsetEXT"))
  glVertexArrayIndexOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayIndexOffsetEXT"))
  glVertexArrayNormalOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayNormalOffsetEXT"))
  glVertexArrayTexCoordOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayTexCoordOffsetEXT"))
  glVertexArrayMultiTexCoordOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayMultiTexCoordOffsetEXT"))
  glVertexArrayFogCoordOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayFogCoordOffsetEXT"))
  glVertexArraySecondaryColorOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArraySecondaryColorOffsetEXT"))
  glVertexArrayVertexAttribOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribOffsetEXT"))
  glVertexArrayVertexAttribIOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribIOffsetEXT"))
  glEnableVertexArrayEXT = cast[proc(vaobj: GLuint, array: GLenum): void {.stdcall.}](glGetProc("glEnableVertexArrayEXT"))
  glDisableVertexArrayEXT = cast[proc(vaobj: GLuint, array: GLenum): void {.stdcall.}](glGetProc("glDisableVertexArrayEXT"))
  glEnableVertexArrayAttribEXT = cast[proc(vaobj: GLuint, index: GLuint): void {.stdcall.}](glGetProc("glEnableVertexArrayAttribEXT"))
  glDisableVertexArrayAttribEXT = cast[proc(vaobj: GLuint, index: GLuint): void {.stdcall.}](glGetProc("glDisableVertexArrayAttribEXT"))
  glGetVertexArrayIntegervEXT = cast[proc(vaobj: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexArrayIntegervEXT"))
  glGetVertexArrayPointervEXT = cast[proc(vaobj: GLuint, pname: GLenum, param: ptr pointer): void {.stdcall.}](glGetProc("glGetVertexArrayPointervEXT"))
  glGetVertexArrayIntegeri_vEXT = cast[proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexArrayIntegeri_vEXT"))
  glGetVertexArrayPointeri_vEXT = cast[proc(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr pointer): void {.stdcall.}](glGetProc("glGetVertexArrayPointeri_vEXT"))
  glMapNamedBufferRangeEXT = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](glGetProc("glMapNamedBufferRangeEXT"))
  glFlushMappedNamedBufferRangeEXT = cast[proc(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void {.stdcall.}](glGetProc("glFlushMappedNamedBufferRangeEXT"))
  glNamedBufferStorageEXT = cast[proc(buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield): void {.stdcall.}](glGetProc("glNamedBufferStorageEXT"))
  glClearNamedBufferDataEXT = cast[proc(buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearNamedBufferDataEXT"))
  glClearNamedBufferSubDataEXT = cast[proc(buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glClearNamedBufferSubDataEXT"))
  glNamedFramebufferParameteriEXT = cast[proc(framebuffer: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glNamedFramebufferParameteriEXT"))
  glGetNamedFramebufferParameterivEXT = cast[proc(framebuffer: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetNamedFramebufferParameterivEXT"))
  glProgramUniform1dEXT = cast[proc(program: GLuint, location: GLint, x: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform1dEXT"))
  glProgramUniform2dEXT = cast[proc(program: GLuint, location: GLint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform2dEXT"))
  glProgramUniform3dEXT = cast[proc(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform3dEXT"))
  glProgramUniform4dEXT = cast[proc(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glProgramUniform4dEXT"))
  glProgramUniform1dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform1dvEXT"))
  glProgramUniform2dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform2dvEXT"))
  glProgramUniform3dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform3dvEXT"))
  glProgramUniform4dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniform4dvEXT"))
  glProgramUniformMatrix2dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2dvEXT"))
  glProgramUniformMatrix3dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3dvEXT"))
  glProgramUniformMatrix4dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4dvEXT"))
  glProgramUniformMatrix2x3dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x3dvEXT"))
  glProgramUniformMatrix2x4dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x4dvEXT"))
  glProgramUniformMatrix3x2dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x2dvEXT"))
  glProgramUniformMatrix3x4dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x4dvEXT"))
  glProgramUniformMatrix4x2dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x2dvEXT"))
  glProgramUniformMatrix4x3dvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x3dvEXT"))
  glTextureBufferRangeEXT = cast[proc(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glTextureBufferRangeEXT"))
  glTextureStorage1DEXT = cast[proc(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage1DEXT"))
  glTextureStorage2DEXT = cast[proc(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage2DEXT"))
  glTextureStorage3DEXT = cast[proc(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glTextureStorage3DEXT"))
  glTextureStorage2DMultisampleEXT = cast[proc(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTextureStorage2DMultisampleEXT"))
  glTextureStorage3DMultisampleEXT = cast[proc(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glTextureStorage3DMultisampleEXT"))
  glVertexArrayBindVertexBufferEXT = cast[proc(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void {.stdcall.}](glGetProc("glVertexArrayBindVertexBufferEXT"))
  glVertexArrayVertexAttribFormatEXT = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribFormatEXT"))
  glVertexArrayVertexAttribIFormatEXT = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribIFormatEXT"))
  glVertexArrayVertexAttribLFormatEXT = cast[proc(vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribLFormatEXT"))
  glVertexArrayVertexAttribBindingEXT = cast[proc(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribBindingEXT"))
  glVertexArrayVertexBindingDivisorEXT = cast[proc(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexArrayVertexBindingDivisorEXT"))
  glVertexArrayVertexAttribLOffsetEXT = cast[proc(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribLOffsetEXT"))
  glTexturePageCommitmentEXT = cast[proc(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean): void {.stdcall.}](glGetProc("glTexturePageCommitmentEXT"))
  glVertexArrayVertexAttribDivisorEXT = cast[proc(vaobj: GLuint, index: GLuint, divisor: GLuint): void {.stdcall.}](glGetProc("glVertexArrayVertexAttribDivisorEXT"))

# Load GL_EXT_draw_buffers2
proc loadGL_EXT_draw_buffers2*() =
  glColorMaskIndexedEXT = cast[proc(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void {.stdcall.}](glGetProc("glColorMaskIndexedEXT"))
  glGetBooleanIndexedvEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLboolean): void {.stdcall.}](glGetProc("glGetBooleanIndexedvEXT"))
  glGetIntegerIndexedvEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLint): void {.stdcall.}](glGetProc("glGetIntegerIndexedvEXT"))
  glEnableIndexedEXT = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glEnableIndexedEXT"))
  glDisableIndexedEXT = cast[proc(target: GLenum, index: GLuint): void {.stdcall.}](glGetProc("glDisableIndexedEXT"))
  glIsEnabledIndexedEXT = cast[proc(target: GLenum, index: GLuint): GLboolean {.stdcall.}](glGetProc("glIsEnabledIndexedEXT"))

# Load GL_EXT_draw_instanced
proc loadGL_EXT_draw_instanced*() =
  glDrawArraysInstancedEXT = cast[proc(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei): void {.stdcall.}](glGetProc("glDrawArraysInstancedEXT"))
  glDrawElementsInstancedEXT = cast[proc(mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei): void {.stdcall.}](glGetProc("glDrawElementsInstancedEXT"))

# Load GL_EXT_draw_range_elements
proc loadGL_EXT_draw_range_elements*() =
  glDrawRangeElementsEXT = cast[proc(mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer): void {.stdcall.}](glGetProc("glDrawRangeElementsEXT"))

# Load GL_EXT_external_buffer
proc loadGL_EXT_external_buffer*() =
  glBufferStorageExternalEXT = cast[proc(target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: pointer, flags: GLbitfield): void {.stdcall.}](glGetProc("glBufferStorageExternalEXT"))
  glNamedBufferStorageExternalEXT = cast[proc(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: pointer, flags: GLbitfield): void {.stdcall.}](glGetProc("glNamedBufferStorageExternalEXT"))

# Load GL_EXT_fog_coord
proc loadGL_EXT_fog_coord*() =
  glFogCoordfEXT = cast[proc(coord: GLfloat): void {.stdcall.}](glGetProc("glFogCoordfEXT"))
  glFogCoordfvEXT = cast[proc(coord: ptr GLfloat): void {.stdcall.}](glGetProc("glFogCoordfvEXT"))
  glFogCoorddEXT = cast[proc(coord: GLdouble): void {.stdcall.}](glGetProc("glFogCoorddEXT"))
  glFogCoorddvEXT = cast[proc(coord: ptr GLdouble): void {.stdcall.}](glGetProc("glFogCoorddvEXT"))
  glFogCoordPointerEXT = cast[proc(`type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glFogCoordPointerEXT"))

# Load GL_EXT_framebuffer_blit
proc loadGL_EXT_framebuffer_blit*() =
  glBlitFramebufferEXT = cast[proc(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}](glGetProc("glBlitFramebufferEXT"))

# Load GL_EXT_framebuffer_multisample
proc loadGL_EXT_framebuffer_multisample*() =
  glRenderbufferStorageMultisampleEXT = cast[proc(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorageMultisampleEXT"))

# Load GL_EXT_framebuffer_object
proc loadGL_EXT_framebuffer_object*() =
  glIsRenderbufferEXT = cast[proc(renderbuffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsRenderbufferEXT"))
  glBindRenderbufferEXT = cast[proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glBindRenderbufferEXT"))
  glDeleteRenderbuffersEXT = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteRenderbuffersEXT"))
  glGenRenderbuffersEXT = cast[proc(n: GLsizei, renderbuffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenRenderbuffersEXT"))
  glRenderbufferStorageEXT = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorageEXT"))
  glGetRenderbufferParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetRenderbufferParameterivEXT"))
  glIsFramebufferEXT = cast[proc(framebuffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsFramebufferEXT"))
  glBindFramebufferEXT = cast[proc(target: GLenum, framebuffer: GLuint): void {.stdcall.}](glGetProc("glBindFramebufferEXT"))
  glDeleteFramebuffersEXT = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteFramebuffersEXT"))
  glGenFramebuffersEXT = cast[proc(n: GLsizei, framebuffers: ptr GLuint): void {.stdcall.}](glGetProc("glGenFramebuffersEXT"))
  glCheckFramebufferStatusEXT = cast[proc(target: GLenum): GLenum {.stdcall.}](glGetProc("glCheckFramebufferStatusEXT"))
  glFramebufferTexture1DEXT = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture1DEXT"))
  glFramebufferTexture2DEXT = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture2DEXT"))
  glFramebufferTexture3DEXT = cast[proc(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void {.stdcall.}](glGetProc("glFramebufferTexture3DEXT"))
  glFramebufferRenderbufferEXT = cast[proc(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glFramebufferRenderbufferEXT"))
  glGetFramebufferAttachmentParameterivEXT = cast[proc(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFramebufferAttachmentParameterivEXT"))
  glGenerateMipmapEXT = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glGenerateMipmapEXT"))

# Load GL_EXT_geometry_shader4
proc loadGL_EXT_geometry_shader4*() =
  glProgramParameteriEXT = cast[proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glProgramParameteriEXT"))

# Load GL_EXT_gpu_program_parameters
proc loadGL_EXT_gpu_program_parameters*() =
  glProgramEnvParameters4fvEXT = cast[proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramEnvParameters4fvEXT"))
  glProgramLocalParameters4fvEXT = cast[proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramLocalParameters4fvEXT"))

# Load GL_EXT_gpu_shader4
proc loadGL_EXT_gpu_shader4*() =
  glGetUniformuivEXT = cast[proc(program: GLuint, location: GLint, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetUniformuivEXT"))
  glBindFragDataLocationEXT = cast[proc(program: GLuint, color: GLuint, name: cstring): void {.stdcall.}](glGetProc("glBindFragDataLocationEXT"))
  glGetFragDataLocationEXT = cast[proc(program: GLuint, name: cstring): GLint {.stdcall.}](glGetProc("glGetFragDataLocationEXT"))
  glUniform1uiEXT = cast[proc(location: GLint, v0: GLuint): void {.stdcall.}](glGetProc("glUniform1uiEXT"))
  glUniform2uiEXT = cast[proc(location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}](glGetProc("glUniform2uiEXT"))
  glUniform3uiEXT = cast[proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}](glGetProc("glUniform3uiEXT"))
  glUniform4uiEXT = cast[proc(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}](glGetProc("glUniform4uiEXT"))
  glUniform1uivEXT = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform1uivEXT"))
  glUniform2uivEXT = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform2uivEXT"))
  glUniform3uivEXT = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform3uivEXT"))
  glUniform4uivEXT = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glUniform4uivEXT"))

# Load GL_EXT_histogram
proc loadGL_EXT_histogram*() =
  glGetHistogramEXT = cast[proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}](glGetProc("glGetHistogramEXT"))
  glGetHistogramParameterfvEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetHistogramParameterfvEXT"))
  glGetHistogramParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetHistogramParameterivEXT"))
  glGetMinmaxEXT = cast[proc(target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer): void {.stdcall.}](glGetProc("glGetMinmaxEXT"))
  glGetMinmaxParameterfvEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMinmaxParameterfvEXT"))
  glGetMinmaxParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMinmaxParameterivEXT"))
  glHistogramEXT = cast[proc(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean): void {.stdcall.}](glGetProc("glHistogramEXT"))
  glMinmaxEXT = cast[proc(target: GLenum, internalformat: GLenum, sink: GLboolean): void {.stdcall.}](glGetProc("glMinmaxEXT"))
  glResetHistogramEXT = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glResetHistogramEXT"))
  glResetMinmaxEXT = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glResetMinmaxEXT"))

# Load GL_EXT_index_func
proc loadGL_EXT_index_func*() =
  glIndexFuncEXT = cast[proc(`func`: GLenum, `ref`: GLclampf): void {.stdcall.}](glGetProc("glIndexFuncEXT"))

# Load GL_EXT_index_material
proc loadGL_EXT_index_material*() =
  glIndexMaterialEXT = cast[proc(face: GLenum, mode: GLenum): void {.stdcall.}](glGetProc("glIndexMaterialEXT"))

# Load GL_EXT_light_texture
proc loadGL_EXT_light_texture*() =
  glApplyTextureEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glApplyTextureEXT"))
  glTextureLightEXT = cast[proc(pname: GLenum): void {.stdcall.}](glGetProc("glTextureLightEXT"))
  glTextureMaterialEXT = cast[proc(face: GLenum, mode: GLenum): void {.stdcall.}](glGetProc("glTextureMaterialEXT"))

# Load GL_EXT_memory_object
proc loadGL_EXT_memory_object*() =
  glGetUnsignedBytevEXT = cast[proc(pname: GLenum, data: ptr GLubyte): void {.stdcall.}](glGetProc("glGetUnsignedBytevEXT"))
  glGetUnsignedBytei_vEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLubyte): void {.stdcall.}](glGetProc("glGetUnsignedBytei_vEXT"))
  glDeleteMemoryObjectsEXT = cast[proc(n: GLsizei, memoryObjects: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteMemoryObjectsEXT"))
  glIsMemoryObjectEXT = cast[proc(memoryObject: GLuint): GLboolean {.stdcall.}](glGetProc("glIsMemoryObjectEXT"))
  glCreateMemoryObjectsEXT = cast[proc(n: GLsizei, memoryObjects: ptr GLuint): void {.stdcall.}](glGetProc("glCreateMemoryObjectsEXT"))
  glMemoryObjectParameterivEXT = cast[proc(memoryObject: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMemoryObjectParameterivEXT"))
  glGetMemoryObjectParameterivEXT = cast[proc(memoryObject: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMemoryObjectParameterivEXT"))
  glTexStorageMem2DEXT = cast[proc(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTexStorageMem2DEXT"))
  glTexStorageMem2DMultisampleEXT = cast[proc(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTexStorageMem2DMultisampleEXT"))
  glTexStorageMem3DEXT = cast[proc(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTexStorageMem3DEXT"))
  glTexStorageMem3DMultisampleEXT = cast[proc(target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTexStorageMem3DMultisampleEXT"))
  glBufferStorageMemEXT = cast[proc(target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glBufferStorageMemEXT"))
  glTextureStorageMem2DEXT = cast[proc(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTextureStorageMem2DEXT"))
  glTextureStorageMem2DMultisampleEXT = cast[proc(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTextureStorageMem2DMultisampleEXT"))
  glTextureStorageMem3DEXT = cast[proc(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTextureStorageMem3DEXT"))
  glTextureStorageMem3DMultisampleEXT = cast[proc(texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTextureStorageMem3DMultisampleEXT"))
  glNamedBufferStorageMemEXT = cast[proc(buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glNamedBufferStorageMemEXT"))
  glTexStorageMem1DEXT = cast[proc(target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTexStorageMem1DEXT"))
  glTextureStorageMem1DEXT = cast[proc(texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTextureStorageMem1DEXT"))

# Load GL_EXT_memory_object_fd
proc loadGL_EXT_memory_object_fd*() =
  glImportMemoryFdEXT = cast[proc(memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint): void {.stdcall.}](glGetProc("glImportMemoryFdEXT"))

# Load GL_EXT_memory_object_win32
proc loadGL_EXT_memory_object_win32*() =
  glImportMemoryWin32HandleEXT = cast[proc(memory: GLuint, size: GLuint64, handleType: GLenum, handle: pointer): void {.stdcall.}](glGetProc("glImportMemoryWin32HandleEXT"))
  glImportMemoryWin32NameEXT = cast[proc(memory: GLuint, size: GLuint64, handleType: GLenum, name: pointer): void {.stdcall.}](glGetProc("glImportMemoryWin32NameEXT"))

# Load GL_EXT_multi_draw_arrays
proc loadGL_EXT_multi_draw_arrays*() =
  glMultiDrawArraysEXT = cast[proc(mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawArraysEXT"))
  glMultiDrawElementsEXT = cast[proc(mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawElementsEXT"))

# Load GL_EXT_multisample
proc loadGL_EXT_multisample*() =
  glSampleMaskEXT = cast[proc(value: GLclampf, invert: GLboolean): void {.stdcall.}](glGetProc("glSampleMaskEXT"))
  glSamplePatternEXT = cast[proc(pattern: GLenum): void {.stdcall.}](glGetProc("glSamplePatternEXT"))

# Load GL_EXT_paletted_texture
proc loadGL_EXT_paletted_texture*() =
  glColorTableEXT = cast[proc(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}](glGetProc("glColorTableEXT"))
  glGetColorTableEXT = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, data: pointer): void {.stdcall.}](glGetProc("glGetColorTableEXT"))
  glGetColorTableParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetColorTableParameterivEXT"))
  glGetColorTableParameterfvEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetColorTableParameterfvEXT"))

# Load GL_EXT_pixel_transform
proc loadGL_EXT_pixel_transform*() =
  glPixelTransformParameteriEXT = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glPixelTransformParameteriEXT"))
  glPixelTransformParameterfEXT = cast[proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPixelTransformParameterfEXT"))
  glPixelTransformParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glPixelTransformParameterivEXT"))
  glPixelTransformParameterfvEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glPixelTransformParameterfvEXT"))
  glGetPixelTransformParameterivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetPixelTransformParameterivEXT"))
  glGetPixelTransformParameterfvEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPixelTransformParameterfvEXT"))

# Load GL_EXT_point_parameters
proc loadGL_EXT_point_parameters*() =
  glPointParameterfEXT = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPointParameterfEXT"))
  glPointParameterfvEXT = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glPointParameterfvEXT"))

# Load GL_EXT_polygon_offset
proc loadGL_EXT_polygon_offset*() =
  glPolygonOffsetEXT = cast[proc(factor: GLfloat, bias: GLfloat): void {.stdcall.}](glGetProc("glPolygonOffsetEXT"))

# Load GL_EXT_polygon_offset_clamp
proc loadGL_EXT_polygon_offset_clamp*() =
  glPolygonOffsetClampEXT = cast[proc(factor: GLfloat, units: GLfloat, clamp: GLfloat): void {.stdcall.}](glGetProc("glPolygonOffsetClampEXT"))

# Load GL_EXT_provoking_vertex
proc loadGL_EXT_provoking_vertex*() =
  glProvokingVertexEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glProvokingVertexEXT"))

# Load GL_EXT_raster_multisample
proc loadGL_EXT_raster_multisample*() =
  glRasterSamplesEXT = cast[proc(samples: GLuint, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glRasterSamplesEXT"))

# Load GL_EXT_semaphore
proc loadGL_EXT_semaphore*() =
  glGetUnsignedBytevEXT = cast[proc(pname: GLenum, data: ptr GLubyte): void {.stdcall.}](glGetProc("glGetUnsignedBytevEXT"))
  glGetUnsignedBytei_vEXT = cast[proc(target: GLenum, index: GLuint, data: ptr GLubyte): void {.stdcall.}](glGetProc("glGetUnsignedBytei_vEXT"))
  glGenSemaphoresEXT = cast[proc(n: GLsizei, semaphores: ptr GLuint): void {.stdcall.}](glGetProc("glGenSemaphoresEXT"))
  glDeleteSemaphoresEXT = cast[proc(n: GLsizei, semaphores: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteSemaphoresEXT"))
  glIsSemaphoreEXT = cast[proc(semaphore: GLuint): GLboolean {.stdcall.}](glGetProc("glIsSemaphoreEXT"))
  glSemaphoreParameterui64vEXT = cast[proc(semaphore: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}](glGetProc("glSemaphoreParameterui64vEXT"))
  glGetSemaphoreParameterui64vEXT = cast[proc(semaphore: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}](glGetProc("glGetSemaphoreParameterui64vEXT"))
  glWaitSemaphoreEXT = cast[proc(semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, srcLayouts: ptr GLenum): void {.stdcall.}](glGetProc("glWaitSemaphoreEXT"))
  glSignalSemaphoreEXT = cast[proc(semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, dstLayouts: ptr GLenum): void {.stdcall.}](glGetProc("glSignalSemaphoreEXT"))

# Load GL_EXT_semaphore_fd
proc loadGL_EXT_semaphore_fd*() =
  glImportSemaphoreFdEXT = cast[proc(semaphore: GLuint, handleType: GLenum, fd: GLint): void {.stdcall.}](glGetProc("glImportSemaphoreFdEXT"))

# Load GL_EXT_semaphore_win32
proc loadGL_EXT_semaphore_win32*() =
  glImportSemaphoreWin32HandleEXT = cast[proc(semaphore: GLuint, handleType: GLenum, handle: pointer): void {.stdcall.}](glGetProc("glImportSemaphoreWin32HandleEXT"))
  glImportSemaphoreWin32NameEXT = cast[proc(semaphore: GLuint, handleType: GLenum, name: pointer): void {.stdcall.}](glGetProc("glImportSemaphoreWin32NameEXT"))

# Load GL_EXT_secondary_color
proc loadGL_EXT_secondary_color*() =
  glSecondaryColor3bEXT = cast[proc(red: GLbyte, green: GLbyte, blue: GLbyte): void {.stdcall.}](glGetProc("glSecondaryColor3bEXT"))
  glSecondaryColor3bvEXT = cast[proc(v: ptr GLbyte): void {.stdcall.}](glGetProc("glSecondaryColor3bvEXT"))
  glSecondaryColor3dEXT = cast[proc(red: GLdouble, green: GLdouble, blue: GLdouble): void {.stdcall.}](glGetProc("glSecondaryColor3dEXT"))
  glSecondaryColor3dvEXT = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glSecondaryColor3dvEXT"))
  glSecondaryColor3fEXT = cast[proc(red: GLfloat, green: GLfloat, blue: GLfloat): void {.stdcall.}](glGetProc("glSecondaryColor3fEXT"))
  glSecondaryColor3fvEXT = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glSecondaryColor3fvEXT"))
  glSecondaryColor3iEXT = cast[proc(red: GLint, green: GLint, blue: GLint): void {.stdcall.}](glGetProc("glSecondaryColor3iEXT"))
  glSecondaryColor3ivEXT = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glSecondaryColor3ivEXT"))
  glSecondaryColor3sEXT = cast[proc(red: GLshort, green: GLshort, blue: GLshort): void {.stdcall.}](glGetProc("glSecondaryColor3sEXT"))
  glSecondaryColor3svEXT = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glSecondaryColor3svEXT"))
  glSecondaryColor3ubEXT = cast[proc(red: GLubyte, green: GLubyte, blue: GLubyte): void {.stdcall.}](glGetProc("glSecondaryColor3ubEXT"))
  glSecondaryColor3ubvEXT = cast[proc(v: ptr GLubyte): void {.stdcall.}](glGetProc("glSecondaryColor3ubvEXT"))
  glSecondaryColor3uiEXT = cast[proc(red: GLuint, green: GLuint, blue: GLuint): void {.stdcall.}](glGetProc("glSecondaryColor3uiEXT"))
  glSecondaryColor3uivEXT = cast[proc(v: ptr GLuint): void {.stdcall.}](glGetProc("glSecondaryColor3uivEXT"))
  glSecondaryColor3usEXT = cast[proc(red: GLushort, green: GLushort, blue: GLushort): void {.stdcall.}](glGetProc("glSecondaryColor3usEXT"))
  glSecondaryColor3usvEXT = cast[proc(v: ptr GLushort): void {.stdcall.}](glGetProc("glSecondaryColor3usvEXT"))
  glSecondaryColorPointerEXT = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glSecondaryColorPointerEXT"))

# Load GL_EXT_separate_shader_objects
proc loadGL_EXT_separate_shader_objects*() =
  glUseShaderProgramEXT = cast[proc(`type`: GLenum, program: GLuint): void {.stdcall.}](glGetProc("glUseShaderProgramEXT"))
  glActiveProgramEXT = cast[proc(program: GLuint): void {.stdcall.}](glGetProc("glActiveProgramEXT"))
  glCreateShaderProgramEXT = cast[proc(`type`: GLenum, string: cstring): GLuint {.stdcall.}](glGetProc("glCreateShaderProgramEXT"))
  glActiveShaderProgramEXT = cast[proc(pipeline: GLuint, program: GLuint): void {.stdcall.}](glGetProc("glActiveShaderProgramEXT"))
  glBindProgramPipelineEXT = cast[proc(pipeline: GLuint): void {.stdcall.}](glGetProc("glBindProgramPipelineEXT"))
  glCreateShaderProgramvEXT = cast[proc(`type`: GLenum, count: GLsizei, strings: ptr cstring): GLuint {.stdcall.}](glGetProc("glCreateShaderProgramvEXT"))
  glDeleteProgramPipelinesEXT = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteProgramPipelinesEXT"))
  glGenProgramPipelinesEXT = cast[proc(n: GLsizei, pipelines: ptr GLuint): void {.stdcall.}](glGetProc("glGenProgramPipelinesEXT"))
  glGetProgramPipelineInfoLogEXT = cast[proc(pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring): void {.stdcall.}](glGetProc("glGetProgramPipelineInfoLogEXT"))
  glGetProgramPipelineivEXT = cast[proc(pipeline: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramPipelineivEXT"))
  glIsProgramPipelineEXT = cast[proc(pipeline: GLuint): GLboolean {.stdcall.}](glGetProc("glIsProgramPipelineEXT"))
  glProgramParameteriEXT = cast[proc(program: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glProgramParameteriEXT"))
  glProgramUniform1fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1fEXT"))
  glProgramUniform1fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform1fvEXT"))
  glProgramUniform1iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint): void {.stdcall.}](glGetProc("glProgramUniform1iEXT"))
  glProgramUniform1ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform1ivEXT"))
  glProgramUniform2fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2fEXT"))
  glProgramUniform2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform2fvEXT"))
  glProgramUniform2iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint): void {.stdcall.}](glGetProc("glProgramUniform2iEXT"))
  glProgramUniform2ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform2ivEXT"))
  glProgramUniform3fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3fEXT"))
  glProgramUniform3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform3fvEXT"))
  glProgramUniform3iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void {.stdcall.}](glGetProc("glProgramUniform3iEXT"))
  glProgramUniform3ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform3ivEXT"))
  glProgramUniform4fEXT = cast[proc(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4fEXT"))
  glProgramUniform4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniform4fvEXT"))
  glProgramUniform4iEXT = cast[proc(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void {.stdcall.}](glGetProc("glProgramUniform4iEXT"))
  glProgramUniform4ivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint): void {.stdcall.}](glGetProc("glProgramUniform4ivEXT"))
  glProgramUniformMatrix2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2fvEXT"))
  glProgramUniformMatrix3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3fvEXT"))
  glProgramUniformMatrix4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4fvEXT"))
  glUseProgramStagesEXT = cast[proc(pipeline: GLuint, stages: GLbitfield, program: GLuint): void {.stdcall.}](glGetProc("glUseProgramStagesEXT"))
  glValidateProgramPipelineEXT = cast[proc(pipeline: GLuint): void {.stdcall.}](glGetProc("glValidateProgramPipelineEXT"))
  glProgramUniform1uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint): void {.stdcall.}](glGetProc("glProgramUniform1uiEXT"))
  glProgramUniform2uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void {.stdcall.}](glGetProc("glProgramUniform2uiEXT"))
  glProgramUniform3uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void {.stdcall.}](glGetProc("glProgramUniform3uiEXT"))
  glProgramUniform4uiEXT = cast[proc(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void {.stdcall.}](glGetProc("glProgramUniform4uiEXT"))
  glProgramUniform1uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform1uivEXT"))
  glProgramUniform2uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform2uivEXT"))
  glProgramUniform3uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform3uivEXT"))
  glProgramUniform4uivEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint): void {.stdcall.}](glGetProc("glProgramUniform4uivEXT"))
  glProgramUniformMatrix4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4fvEXT"))
  glProgramUniformMatrix2x3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x3fvEXT"))
  glProgramUniformMatrix3x2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x2fvEXT"))
  glProgramUniformMatrix2x4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix2x4fvEXT"))
  glProgramUniformMatrix4x2fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x2fvEXT"))
  glProgramUniformMatrix3x4fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix3x4fvEXT"))
  glProgramUniformMatrix4x3fvEXT = cast[proc(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramUniformMatrix4x3fvEXT"))

# Load GL_EXT_shader_framebuffer_fetch_non_coherent
proc loadGL_EXT_shader_framebuffer_fetch_non_coherent*() =
  glFramebufferFetchBarrierEXT = cast[proc(): void {.stdcall.}](glGetProc("glFramebufferFetchBarrierEXT"))

# Load GL_EXT_shader_image_load_store
proc loadGL_EXT_shader_image_load_store*() =
  glBindImageTextureEXT = cast[proc(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint): void {.stdcall.}](glGetProc("glBindImageTextureEXT"))
  glMemoryBarrierEXT = cast[proc(barriers: GLbitfield): void {.stdcall.}](glGetProc("glMemoryBarrierEXT"))

# Load GL_EXT_stencil_clear_tag
proc loadGL_EXT_stencil_clear_tag*() =
  glStencilClearTagEXT = cast[proc(stencilTagBits: GLsizei, stencilClearTag: GLuint): void {.stdcall.}](glGetProc("glStencilClearTagEXT"))

# Load GL_EXT_stencil_two_side
proc loadGL_EXT_stencil_two_side*() =
  glActiveStencilFaceEXT = cast[proc(face: GLenum): void {.stdcall.}](glGetProc("glActiveStencilFaceEXT"))

# Load GL_EXT_subtexture
proc loadGL_EXT_subtexture*() =
  glTexSubImage1DEXT = cast[proc(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexSubImage1DEXT"))
  glTexSubImage2DEXT = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexSubImage2DEXT"))

# Load GL_EXT_texture3D
proc loadGL_EXT_texture3D*() =
  glTexImage3DEXT = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexImage3DEXT"))
  glTexSubImage3DEXT = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexSubImage3DEXT"))

# Load GL_EXT_texture_array
proc loadGL_EXT_texture_array*() =
  glFramebufferTextureLayerEXT = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glFramebufferTextureLayerEXT"))

# Load GL_EXT_texture_buffer_object
proc loadGL_EXT_texture_buffer_object*() =
  glTexBufferEXT = cast[proc(target: GLenum, internalformat: GLenum, buffer: GLuint): void {.stdcall.}](glGetProc("glTexBufferEXT"))

# Load GL_EXT_texture_integer
proc loadGL_EXT_texture_integer*() =
  glTexParameterIivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glTexParameterIivEXT"))
  glTexParameterIuivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glTexParameterIuivEXT"))
  glGetTexParameterIivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTexParameterIivEXT"))
  glGetTexParameterIuivEXT = cast[proc(target: GLenum, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetTexParameterIuivEXT"))
  glClearColorIiEXT = cast[proc(red: GLint, green: GLint, blue: GLint, alpha: GLint): void {.stdcall.}](glGetProc("glClearColorIiEXT"))
  glClearColorIuiEXT = cast[proc(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint): void {.stdcall.}](glGetProc("glClearColorIuiEXT"))

# Load GL_EXT_texture_object
proc loadGL_EXT_texture_object*() =
  glAreTexturesResidentEXT = cast[proc(n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}](glGetProc("glAreTexturesResidentEXT"))
  glBindTextureEXT = cast[proc(target: GLenum, texture: GLuint): void {.stdcall.}](glGetProc("glBindTextureEXT"))
  glDeleteTexturesEXT = cast[proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteTexturesEXT"))
  glGenTexturesEXT = cast[proc(n: GLsizei, textures: ptr GLuint): void {.stdcall.}](glGetProc("glGenTexturesEXT"))
  glIsTextureEXT = cast[proc(texture: GLuint): GLboolean {.stdcall.}](glGetProc("glIsTextureEXT"))
  glPrioritizeTexturesEXT = cast[proc(n: GLsizei, textures: ptr GLuint, priorities: ptr GLclampf): void {.stdcall.}](glGetProc("glPrioritizeTexturesEXT"))

# Load GL_EXT_texture_perturb_normal
proc loadGL_EXT_texture_perturb_normal*() =
  glTextureNormalEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glTextureNormalEXT"))

# Load GL_EXT_timer_query
proc loadGL_EXT_timer_query*() =
  glGetQueryObjecti64vEXT = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}](glGetProc("glGetQueryObjecti64vEXT"))
  glGetQueryObjectui64vEXT = cast[proc(id: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}](glGetProc("glGetQueryObjectui64vEXT"))

# Load GL_EXT_transform_feedback
proc loadGL_EXT_transform_feedback*() =
  glBeginTransformFeedbackEXT = cast[proc(primitiveMode: GLenum): void {.stdcall.}](glGetProc("glBeginTransformFeedbackEXT"))
  glEndTransformFeedbackEXT = cast[proc(): void {.stdcall.}](glGetProc("glEndTransformFeedbackEXT"))
  glBindBufferRangeEXT = cast[proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glBindBufferRangeEXT"))
  glBindBufferOffsetEXT = cast[proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr): void {.stdcall.}](glGetProc("glBindBufferOffsetEXT"))
  glBindBufferBaseEXT = cast[proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glBindBufferBaseEXT"))
  glTransformFeedbackVaryingsEXT = cast[proc(program: GLuint, count: GLsizei, varyings: ptr cstring, bufferMode: GLenum): void {.stdcall.}](glGetProc("glTransformFeedbackVaryingsEXT"))
  glGetTransformFeedbackVaryingEXT = cast[proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring): void {.stdcall.}](glGetProc("glGetTransformFeedbackVaryingEXT"))

# Load GL_EXT_vertex_array
proc loadGL_EXT_vertex_array*() =
  glArrayElementEXT = cast[proc(i: GLint): void {.stdcall.}](glGetProc("glArrayElementEXT"))
  glColorPointerEXT = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glColorPointerEXT"))
  glDrawArraysEXT = cast[proc(mode: GLenum, first: GLint, count: GLsizei): void {.stdcall.}](glGetProc("glDrawArraysEXT"))
  glEdgeFlagPointerEXT = cast[proc(stride: GLsizei, count: GLsizei, pointer: ptr GLboolean): void {.stdcall.}](glGetProc("glEdgeFlagPointerEXT"))
  glGetPointervEXT = cast[proc(pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetPointervEXT"))
  glIndexPointerEXT = cast[proc(`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glIndexPointerEXT"))
  glNormalPointerEXT = cast[proc(`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glNormalPointerEXT"))
  glTexCoordPointerEXT = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glTexCoordPointerEXT"))
  glVertexPointerEXT = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexPointerEXT"))

# Load GL_EXT_vertex_attrib_64bit
proc loadGL_EXT_vertex_attrib_64bit*() =
  glVertexAttribL1dEXT = cast[proc(index: GLuint, x: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL1dEXT"))
  glVertexAttribL2dEXT = cast[proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL2dEXT"))
  glVertexAttribL3dEXT = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL3dEXT"))
  glVertexAttribL4dEXT = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL4dEXT"))
  glVertexAttribL1dvEXT = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL1dvEXT"))
  glVertexAttribL2dvEXT = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL2dvEXT"))
  glVertexAttribL3dvEXT = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL3dvEXT"))
  glVertexAttribL4dvEXT = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribL4dvEXT"))
  glVertexAttribLPointerEXT = cast[proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribLPointerEXT"))
  glGetVertexAttribLdvEXT = cast[proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVertexAttribLdvEXT"))

# Load GL_EXT_vertex_shader
proc loadGL_EXT_vertex_shader*() =
  glBeginVertexShaderEXT = cast[proc(): void {.stdcall.}](glGetProc("glBeginVertexShaderEXT"))
  glEndVertexShaderEXT = cast[proc(): void {.stdcall.}](glGetProc("glEndVertexShaderEXT"))
  glBindVertexShaderEXT = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glBindVertexShaderEXT"))
  glGenVertexShadersEXT = cast[proc(range: GLuint): GLuint {.stdcall.}](glGetProc("glGenVertexShadersEXT"))
  glDeleteVertexShaderEXT = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glDeleteVertexShaderEXT"))
  glShaderOp1EXT = cast[proc(op: GLenum, res: GLuint, arg1: GLuint): void {.stdcall.}](glGetProc("glShaderOp1EXT"))
  glShaderOp2EXT = cast[proc(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint): void {.stdcall.}](glGetProc("glShaderOp2EXT"))
  glShaderOp3EXT = cast[proc(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint): void {.stdcall.}](glGetProc("glShaderOp3EXT"))
  glSwizzleEXT = cast[proc(res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum): void {.stdcall.}](glGetProc("glSwizzleEXT"))
  glWriteMaskEXT = cast[proc(res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum): void {.stdcall.}](glGetProc("glWriteMaskEXT"))
  glInsertComponentEXT = cast[proc(res: GLuint, src: GLuint, num: GLuint): void {.stdcall.}](glGetProc("glInsertComponentEXT"))
  glExtractComponentEXT = cast[proc(res: GLuint, src: GLuint, num: GLuint): void {.stdcall.}](glGetProc("glExtractComponentEXT"))
  glGenSymbolsEXT = cast[proc(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint): GLuint {.stdcall.}](glGetProc("glGenSymbolsEXT"))
  glSetInvariantEXT = cast[proc(id: GLuint, `type`: GLenum, `addr`: pointer): void {.stdcall.}](glGetProc("glSetInvariantEXT"))
  glSetLocalConstantEXT = cast[proc(id: GLuint, `type`: GLenum, `addr`: pointer): void {.stdcall.}](glGetProc("glSetLocalConstantEXT"))
  glVariantbvEXT = cast[proc(id: GLuint, `addr`: ptr GLbyte): void {.stdcall.}](glGetProc("glVariantbvEXT"))
  glVariantsvEXT = cast[proc(id: GLuint, `addr`: ptr GLshort): void {.stdcall.}](glGetProc("glVariantsvEXT"))
  glVariantivEXT = cast[proc(id: GLuint, `addr`: ptr GLint): void {.stdcall.}](glGetProc("glVariantivEXT"))
  glVariantfvEXT = cast[proc(id: GLuint, `addr`: ptr GLfloat): void {.stdcall.}](glGetProc("glVariantfvEXT"))
  glVariantdvEXT = cast[proc(id: GLuint, `addr`: ptr GLdouble): void {.stdcall.}](glGetProc("glVariantdvEXT"))
  glVariantubvEXT = cast[proc(id: GLuint, `addr`: ptr GLubyte): void {.stdcall.}](glGetProc("glVariantubvEXT"))
  glVariantusvEXT = cast[proc(id: GLuint, `addr`: ptr GLushort): void {.stdcall.}](glGetProc("glVariantusvEXT"))
  glVariantuivEXT = cast[proc(id: GLuint, `addr`: ptr GLuint): void {.stdcall.}](glGetProc("glVariantuivEXT"))
  glVariantPointerEXT = cast[proc(id: GLuint, `type`: GLenum, stride: GLuint, `addr`: pointer): void {.stdcall.}](glGetProc("glVariantPointerEXT"))
  glEnableVariantClientStateEXT = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glEnableVariantClientStateEXT"))
  glDisableVariantClientStateEXT = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glDisableVariantClientStateEXT"))
  glBindLightParameterEXT = cast[proc(light: GLenum, value: GLenum): GLuint {.stdcall.}](glGetProc("glBindLightParameterEXT"))
  glBindMaterialParameterEXT = cast[proc(face: GLenum, value: GLenum): GLuint {.stdcall.}](glGetProc("glBindMaterialParameterEXT"))
  glBindTexGenParameterEXT = cast[proc(unit: GLenum, coord: GLenum, value: GLenum): GLuint {.stdcall.}](glGetProc("glBindTexGenParameterEXT"))
  glBindTextureUnitParameterEXT = cast[proc(unit: GLenum, value: GLenum): GLuint {.stdcall.}](glGetProc("glBindTextureUnitParameterEXT"))
  glBindParameterEXT = cast[proc(value: GLenum): GLuint {.stdcall.}](glGetProc("glBindParameterEXT"))
  glIsVariantEnabledEXT = cast[proc(id: GLuint, cap: GLenum): GLboolean {.stdcall.}](glGetProc("glIsVariantEnabledEXT"))
  glGetVariantBooleanvEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLboolean): void {.stdcall.}](glGetProc("glGetVariantBooleanvEXT"))
  glGetVariantIntegervEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLint): void {.stdcall.}](glGetProc("glGetVariantIntegervEXT"))
  glGetVariantFloatvEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVariantFloatvEXT"))
  glGetVariantPointervEXT = cast[proc(id: GLuint, value: GLenum, data: ptr pointer): void {.stdcall.}](glGetProc("glGetVariantPointervEXT"))
  glGetInvariantBooleanvEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLboolean): void {.stdcall.}](glGetProc("glGetInvariantBooleanvEXT"))
  glGetInvariantIntegervEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLint): void {.stdcall.}](glGetProc("glGetInvariantIntegervEXT"))
  glGetInvariantFloatvEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLfloat): void {.stdcall.}](glGetProc("glGetInvariantFloatvEXT"))
  glGetLocalConstantBooleanvEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLboolean): void {.stdcall.}](glGetProc("glGetLocalConstantBooleanvEXT"))
  glGetLocalConstantIntegervEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLint): void {.stdcall.}](glGetProc("glGetLocalConstantIntegervEXT"))
  glGetLocalConstantFloatvEXT = cast[proc(id: GLuint, value: GLenum, data: ptr GLfloat): void {.stdcall.}](glGetProc("glGetLocalConstantFloatvEXT"))

# Load GL_EXT_vertex_weighting
proc loadGL_EXT_vertex_weighting*() =
  glVertexWeightfEXT = cast[proc(weight: GLfloat): void {.stdcall.}](glGetProc("glVertexWeightfEXT"))
  glVertexWeightfvEXT = cast[proc(weight: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexWeightfvEXT"))
  glVertexWeightPointerEXT = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexWeightPointerEXT"))

# Load GL_EXT_win32_keyed_mutex
proc loadGL_EXT_win32_keyed_mutex*() =
  glAcquireKeyedMutexWin32EXT = cast[proc(memory: GLuint, key: GLuint64, timeout: GLuint): GLboolean {.stdcall.}](glGetProc("glAcquireKeyedMutexWin32EXT"))
  glReleaseKeyedMutexWin32EXT = cast[proc(memory: GLuint, key: GLuint64): GLboolean {.stdcall.}](glGetProc("glReleaseKeyedMutexWin32EXT"))

# Load GL_EXT_window_rectangles
proc loadGL_EXT_window_rectangles*() =
  glWindowRectanglesEXT = cast[proc(mode: GLenum, count: GLsizei, box: ptr GLint): void {.stdcall.}](glGetProc("glWindowRectanglesEXT"))

# Load GL_EXT_x11_sync_object
proc loadGL_EXT_x11_sync_object*() =
  glImportSyncEXT = cast[proc(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield): GLsync {.stdcall.}](glGetProc("glImportSyncEXT"))

# Load GL_GREMEDY_frame_terminator
proc loadGL_GREMEDY_frame_terminator*() =
  glFrameTerminatorGREMEDY = cast[proc(): void {.stdcall.}](glGetProc("glFrameTerminatorGREMEDY"))

# Load GL_GREMEDY_string_marker
proc loadGL_GREMEDY_string_marker*() =
  glStringMarkerGREMEDY = cast[proc(len: GLsizei, string: pointer): void {.stdcall.}](glGetProc("glStringMarkerGREMEDY"))

# Load GL_HP_image_transform
proc loadGL_HP_image_transform*() =
  glImageTransformParameteriHP = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glImageTransformParameteriHP"))
  glImageTransformParameterfHP = cast[proc(target: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glImageTransformParameterfHP"))
  glImageTransformParameterivHP = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glImageTransformParameterivHP"))
  glImageTransformParameterfvHP = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glImageTransformParameterfvHP"))
  glGetImageTransformParameterivHP = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetImageTransformParameterivHP"))
  glGetImageTransformParameterfvHP = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetImageTransformParameterfvHP"))

# Load GL_IBM_multimode_draw_arrays
proc loadGL_IBM_multimode_draw_arrays*() =
  glMultiModeDrawArraysIBM = cast[proc(mode: ptr GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei, modestride: GLint): void {.stdcall.}](glGetProc("glMultiModeDrawArraysIBM"))
  glMultiModeDrawElementsIBM = cast[proc(mode: ptr GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei, modestride: GLint): void {.stdcall.}](glGetProc("glMultiModeDrawElementsIBM"))

# Load GL_IBM_static_data
proc loadGL_IBM_static_data*() =
  glFlushStaticDataIBM = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glFlushStaticDataIBM"))

# Load GL_IBM_vertex_array_lists
proc loadGL_IBM_vertex_array_lists*() =
  glColorPointerListIBM = cast[proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}](glGetProc("glColorPointerListIBM"))
  glSecondaryColorPointerListIBM = cast[proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}](glGetProc("glSecondaryColorPointerListIBM"))
  glEdgeFlagPointerListIBM = cast[proc(stride: GLint, pointer: ptr ptr GLboolean, ptrstride: GLint): void {.stdcall.}](glGetProc("glEdgeFlagPointerListIBM"))
  glFogCoordPointerListIBM = cast[proc(`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}](glGetProc("glFogCoordPointerListIBM"))
  glIndexPointerListIBM = cast[proc(`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}](glGetProc("glIndexPointerListIBM"))
  glNormalPointerListIBM = cast[proc(`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}](glGetProc("glNormalPointerListIBM"))
  glTexCoordPointerListIBM = cast[proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}](glGetProc("glTexCoordPointerListIBM"))
  glVertexPointerListIBM = cast[proc(size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint): void {.stdcall.}](glGetProc("glVertexPointerListIBM"))

# Load GL_INGR_blend_func_separate
proc loadGL_INGR_blend_func_separate*() =
  glBlendFuncSeparateINGR = cast[proc(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.stdcall.}](glGetProc("glBlendFuncSeparateINGR"))

# Load GL_INTEL_framebuffer_CMAA
proc loadGL_INTEL_framebuffer_CMAA*() =
  glApplyFramebufferAttachmentCMAAINTEL = cast[proc(): void {.stdcall.}](glGetProc("glApplyFramebufferAttachmentCMAAINTEL"))

# Load GL_INTEL_map_texture
proc loadGL_INTEL_map_texture*() =
  glSyncTextureINTEL = cast[proc(texture: GLuint): void {.stdcall.}](glGetProc("glSyncTextureINTEL"))
  glUnmapTexture2DINTEL = cast[proc(texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glUnmapTexture2DINTEL"))
  glMapTexture2DINTEL = cast[proc(texture: GLuint, level: GLint, access: GLbitfield, stride: ptr GLint, layout: ptr GLenum): pointer {.stdcall.}](glGetProc("glMapTexture2DINTEL"))

# Load GL_INTEL_parallel_arrays
proc loadGL_INTEL_parallel_arrays*() =
  glVertexPointervINTEL = cast[proc(size: GLint, `type`: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glVertexPointervINTEL"))
  glNormalPointervINTEL = cast[proc(`type`: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glNormalPointervINTEL"))
  glColorPointervINTEL = cast[proc(size: GLint, `type`: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glColorPointervINTEL"))
  glTexCoordPointervINTEL = cast[proc(size: GLint, `type`: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glTexCoordPointervINTEL"))

# Load GL_INTEL_performance_query
proc loadGL_INTEL_performance_query*() =
  glBeginPerfQueryINTEL = cast[proc(queryHandle: GLuint): void {.stdcall.}](glGetProc("glBeginPerfQueryINTEL"))
  glCreatePerfQueryINTEL = cast[proc(queryId: GLuint, queryHandle: ptr GLuint): void {.stdcall.}](glGetProc("glCreatePerfQueryINTEL"))
  glDeletePerfQueryINTEL = cast[proc(queryHandle: GLuint): void {.stdcall.}](glGetProc("glDeletePerfQueryINTEL"))
  glEndPerfQueryINTEL = cast[proc(queryHandle: GLuint): void {.stdcall.}](glGetProc("glEndPerfQueryINTEL"))
  glGetFirstPerfQueryIdINTEL = cast[proc(queryId: ptr GLuint): void {.stdcall.}](glGetProc("glGetFirstPerfQueryIdINTEL"))
  glGetNextPerfQueryIdINTEL = cast[proc(queryId: GLuint, nextQueryId: ptr GLuint): void {.stdcall.}](glGetProc("glGetNextPerfQueryIdINTEL"))
  glGetPerfCounterInfoINTEL = cast[proc(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: cstring, counterDescLength: GLuint, counterDesc: cstring, counterOffset: ptr GLuint, counterDataSize: ptr GLuint, counterTypeEnum: ptr GLuint, counterDataTypeEnum: ptr GLuint, rawCounterMaxValue: ptr GLuint64): void {.stdcall.}](glGetProc("glGetPerfCounterInfoINTEL"))
  glGetPerfQueryDataINTEL = cast[proc(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: pointer, bytesWritten: ptr GLuint): void {.stdcall.}](glGetProc("glGetPerfQueryDataINTEL"))
  glGetPerfQueryIdByNameINTEL = cast[proc(queryName: cstring, queryId: ptr GLuint): void {.stdcall.}](glGetProc("glGetPerfQueryIdByNameINTEL"))
  glGetPerfQueryInfoINTEL = cast[proc(queryId: GLuint, queryNameLength: GLuint, queryName: cstring, dataSize: ptr GLuint, noCounters: ptr GLuint, noInstances: ptr GLuint, capsMask: ptr GLuint): void {.stdcall.}](glGetProc("glGetPerfQueryInfoINTEL"))

# Load GL_KHR_blend_equation_advanced
proc loadGL_KHR_blend_equation_advanced*() =
  glBlendBarrierKHR = cast[proc(): void {.stdcall.}](glGetProc("glBlendBarrierKHR"))

# Load GL_KHR_debug
proc loadGL_KHR_debug*() =
  glDebugMessageControl = cast[proc(source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}](glGetProc("glDebugMessageControl"))
  glDebugMessageInsert = cast[proc(source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring): void {.stdcall.}](glGetProc("glDebugMessageInsert"))
  glDebugMessageCallback = cast[proc(callback: GLDEBUGPROC, userParam: pointer): void {.stdcall.}](glGetProc("glDebugMessageCallback"))
  glGetDebugMessageLog = cast[proc(count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](glGetProc("glGetDebugMessageLog"))
  glPushDebugGroup = cast[proc(source: GLenum, id: GLuint, length: GLsizei, message: cstring): void {.stdcall.}](glGetProc("glPushDebugGroup"))
  glPopDebugGroup = cast[proc(): void {.stdcall.}](glGetProc("glPopDebugGroup"))
  glObjectLabel = cast[proc(identifier: GLenum, name: GLuint, length: GLsizei, label: cstring): void {.stdcall.}](glGetProc("glObjectLabel"))
  glGetObjectLabel = cast[proc(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}](glGetProc("glGetObjectLabel"))
  glObjectPtrLabel = cast[proc(`ptr`: pointer, length: GLsizei, label: cstring): void {.stdcall.}](glGetProc("glObjectPtrLabel"))
  glGetObjectPtrLabel = cast[proc(`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}](glGetProc("glGetObjectPtrLabel"))
  glGetPointerv = cast[proc(pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetPointerv"))
  glDebugMessageControlKHR = cast[proc(source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean): void {.stdcall.}](glGetProc("glDebugMessageControlKHR"))
  glDebugMessageInsertKHR = cast[proc(source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring): void {.stdcall.}](glGetProc("glDebugMessageInsertKHR"))
  glDebugMessageCallbackKHR = cast[proc(callback: GLDEBUGPROCKHR, userParam: pointer): void {.stdcall.}](glGetProc("glDebugMessageCallbackKHR"))
  glGetDebugMessageLogKHR = cast[proc(count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](glGetProc("glGetDebugMessageLogKHR"))
  glPushDebugGroupKHR = cast[proc(source: GLenum, id: GLuint, length: GLsizei, message: cstring): void {.stdcall.}](glGetProc("glPushDebugGroupKHR"))
  glPopDebugGroupKHR = cast[proc(): void {.stdcall.}](glGetProc("glPopDebugGroupKHR"))
  glObjectLabelKHR = cast[proc(identifier: GLenum, name: GLuint, length: GLsizei, label: cstring): void {.stdcall.}](glGetProc("glObjectLabelKHR"))
  glGetObjectLabelKHR = cast[proc(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}](glGetProc("glGetObjectLabelKHR"))
  glObjectPtrLabelKHR = cast[proc(`ptr`: pointer, length: GLsizei, label: cstring): void {.stdcall.}](glGetProc("glObjectPtrLabelKHR"))
  glGetObjectPtrLabelKHR = cast[proc(`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring): void {.stdcall.}](glGetProc("glGetObjectPtrLabelKHR"))
  glGetPointervKHR = cast[proc(pname: GLenum, params: ptr pointer): void {.stdcall.}](glGetProc("glGetPointervKHR"))

# Load GL_KHR_robustness
proc loadGL_KHR_robustness*() =
  glGetGraphicsResetStatus = cast[proc(): GLenum {.stdcall.}](glGetProc("glGetGraphicsResetStatus"))
  glReadnPixels = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glReadnPixels"))
  glGetnUniformfv = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetnUniformfv"))
  glGetnUniformiv = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetnUniformiv"))
  glGetnUniformuiv = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetnUniformuiv"))
  glGetGraphicsResetStatusKHR = cast[proc(): GLenum {.stdcall.}](glGetProc("glGetGraphicsResetStatusKHR"))
  glReadnPixelsKHR = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer): void {.stdcall.}](glGetProc("glReadnPixelsKHR"))
  glGetnUniformfvKHR = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetnUniformfvKHR"))
  glGetnUniformivKHR = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetnUniformivKHR"))
  glGetnUniformuivKHR = cast[proc(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetnUniformuivKHR"))

# Load GL_KHR_parallel_shader_compile
proc loadGL_KHR_parallel_shader_compile*() =
  glMaxShaderCompilerThreadsKHR = cast[proc(count: GLuint): void {.stdcall.}](glGetProc("glMaxShaderCompilerThreadsKHR"))

# Load GL_MESA_framebuffer_flip_y
proc loadGL_MESA_framebuffer_flip_y*() =
  glFramebufferParameteriMESA = cast[proc(target: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glFramebufferParameteriMESA"))
  glGetFramebufferParameterivMESA = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFramebufferParameterivMESA"))

# Load GL_MESA_resize_buffers
proc loadGL_MESA_resize_buffers*() =
  glResizeBuffersMESA = cast[proc(): void {.stdcall.}](glGetProc("glResizeBuffersMESA"))

# Load GL_MESA_window_pos
proc loadGL_MESA_window_pos*() =
  glWindowPos2dMESA = cast[proc(x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glWindowPos2dMESA"))
  glWindowPos2dvMESA = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glWindowPos2dvMESA"))
  glWindowPos2fMESA = cast[proc(x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glWindowPos2fMESA"))
  glWindowPos2fvMESA = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glWindowPos2fvMESA"))
  glWindowPos2iMESA = cast[proc(x: GLint, y: GLint): void {.stdcall.}](glGetProc("glWindowPos2iMESA"))
  glWindowPos2ivMESA = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glWindowPos2ivMESA"))
  glWindowPos2sMESA = cast[proc(x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glWindowPos2sMESA"))
  glWindowPos2svMESA = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glWindowPos2svMESA"))
  glWindowPos3dMESA = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glWindowPos3dMESA"))
  glWindowPos3dvMESA = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glWindowPos3dvMESA"))
  glWindowPos3fMESA = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glWindowPos3fMESA"))
  glWindowPos3fvMESA = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glWindowPos3fvMESA"))
  glWindowPos3iMESA = cast[proc(x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glWindowPos3iMESA"))
  glWindowPos3ivMESA = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glWindowPos3ivMESA"))
  glWindowPos3sMESA = cast[proc(x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glWindowPos3sMESA"))
  glWindowPos3svMESA = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glWindowPos3svMESA"))
  glWindowPos4dMESA = cast[proc(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glWindowPos4dMESA"))
  glWindowPos4dvMESA = cast[proc(v: ptr GLdouble): void {.stdcall.}](glGetProc("glWindowPos4dvMESA"))
  glWindowPos4fMESA = cast[proc(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glWindowPos4fMESA"))
  glWindowPos4fvMESA = cast[proc(v: ptr GLfloat): void {.stdcall.}](glGetProc("glWindowPos4fvMESA"))
  glWindowPos4iMESA = cast[proc(x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glWindowPos4iMESA"))
  glWindowPos4ivMESA = cast[proc(v: ptr GLint): void {.stdcall.}](glGetProc("glWindowPos4ivMESA"))
  glWindowPos4sMESA = cast[proc(x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glWindowPos4sMESA"))
  glWindowPos4svMESA = cast[proc(v: ptr GLshort): void {.stdcall.}](glGetProc("glWindowPos4svMESA"))

# Load GL_NVX_conditional_render
proc loadGL_NVX_conditional_render*() =
  glBeginConditionalRenderNVX = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glBeginConditionalRenderNVX"))
  glEndConditionalRenderNVX = cast[proc(): void {.stdcall.}](glGetProc("glEndConditionalRenderNVX"))

# Load GL_NVX_linked_gpu_multicast
proc loadGL_NVX_linked_gpu_multicast*() =
  glLGPUNamedBufferSubDataNVX = cast[proc(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glLGPUNamedBufferSubDataNVX"))
  glLGPUCopyImageSubDataNVX = cast[proc(sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glLGPUCopyImageSubDataNVX"))
  glLGPUInterlockNVX = cast[proc(): void {.stdcall.}](glGetProc("glLGPUInterlockNVX"))

# Load GL_NV_alpha_to_coverage_dither_control
proc loadGL_NV_alpha_to_coverage_dither_control*() =
  glAlphaToCoverageDitherControlNV = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glAlphaToCoverageDitherControlNV"))

# Load GL_NV_bindless_multi_draw_indirect
proc loadGL_NV_bindless_multi_draw_indirect*() =
  glMultiDrawArraysIndirectBindlessNV = cast[proc(mode: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}](glGetProc("glMultiDrawArraysIndirectBindlessNV"))
  glMultiDrawElementsIndirectBindlessNV = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}](glGetProc("glMultiDrawElementsIndirectBindlessNV"))

# Load GL_NV_bindless_multi_draw_indirect_count
proc loadGL_NV_bindless_multi_draw_indirect_count*() =
  glMultiDrawArraysIndirectBindlessCountNV = cast[proc(mode: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}](glGetProc("glMultiDrawArraysIndirectBindlessCountNV"))
  glMultiDrawElementsIndirectBindlessCountNV = cast[proc(mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void {.stdcall.}](glGetProc("glMultiDrawElementsIndirectBindlessCountNV"))

# Load GL_NV_bindless_texture
proc loadGL_NV_bindless_texture*() =
  glGetTextureHandleNV = cast[proc(texture: GLuint): GLuint64 {.stdcall.}](glGetProc("glGetTextureHandleNV"))
  glGetTextureSamplerHandleNV = cast[proc(texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}](glGetProc("glGetTextureSamplerHandleNV"))
  glMakeTextureHandleResidentNV = cast[proc(handle: GLuint64): void {.stdcall.}](glGetProc("glMakeTextureHandleResidentNV"))
  glMakeTextureHandleNonResidentNV = cast[proc(handle: GLuint64): void {.stdcall.}](glGetProc("glMakeTextureHandleNonResidentNV"))
  glGetImageHandleNV = cast[proc(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}](glGetProc("glGetImageHandleNV"))
  glMakeImageHandleResidentNV = cast[proc(handle: GLuint64, access: GLenum): void {.stdcall.}](glGetProc("glMakeImageHandleResidentNV"))
  glMakeImageHandleNonResidentNV = cast[proc(handle: GLuint64): void {.stdcall.}](glGetProc("glMakeImageHandleNonResidentNV"))
  glUniformHandleui64NV = cast[proc(location: GLint, value: GLuint64): void {.stdcall.}](glGetProc("glUniformHandleui64NV"))
  glUniformHandleui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64): void {.stdcall.}](glGetProc("glUniformHandleui64vNV"))
  glProgramUniformHandleui64NV = cast[proc(program: GLuint, location: GLint, value: GLuint64): void {.stdcall.}](glGetProc("glProgramUniformHandleui64NV"))
  glProgramUniformHandleui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64): void {.stdcall.}](glGetProc("glProgramUniformHandleui64vNV"))
  glIsTextureHandleResidentNV = cast[proc(handle: GLuint64): GLboolean {.stdcall.}](glGetProc("glIsTextureHandleResidentNV"))
  glIsImageHandleResidentNV = cast[proc(handle: GLuint64): GLboolean {.stdcall.}](glGetProc("glIsImageHandleResidentNV"))

# Load GL_NV_blend_equation_advanced
proc loadGL_NV_blend_equation_advanced*() =
  glBlendParameteriNV = cast[proc(pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glBlendParameteriNV"))
  glBlendBarrierNV = cast[proc(): void {.stdcall.}](glGetProc("glBlendBarrierNV"))

# Load GL_NV_clip_space_w_scaling
proc loadGL_NV_clip_space_w_scaling*() =
  glViewportPositionWScaleNV = cast[proc(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat): void {.stdcall.}](glGetProc("glViewportPositionWScaleNV"))

# Load GL_NV_command_list
proc loadGL_NV_command_list*() =
  glCreateStatesNV = cast[proc(n: GLsizei, states: ptr GLuint): void {.stdcall.}](glGetProc("glCreateStatesNV"))
  glDeleteStatesNV = cast[proc(n: GLsizei, states: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteStatesNV"))
  glIsStateNV = cast[proc(state: GLuint): GLboolean {.stdcall.}](glGetProc("glIsStateNV"))
  glStateCaptureNV = cast[proc(state: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glStateCaptureNV"))
  glGetCommandHeaderNV = cast[proc(tokenID: GLenum, size: GLuint): GLuint {.stdcall.}](glGetProc("glGetCommandHeaderNV"))
  glGetStageIndexNV = cast[proc(shadertype: GLenum): GLushort {.stdcall.}](glGetProc("glGetStageIndexNV"))
  glDrawCommandsNV = cast[proc(primitiveMode: GLenum, buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, count: GLuint): void {.stdcall.}](glGetProc("glDrawCommandsNV"))
  glDrawCommandsAddressNV = cast[proc(primitiveMode: GLenum, indirects: ptr GLuint64, sizes: ptr GLsizei, count: GLuint): void {.stdcall.}](glGetProc("glDrawCommandsAddressNV"))
  glDrawCommandsStatesNV = cast[proc(buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint): void {.stdcall.}](glGetProc("glDrawCommandsStatesNV"))
  glDrawCommandsStatesAddressNV = cast[proc(indirects: ptr GLuint64, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint): void {.stdcall.}](glGetProc("glDrawCommandsStatesAddressNV"))
  glCreateCommandListsNV = cast[proc(n: GLsizei, lists: ptr GLuint): void {.stdcall.}](glGetProc("glCreateCommandListsNV"))
  glDeleteCommandListsNV = cast[proc(n: GLsizei, lists: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteCommandListsNV"))
  glIsCommandListNV = cast[proc(list: GLuint): GLboolean {.stdcall.}](glGetProc("glIsCommandListNV"))
  glListDrawCommandsStatesClientNV = cast[proc(list: GLuint, segment: GLuint, indirects: ptr pointer, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint): void {.stdcall.}](glGetProc("glListDrawCommandsStatesClientNV"))
  glCommandListSegmentsNV = cast[proc(list: GLuint, segments: GLuint): void {.stdcall.}](glGetProc("glCommandListSegmentsNV"))
  glCompileCommandListNV = cast[proc(list: GLuint): void {.stdcall.}](glGetProc("glCompileCommandListNV"))
  glCallCommandListNV = cast[proc(list: GLuint): void {.stdcall.}](glGetProc("glCallCommandListNV"))

# Load GL_NV_conditional_render
proc loadGL_NV_conditional_render*() =
  glBeginConditionalRenderNV = cast[proc(id: GLuint, mode: GLenum): void {.stdcall.}](glGetProc("glBeginConditionalRenderNV"))
  glEndConditionalRenderNV = cast[proc(): void {.stdcall.}](glGetProc("glEndConditionalRenderNV"))

# Load GL_NV_conservative_raster
proc loadGL_NV_conservative_raster*() =
  glSubpixelPrecisionBiasNV = cast[proc(xbits: GLuint, ybits: GLuint): void {.stdcall.}](glGetProc("glSubpixelPrecisionBiasNV"))

# Load GL_NV_conservative_raster_dilate
proc loadGL_NV_conservative_raster_dilate*() =
  glConservativeRasterParameterfNV = cast[proc(pname: GLenum, value: GLfloat): void {.stdcall.}](glGetProc("glConservativeRasterParameterfNV"))

# Load GL_NV_conservative_raster_pre_snap_triangles
proc loadGL_NV_conservative_raster_pre_snap_triangles*() =
  glConservativeRasterParameteriNV = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glConservativeRasterParameteriNV"))

# Load GL_NV_copy_image
proc loadGL_NV_copy_image*() =
  glCopyImageSubDataNV = cast[proc(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void {.stdcall.}](glGetProc("glCopyImageSubDataNV"))

# Load GL_NV_depth_buffer_float
proc loadGL_NV_depth_buffer_float*() =
  glDepthRangedNV = cast[proc(zNear: GLdouble, zFar: GLdouble): void {.stdcall.}](glGetProc("glDepthRangedNV"))
  glClearDepthdNV = cast[proc(depth: GLdouble): void {.stdcall.}](glGetProc("glClearDepthdNV"))
  glDepthBoundsdNV = cast[proc(zmin: GLdouble, zmax: GLdouble): void {.stdcall.}](glGetProc("glDepthBoundsdNV"))

# Load GL_NV_draw_texture
proc loadGL_NV_draw_texture*() =
  glDrawTextureNV = cast[proc(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat): void {.stdcall.}](glGetProc("glDrawTextureNV"))

# Load GL_NV_draw_vulkan_image
proc loadGL_NV_draw_vulkan_image*() =
  glDrawVkImageNV = cast[proc(vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat): void {.stdcall.}](glGetProc("glDrawVkImageNV"))
  glGetVkProcAddrNV = cast[proc(name: cstring): GLVULKANPROCNV {.stdcall.}](glGetProc("glGetVkProcAddrNV"))
  glWaitVkSemaphoreNV = cast[proc(vkSemaphore: GLuint64): void {.stdcall.}](glGetProc("glWaitVkSemaphoreNV"))
  glSignalVkSemaphoreNV = cast[proc(vkSemaphore: GLuint64): void {.stdcall.}](glGetProc("glSignalVkSemaphoreNV"))
  glSignalVkFenceNV = cast[proc(vkFence: GLuint64): void {.stdcall.}](glGetProc("glSignalVkFenceNV"))

# Load GL_NV_evaluators
proc loadGL_NV_evaluators*() =
  glMapControlPointsNV = cast[proc(target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: pointer): void {.stdcall.}](glGetProc("glMapControlPointsNV"))
  glMapParameterivNV = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMapParameterivNV"))
  glMapParameterfvNV = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glMapParameterfvNV"))
  glGetMapControlPointsNV = cast[proc(target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: pointer): void {.stdcall.}](glGetProc("glGetMapControlPointsNV"))
  glGetMapParameterivNV = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMapParameterivNV"))
  glGetMapParameterfvNV = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMapParameterfvNV"))
  glGetMapAttribParameterivNV = cast[proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetMapAttribParameterivNV"))
  glGetMapAttribParameterfvNV = cast[proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMapAttribParameterfvNV"))
  glEvalMapsNV = cast[proc(target: GLenum, mode: GLenum): void {.stdcall.}](glGetProc("glEvalMapsNV"))

# Load GL_NV_explicit_multisample
proc loadGL_NV_explicit_multisample*() =
  glGetMultisamplefvNV = cast[proc(pname: GLenum, index: GLuint, val: ptr GLfloat): void {.stdcall.}](glGetProc("glGetMultisamplefvNV"))
  glSampleMaskIndexedNV = cast[proc(index: GLuint, mask: GLbitfield): void {.stdcall.}](glGetProc("glSampleMaskIndexedNV"))
  glTexRenderbufferNV = cast[proc(target: GLenum, renderbuffer: GLuint): void {.stdcall.}](glGetProc("glTexRenderbufferNV"))

# Load GL_NV_fence
proc loadGL_NV_fence*() =
  glDeleteFencesNV = cast[proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteFencesNV"))
  glGenFencesNV = cast[proc(n: GLsizei, fences: ptr GLuint): void {.stdcall.}](glGetProc("glGenFencesNV"))
  glIsFenceNV = cast[proc(fence: GLuint): GLboolean {.stdcall.}](glGetProc("glIsFenceNV"))
  glTestFenceNV = cast[proc(fence: GLuint): GLboolean {.stdcall.}](glGetProc("glTestFenceNV"))
  glGetFenceivNV = cast[proc(fence: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFenceivNV"))
  glFinishFenceNV = cast[proc(fence: GLuint): void {.stdcall.}](glGetProc("glFinishFenceNV"))
  glSetFenceNV = cast[proc(fence: GLuint, condition: GLenum): void {.stdcall.}](glGetProc("glSetFenceNV"))

# Load GL_NV_fragment_coverage_to_color
proc loadGL_NV_fragment_coverage_to_color*() =
  glFragmentCoverageColorNV = cast[proc(color: GLuint): void {.stdcall.}](glGetProc("glFragmentCoverageColorNV"))

# Load GL_NV_fragment_program
proc loadGL_NV_fragment_program*() =
  glProgramNamedParameter4fNV = cast[proc(id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glProgramNamedParameter4fNV"))
  glProgramNamedParameter4fvNV = cast[proc(id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramNamedParameter4fvNV"))
  glProgramNamedParameter4dNV = cast[proc(id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glProgramNamedParameter4dNV"))
  glProgramNamedParameter4dvNV = cast[proc(id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramNamedParameter4dvNV"))
  glGetProgramNamedParameterfvNV = cast[proc(id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetProgramNamedParameterfvNV"))
  glGetProgramNamedParameterdvNV = cast[proc(id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetProgramNamedParameterdvNV"))

# Load GL_NV_framebuffer_mixed_samples
proc loadGL_NV_framebuffer_mixed_samples*() =
  glRasterSamplesEXT = cast[proc(samples: GLuint, fixedsamplelocations: GLboolean): void {.stdcall.}](glGetProc("glRasterSamplesEXT"))
  glCoverageModulationTableNV = cast[proc(n: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glCoverageModulationTableNV"))
  glGetCoverageModulationTableNV = cast[proc(bufSize: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glGetCoverageModulationTableNV"))
  glCoverageModulationNV = cast[proc(components: GLenum): void {.stdcall.}](glGetProc("glCoverageModulationNV"))

# Load GL_NV_framebuffer_multisample_coverage
proc loadGL_NV_framebuffer_multisample_coverage*() =
  glRenderbufferStorageMultisampleCoverageNV = cast[proc(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glRenderbufferStorageMultisampleCoverageNV"))

# Load GL_NV_geometry_program4
proc loadGL_NV_geometry_program4*() =
  glProgramVertexLimitNV = cast[proc(target: GLenum, limit: GLint): void {.stdcall.}](glGetProc("glProgramVertexLimitNV"))
  glFramebufferTextureEXT = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void {.stdcall.}](glGetProc("glFramebufferTextureEXT"))
  glFramebufferTextureLayerEXT = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void {.stdcall.}](glGetProc("glFramebufferTextureLayerEXT"))
  glFramebufferTextureFaceEXT = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void {.stdcall.}](glGetProc("glFramebufferTextureFaceEXT"))

# Load GL_NV_gpu_program4
proc loadGL_NV_gpu_program4*() =
  glProgramLocalParameterI4iNV = cast[proc(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glProgramLocalParameterI4iNV"))
  glProgramLocalParameterI4ivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}](glGetProc("glProgramLocalParameterI4ivNV"))
  glProgramLocalParametersI4ivNV = cast[proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glProgramLocalParametersI4ivNV"))
  glProgramLocalParameterI4uiNV = cast[proc(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}](glGetProc("glProgramLocalParameterI4uiNV"))
  glProgramLocalParameterI4uivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}](glGetProc("glProgramLocalParameterI4uivNV"))
  glProgramLocalParametersI4uivNV = cast[proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glProgramLocalParametersI4uivNV"))
  glProgramEnvParameterI4iNV = cast[proc(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glProgramEnvParameterI4iNV"))
  glProgramEnvParameterI4ivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}](glGetProc("glProgramEnvParameterI4ivNV"))
  glProgramEnvParametersI4ivNV = cast[proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glProgramEnvParametersI4ivNV"))
  glProgramEnvParameterI4uiNV = cast[proc(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}](glGetProc("glProgramEnvParameterI4uiNV"))
  glProgramEnvParameterI4uivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}](glGetProc("glProgramEnvParameterI4uivNV"))
  glProgramEnvParametersI4uivNV = cast[proc(target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glProgramEnvParametersI4uivNV"))
  glGetProgramLocalParameterIivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramLocalParameterIivNV"))
  glGetProgramLocalParameterIuivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetProgramLocalParameterIuivNV"))
  glGetProgramEnvParameterIivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramEnvParameterIivNV"))
  glGetProgramEnvParameterIuivNV = cast[proc(target: GLenum, index: GLuint, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetProgramEnvParameterIuivNV"))

# Load GL_NV_gpu_program5
proc loadGL_NV_gpu_program5*() =
  glProgramSubroutineParametersuivNV = cast[proc(target: GLenum, count: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glProgramSubroutineParametersuivNV"))
  glGetProgramSubroutineParameteruivNV = cast[proc(target: GLenum, index: GLuint, param: ptr GLuint): void {.stdcall.}](glGetProc("glGetProgramSubroutineParameteruivNV"))

# Load GL_NV_gpu_shader5
proc loadGL_NV_gpu_shader5*() =
  glUniform1i64NV = cast[proc(location: GLint, x: GLint64EXT): void {.stdcall.}](glGetProc("glUniform1i64NV"))
  glUniform2i64NV = cast[proc(location: GLint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}](glGetProc("glUniform2i64NV"))
  glUniform3i64NV = cast[proc(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}](glGetProc("glUniform3i64NV"))
  glUniform4i64NV = cast[proc(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}](glGetProc("glUniform4i64NV"))
  glUniform1i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform1i64vNV"))
  glUniform2i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform2i64vNV"))
  glUniform3i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform3i64vNV"))
  glUniform4i64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glUniform4i64vNV"))
  glUniform1ui64NV = cast[proc(location: GLint, x: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform1ui64NV"))
  glUniform2ui64NV = cast[proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform2ui64NV"))
  glUniform3ui64NV = cast[proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform3ui64NV"))
  glUniform4ui64NV = cast[proc(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}](glGetProc("glUniform4ui64NV"))
  glUniform1ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform1ui64vNV"))
  glUniform2ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform2ui64vNV"))
  glUniform3ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform3ui64vNV"))
  glUniform4ui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniform4ui64vNV"))
  glGetUniformi64vNV = cast[proc(program: GLuint, location: GLint, params: ptr GLint64EXT): void {.stdcall.}](glGetProc("glGetUniformi64vNV"))
  glProgramUniform1i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1i64NV"))
  glProgramUniform2i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2i64NV"))
  glProgramUniform3i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3i64NV"))
  glProgramUniform4i64NV = cast[proc(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4i64NV"))
  glProgramUniform1i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1i64vNV"))
  glProgramUniform2i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2i64vNV"))
  glProgramUniform3i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3i64vNV"))
  glProgramUniform4i64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4i64vNV"))
  glProgramUniform1ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1ui64NV"))
  glProgramUniform2ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2ui64NV"))
  glProgramUniform3ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3ui64NV"))
  glProgramUniform4ui64NV = cast[proc(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4ui64NV"))
  glProgramUniform1ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform1ui64vNV"))
  glProgramUniform2ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform2ui64vNV"))
  glProgramUniform3ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform3ui64vNV"))
  glProgramUniform4ui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniform4ui64vNV"))

# Load GL_NV_half_float
proc loadGL_NV_half_float*() =
  glVertex2hNV = cast[proc(x: GLhalfNV, y: GLhalfNV): void {.stdcall.}](glGetProc("glVertex2hNV"))
  glVertex2hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertex2hvNV"))
  glVertex3hNV = cast[proc(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV): void {.stdcall.}](glGetProc("glVertex3hNV"))
  glVertex3hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertex3hvNV"))
  glVertex4hNV = cast[proc(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV): void {.stdcall.}](glGetProc("glVertex4hNV"))
  glVertex4hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertex4hvNV"))
  glNormal3hNV = cast[proc(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV): void {.stdcall.}](glGetProc("glNormal3hNV"))
  glNormal3hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glNormal3hvNV"))
  glColor3hNV = cast[proc(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV): void {.stdcall.}](glGetProc("glColor3hNV"))
  glColor3hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glColor3hvNV"))
  glColor4hNV = cast[proc(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV): void {.stdcall.}](glGetProc("glColor4hNV"))
  glColor4hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glColor4hvNV"))
  glTexCoord1hNV = cast[proc(s: GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord1hNV"))
  glTexCoord1hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord1hvNV"))
  glTexCoord2hNV = cast[proc(s: GLhalfNV, t: GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord2hNV"))
  glTexCoord2hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord2hvNV"))
  glTexCoord3hNV = cast[proc(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord3hNV"))
  glTexCoord3hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord3hvNV"))
  glTexCoord4hNV = cast[proc(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord4hNV"))
  glTexCoord4hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glTexCoord4hvNV"))
  glMultiTexCoord1hNV = cast[proc(target: GLenum, s: GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord1hNV"))
  glMultiTexCoord1hvNV = cast[proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord1hvNV"))
  glMultiTexCoord2hNV = cast[proc(target: GLenum, s: GLhalfNV, t: GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord2hNV"))
  glMultiTexCoord2hvNV = cast[proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord2hvNV"))
  glMultiTexCoord3hNV = cast[proc(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord3hNV"))
  glMultiTexCoord3hvNV = cast[proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord3hvNV"))
  glMultiTexCoord4hNV = cast[proc(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord4hNV"))
  glMultiTexCoord4hvNV = cast[proc(target: GLenum, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glMultiTexCoord4hvNV"))
  glFogCoordhNV = cast[proc(fog: GLhalfNV): void {.stdcall.}](glGetProc("glFogCoordhNV"))
  glFogCoordhvNV = cast[proc(fog: ptr GLhalfNV): void {.stdcall.}](glGetProc("glFogCoordhvNV"))
  glSecondaryColor3hNV = cast[proc(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV): void {.stdcall.}](glGetProc("glSecondaryColor3hNV"))
  glSecondaryColor3hvNV = cast[proc(v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glSecondaryColor3hvNV"))
  glVertexWeighthNV = cast[proc(weight: GLhalfNV): void {.stdcall.}](glGetProc("glVertexWeighthNV"))
  glVertexWeighthvNV = cast[proc(weight: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexWeighthvNV"))
  glVertexAttrib1hNV = cast[proc(index: GLuint, x: GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib1hNV"))
  glVertexAttrib1hvNV = cast[proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib1hvNV"))
  glVertexAttrib2hNV = cast[proc(index: GLuint, x: GLhalfNV, y: GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib2hNV"))
  glVertexAttrib2hvNV = cast[proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib2hvNV"))
  glVertexAttrib3hNV = cast[proc(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib3hNV"))
  glVertexAttrib3hvNV = cast[proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib3hvNV"))
  glVertexAttrib4hNV = cast[proc(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib4hNV"))
  glVertexAttrib4hvNV = cast[proc(index: GLuint, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttrib4hvNV"))
  glVertexAttribs1hvNV = cast[proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttribs1hvNV"))
  glVertexAttribs2hvNV = cast[proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttribs2hvNV"))
  glVertexAttribs3hvNV = cast[proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttribs3hvNV"))
  glVertexAttribs4hvNV = cast[proc(index: GLuint, n: GLsizei, v: ptr GLhalfNV): void {.stdcall.}](glGetProc("glVertexAttribs4hvNV"))

# Load GL_NV_internalformat_sample_query
proc loadGL_NV_internalformat_sample_query*() =
  glGetInternalformatSampleivNV = cast[proc(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glGetInternalformatSampleivNV"))

# Load GL_NV_gpu_multicast
proc loadGL_NV_gpu_multicast*() =
  glRenderGpuMaskNV = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glRenderGpuMaskNV"))
  glMulticastBufferSubDataNV = cast[proc(gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer): void {.stdcall.}](glGetProc("glMulticastBufferSubDataNV"))
  glMulticastCopyBufferSubDataNV = cast[proc(readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glMulticastCopyBufferSubDataNV"))
  glMulticastCopyImageSubDataNV = cast[proc(srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void {.stdcall.}](glGetProc("glMulticastCopyImageSubDataNV"))
  glMulticastBlitFramebufferNV = cast[proc(srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void {.stdcall.}](glGetProc("glMulticastBlitFramebufferNV"))
  glMulticastFramebufferSampleLocationsfvNV = cast[proc(gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMulticastFramebufferSampleLocationsfvNV"))
  glMulticastBarrierNV = cast[proc(): void {.stdcall.}](glGetProc("glMulticastBarrierNV"))
  glMulticastWaitSyncNV = cast[proc(signalGpu: GLuint, waitGpuMask: GLbitfield): void {.stdcall.}](glGetProc("glMulticastWaitSyncNV"))
  glMulticastGetQueryObjectivNV = cast[proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glMulticastGetQueryObjectivNV"))
  glMulticastGetQueryObjectuivNV = cast[proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glMulticastGetQueryObjectuivNV"))
  glMulticastGetQueryObjecti64vNV = cast[proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint64): void {.stdcall.}](glGetProc("glMulticastGetQueryObjecti64vNV"))
  glMulticastGetQueryObjectui64vNV = cast[proc(gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint64): void {.stdcall.}](glGetProc("glMulticastGetQueryObjectui64vNV"))

# Load GL_NVX_gpu_multicast2
proc loadGL_NVX_gpu_multicast2*() =
  glUploadGpuMaskNVX = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glUploadGpuMaskNVX"))
  glMulticastViewportArrayvNVX = cast[proc(gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glMulticastViewportArrayvNVX"))
  glMulticastViewportPositionWScaleNVX = cast[proc(gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat): void {.stdcall.}](glGetProc("glMulticastViewportPositionWScaleNVX"))
  glMulticastScissorArrayvNVX = cast[proc(gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}](glGetProc("glMulticastScissorArrayvNVX"))
  glAsyncCopyBufferSubDataNVX = cast[proc(waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}](glGetProc("glAsyncCopyBufferSubDataNVX"))
  glAsyncCopyImageSubDataNVX = cast[proc(waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, waitValueArray: ptr GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}](glGetProc("glAsyncCopyImageSubDataNVX"))

# Load GL_NVX_progress_fence
proc loadGL_NVX_progress_fence*() =
  glCreateProgressFenceNVX = cast[proc(): GLuint {.stdcall.}](glGetProc("glCreateProgressFenceNVX"))
  glSignalSemaphoreui64NVX = cast[proc(signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64): void {.stdcall.}](glGetProc("glSignalSemaphoreui64NVX"))
  glWaitSemaphoreui64NVX = cast[proc(waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64): void {.stdcall.}](glGetProc("glWaitSemaphoreui64NVX"))
  glClientWaitSemaphoreui64NVX = cast[proc(fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64): void {.stdcall.}](glGetProc("glClientWaitSemaphoreui64NVX"))

# Load GL_NV_memory_attachment
proc loadGL_NV_memory_attachment*() =
  glGetMemoryObjectDetachedResourcesuivNV = cast[proc(memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetMemoryObjectDetachedResourcesuivNV"))
  glResetMemoryObjectParameterNV = cast[proc(memory: GLuint, pname: GLenum): void {.stdcall.}](glGetProc("glResetMemoryObjectParameterNV"))
  glTexAttachMemoryNV = cast[proc(target: GLenum, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTexAttachMemoryNV"))
  glBufferAttachMemoryNV = cast[proc(target: GLenum, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glBufferAttachMemoryNV"))
  glTextureAttachMemoryNV = cast[proc(texture: GLuint, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glTextureAttachMemoryNV"))
  glNamedBufferAttachMemoryNV = cast[proc(buffer: GLuint, memory: GLuint, offset: GLuint64): void {.stdcall.}](glGetProc("glNamedBufferAttachMemoryNV"))

# Load GL_NV_mesh_shader
proc loadGL_NV_mesh_shader*() =
  glDrawMeshTasksNV = cast[proc(first: GLuint, count: GLuint): void {.stdcall.}](glGetProc("glDrawMeshTasksNV"))
  glDrawMeshTasksIndirectNV = cast[proc(indirect: GLintptr): void {.stdcall.}](glGetProc("glDrawMeshTasksIndirectNV"))
  glMultiDrawMeshTasksIndirectNV = cast[proc(indirect: GLintptr, drawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawMeshTasksIndirectNV"))
  glMultiDrawMeshTasksIndirectCountNV = cast[proc(indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void {.stdcall.}](glGetProc("glMultiDrawMeshTasksIndirectCountNV"))

# Load GL_NV_occlusion_query
proc loadGL_NV_occlusion_query*() =
  glGenOcclusionQueriesNV = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glGenOcclusionQueriesNV"))
  glDeleteOcclusionQueriesNV = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteOcclusionQueriesNV"))
  glIsOcclusionQueryNV = cast[proc(id: GLuint): GLboolean {.stdcall.}](glGetProc("glIsOcclusionQueryNV"))
  glBeginOcclusionQueryNV = cast[proc(id: GLuint): void {.stdcall.}](glGetProc("glBeginOcclusionQueryNV"))
  glEndOcclusionQueryNV = cast[proc(): void {.stdcall.}](glGetProc("glEndOcclusionQueryNV"))
  glGetOcclusionQueryivNV = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetOcclusionQueryivNV"))
  glGetOcclusionQueryuivNV = cast[proc(id: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetOcclusionQueryuivNV"))

# Load GL_NV_parameter_buffer_object
proc loadGL_NV_parameter_buffer_object*() =
  glProgramBufferParametersfvNV = cast[proc(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramBufferParametersfvNV"))
  glProgramBufferParametersIivNV = cast[proc(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLint): void {.stdcall.}](glGetProc("glProgramBufferParametersIivNV"))
  glProgramBufferParametersIuivNV = cast[proc(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLuint): void {.stdcall.}](glGetProc("glProgramBufferParametersIuivNV"))

# Load GL_NV_path_rendering
proc loadGL_NV_path_rendering*() =
  glGenPathsNV = cast[proc(range: GLsizei): GLuint {.stdcall.}](glGetProc("glGenPathsNV"))
  glDeletePathsNV = cast[proc(path: GLuint, range: GLsizei): void {.stdcall.}](glGetProc("glDeletePathsNV"))
  glIsPathNV = cast[proc(path: GLuint): GLboolean {.stdcall.}](glGetProc("glIsPathNV"))
  glPathCommandsNV = cast[proc(path: GLuint, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}](glGetProc("glPathCommandsNV"))
  glPathCoordsNV = cast[proc(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}](glGetProc("glPathCoordsNV"))
  glPathSubCommandsNV = cast[proc(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}](glGetProc("glPathSubCommandsNV"))
  glPathSubCoordsNV = cast[proc(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: pointer): void {.stdcall.}](glGetProc("glPathSubCoordsNV"))
  glPathStringNV = cast[proc(path: GLuint, format: GLenum, length: GLsizei, pathString: pointer): void {.stdcall.}](glGetProc("glPathStringNV"))
  glPathGlyphsNV = cast[proc(firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, numGlyphs: GLsizei, `type`: GLenum, charcodes: pointer, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat): void {.stdcall.}](glGetProc("glPathGlyphsNV"))
  glPathGlyphRangeNV = cast[proc(firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat): void {.stdcall.}](glGetProc("glPathGlyphRangeNV"))
  glWeightPathsNV = cast[proc(resultPath: GLuint, numPaths: GLsizei, paths: ptr GLuint, weights: ptr GLfloat): void {.stdcall.}](glGetProc("glWeightPathsNV"))
  glCopyPathNV = cast[proc(resultPath: GLuint, srcPath: GLuint): void {.stdcall.}](glGetProc("glCopyPathNV"))
  glInterpolatePathsNV = cast[proc(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat): void {.stdcall.}](glGetProc("glInterpolatePathsNV"))
  glTransformPathNV = cast[proc(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}](glGetProc("glTransformPathNV"))
  glPathParameterivNV = cast[proc(path: GLuint, pname: GLenum, value: ptr GLint): void {.stdcall.}](glGetProc("glPathParameterivNV"))
  glPathParameteriNV = cast[proc(path: GLuint, pname: GLenum, value: GLint): void {.stdcall.}](glGetProc("glPathParameteriNV"))
  glPathParameterfvNV = cast[proc(path: GLuint, pname: GLenum, value: ptr GLfloat): void {.stdcall.}](glGetProc("glPathParameterfvNV"))
  glPathParameterfNV = cast[proc(path: GLuint, pname: GLenum, value: GLfloat): void {.stdcall.}](glGetProc("glPathParameterfNV"))
  glPathDashArrayNV = cast[proc(path: GLuint, dashCount: GLsizei, dashArray: ptr GLfloat): void {.stdcall.}](glGetProc("glPathDashArrayNV"))
  glPathStencilFuncNV = cast[proc(`func`: GLenum, `ref`: GLint, mask: GLuint): void {.stdcall.}](glGetProc("glPathStencilFuncNV"))
  glPathStencilDepthOffsetNV = cast[proc(factor: GLfloat, units: GLfloat): void {.stdcall.}](glGetProc("glPathStencilDepthOffsetNV"))
  glStencilFillPathNV = cast[proc(path: GLuint, fillMode: GLenum, mask: GLuint): void {.stdcall.}](glGetProc("glStencilFillPathNV"))
  glStencilStrokePathNV = cast[proc(path: GLuint, reference: GLint, mask: GLuint): void {.stdcall.}](glGetProc("glStencilStrokePathNV"))
  glStencilFillPathInstancedNV = cast[proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}](glGetProc("glStencilFillPathInstancedNV"))
  glStencilStrokePathInstancedNV = cast[proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}](glGetProc("glStencilStrokePathInstancedNV"))
  glPathCoverDepthFuncNV = cast[proc(`func`: GLenum): void {.stdcall.}](glGetProc("glPathCoverDepthFuncNV"))
  glCoverFillPathNV = cast[proc(path: GLuint, coverMode: GLenum): void {.stdcall.}](glGetProc("glCoverFillPathNV"))
  glCoverStrokePathNV = cast[proc(path: GLuint, coverMode: GLenum): void {.stdcall.}](glGetProc("glCoverStrokePathNV"))
  glCoverFillPathInstancedNV = cast[proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}](glGetProc("glCoverFillPathInstancedNV"))
  glCoverStrokePathInstancedNV = cast[proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}](glGetProc("glCoverStrokePathInstancedNV"))
  glGetPathParameterivNV = cast[proc(path: GLuint, pname: GLenum, value: ptr GLint): void {.stdcall.}](glGetProc("glGetPathParameterivNV"))
  glGetPathParameterfvNV = cast[proc(path: GLuint, pname: GLenum, value: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathParameterfvNV"))
  glGetPathCommandsNV = cast[proc(path: GLuint, commands: ptr GLubyte): void {.stdcall.}](glGetProc("glGetPathCommandsNV"))
  glGetPathCoordsNV = cast[proc(path: GLuint, coords: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathCoordsNV"))
  glGetPathDashArrayNV = cast[proc(path: GLuint, dashArray: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathDashArrayNV"))
  glGetPathMetricsNV = cast[proc(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, stride: GLsizei, metrics: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathMetricsNV"))
  glGetPathMetricRangeNV = cast[proc(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathMetricRangeNV"))
  glGetPathSpacingNV = cast[proc(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathSpacingNV"))
  glIsPointInFillPathNV = cast[proc(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}](glGetProc("glIsPointInFillPathNV"))
  glIsPointInStrokePathNV = cast[proc(path: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}](glGetProc("glIsPointInStrokePathNV"))
  glGetPathLengthNV = cast[proc(path: GLuint, startSegment: GLsizei, numSegments: GLsizei): GLfloat {.stdcall.}](glGetProc("glGetPathLengthNV"))
  glPointAlongPathNV = cast[proc(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: ptr GLfloat, y: ptr GLfloat, tangentX: ptr GLfloat, tangentY: ptr GLfloat): GLboolean {.stdcall.}](glGetProc("glPointAlongPathNV"))
  glMatrixLoad3x2fNV = cast[proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixLoad3x2fNV"))
  glMatrixLoad3x3fNV = cast[proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixLoad3x3fNV"))
  glMatrixLoadTranspose3x3fNV = cast[proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixLoadTranspose3x3fNV"))
  glMatrixMult3x2fNV = cast[proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixMult3x2fNV"))
  glMatrixMult3x3fNV = cast[proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixMult3x3fNV"))
  glMatrixMultTranspose3x3fNV = cast[proc(matrixMode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixMultTranspose3x3fNV"))
  glStencilThenCoverFillPathNV = cast[proc(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum): void {.stdcall.}](glGetProc("glStencilThenCoverFillPathNV"))
  glStencilThenCoverStrokePathNV = cast[proc(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum): void {.stdcall.}](glGetProc("glStencilThenCoverStrokePathNV"))
  glStencilThenCoverFillPathInstancedNV = cast[proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}](glGetProc("glStencilThenCoverFillPathInstancedNV"))
  glStencilThenCoverStrokePathInstancedNV = cast[proc(numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat): void {.stdcall.}](glGetProc("glStencilThenCoverStrokePathInstancedNV"))
  glPathGlyphIndexRangeNV = cast[proc(fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: GLuint): GLenum {.stdcall.}](glGetProc("glPathGlyphIndexRangeNV"))
  glPathGlyphIndexArrayNV = cast[proc(firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}](glGetProc("glPathGlyphIndexArrayNV"))
  glPathMemoryGlyphIndexArrayNV = cast[proc(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: pointer, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}](glGetProc("glPathMemoryGlyphIndexArrayNV"))
  glProgramPathFragmentInputGenNV = cast[proc(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramPathFragmentInputGenNV"))
  glGetProgramResourcefvNV = cast[proc(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetProgramResourcefvNV"))
  glPathColorGenNV = cast[proc(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: ptr GLfloat): void {.stdcall.}](glGetProc("glPathColorGenNV"))
  glPathTexGenNV = cast[proc(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: ptr GLfloat): void {.stdcall.}](glGetProc("glPathTexGenNV"))
  glPathFogGenNV = cast[proc(genMode: GLenum): void {.stdcall.}](glGetProc("glPathFogGenNV"))
  glGetPathColorGenivNV = cast[proc(color: GLenum, pname: GLenum, value: ptr GLint): void {.stdcall.}](glGetProc("glGetPathColorGenivNV"))
  glGetPathColorGenfvNV = cast[proc(color: GLenum, pname: GLenum, value: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathColorGenfvNV"))
  glGetPathTexGenivNV = cast[proc(texCoordSet: GLenum, pname: GLenum, value: ptr GLint): void {.stdcall.}](glGetProc("glGetPathTexGenivNV"))
  glGetPathTexGenfvNV = cast[proc(texCoordSet: GLenum, pname: GLenum, value: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPathTexGenfvNV"))
  glMatrixFrustumEXT = cast[proc(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}](glGetProc("glMatrixFrustumEXT"))
  glMatrixLoadIdentityEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glMatrixLoadIdentityEXT"))
  glMatrixLoadTransposefEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixLoadTransposefEXT"))
  glMatrixLoadTransposedEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixLoadTransposedEXT"))
  glMatrixLoadfEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixLoadfEXT"))
  glMatrixLoaddEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixLoaddEXT"))
  glMatrixMultTransposefEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixMultTransposefEXT"))
  glMatrixMultTransposedEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixMultTransposedEXT"))
  glMatrixMultfEXT = cast[proc(mode: GLenum, m: ptr GLfloat): void {.stdcall.}](glGetProc("glMatrixMultfEXT"))
  glMatrixMultdEXT = cast[proc(mode: GLenum, m: ptr GLdouble): void {.stdcall.}](glGetProc("glMatrixMultdEXT"))
  glMatrixOrthoEXT = cast[proc(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void {.stdcall.}](glGetProc("glMatrixOrthoEXT"))
  glMatrixPopEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glMatrixPopEXT"))
  glMatrixPushEXT = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glMatrixPushEXT"))
  glMatrixRotatefEXT = cast[proc(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glMatrixRotatefEXT"))
  glMatrixRotatedEXT = cast[proc(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glMatrixRotatedEXT"))
  glMatrixScalefEXT = cast[proc(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glMatrixScalefEXT"))
  glMatrixScaledEXT = cast[proc(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glMatrixScaledEXT"))
  glMatrixTranslatefEXT = cast[proc(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glMatrixTranslatefEXT"))
  glMatrixTranslatedEXT = cast[proc(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glMatrixTranslatedEXT"))

# Load GL_NV_pixel_data_range
proc loadGL_NV_pixel_data_range*() =
  glPixelDataRangeNV = cast[proc(target: GLenum, length: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glPixelDataRangeNV"))
  glFlushPixelDataRangeNV = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glFlushPixelDataRangeNV"))

# Load GL_NV_point_sprite
proc loadGL_NV_point_sprite*() =
  glPointParameteriNV = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glPointParameteriNV"))
  glPointParameterivNV = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glPointParameterivNV"))

# Load GL_NV_present_video
proc loadGL_NV_present_video*() =
  glPresentFrameKeyedNV = cast[proc(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint): void {.stdcall.}](glGetProc("glPresentFrameKeyedNV"))
  glPresentFrameDualFillNV = cast[proc(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint): void {.stdcall.}](glGetProc("glPresentFrameDualFillNV"))
  glGetVideoivNV = cast[proc(video_slot: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVideoivNV"))
  glGetVideouivNV = cast[proc(video_slot: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetVideouivNV"))
  glGetVideoi64vNV = cast[proc(video_slot: GLuint, pname: GLenum, params: ptr GLint64EXT): void {.stdcall.}](glGetProc("glGetVideoi64vNV"))
  glGetVideoui64vNV = cast[proc(video_slot: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetVideoui64vNV"))

# Load GL_NV_primitive_restart
proc loadGL_NV_primitive_restart*() =
  glPrimitiveRestartNV = cast[proc(): void {.stdcall.}](glGetProc("glPrimitiveRestartNV"))
  glPrimitiveRestartIndexNV = cast[proc(index: GLuint): void {.stdcall.}](glGetProc("glPrimitiveRestartIndexNV"))

# Load GL_NV_query_resource
proc loadGL_NV_query_resource*() =
  glQueryResourceNV = cast[proc(queryType: GLenum, tagId: GLint, count: GLuint, buffer: ptr GLint): GLint {.stdcall.}](glGetProc("glQueryResourceNV"))

# Load GL_NV_query_resource_tag
proc loadGL_NV_query_resource_tag*() =
  glGenQueryResourceTagNV = cast[proc(n: GLsizei, tagIds: ptr GLint): void {.stdcall.}](glGetProc("glGenQueryResourceTagNV"))
  glDeleteQueryResourceTagNV = cast[proc(n: GLsizei, tagIds: ptr GLint): void {.stdcall.}](glGetProc("glDeleteQueryResourceTagNV"))
  glQueryResourceTagNV = cast[proc(tagId: GLint, tagString: cstring): void {.stdcall.}](glGetProc("glQueryResourceTagNV"))

# Load GL_NV_register_combiners
proc loadGL_NV_register_combiners*() =
  glCombinerParameterfvNV = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glCombinerParameterfvNV"))
  glCombinerParameterfNV = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glCombinerParameterfNV"))
  glCombinerParameterivNV = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glCombinerParameterivNV"))
  glCombinerParameteriNV = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glCombinerParameteriNV"))
  glCombinerInputNV = cast[proc(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum): void {.stdcall.}](glGetProc("glCombinerInputNV"))
  glCombinerOutputNV = cast[proc(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean): void {.stdcall.}](glGetProc("glCombinerOutputNV"))
  glFinalCombinerInputNV = cast[proc(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum): void {.stdcall.}](glGetProc("glFinalCombinerInputNV"))
  glGetCombinerInputParameterfvNV = cast[proc(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetCombinerInputParameterfvNV"))
  glGetCombinerInputParameterivNV = cast[proc(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetCombinerInputParameterivNV"))
  glGetCombinerOutputParameterfvNV = cast[proc(stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetCombinerOutputParameterfvNV"))
  glGetCombinerOutputParameterivNV = cast[proc(stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetCombinerOutputParameterivNV"))
  glGetFinalCombinerInputParameterfvNV = cast[proc(variable: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFinalCombinerInputParameterfvNV"))
  glGetFinalCombinerInputParameterivNV = cast[proc(variable: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFinalCombinerInputParameterivNV"))

# Load GL_NV_register_combiners2
proc loadGL_NV_register_combiners2*() =
  glCombinerStageParameterfvNV = cast[proc(stage: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glCombinerStageParameterfvNV"))
  glGetCombinerStageParameterfvNV = cast[proc(stage: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetCombinerStageParameterfvNV"))

# Load GL_NV_sample_locations
proc loadGL_NV_sample_locations*() =
  glFramebufferSampleLocationsfvNV = cast[proc(target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glFramebufferSampleLocationsfvNV"))
  glNamedFramebufferSampleLocationsfvNV = cast[proc(framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glNamedFramebufferSampleLocationsfvNV"))
  glResolveDepthValuesNV = cast[proc(): void {.stdcall.}](glGetProc("glResolveDepthValuesNV"))

# Load GL_NV_scissor_exclusive
proc loadGL_NV_scissor_exclusive*() =
  glScissorExclusiveNV = cast[proc(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void {.stdcall.}](glGetProc("glScissorExclusiveNV"))
  glScissorExclusiveArrayvNV = cast[proc(first: GLuint, count: GLsizei, v: ptr GLint): void {.stdcall.}](glGetProc("glScissorExclusiveArrayvNV"))

# Load GL_NV_shader_buffer_load
proc loadGL_NV_shader_buffer_load*() =
  glMakeBufferResidentNV = cast[proc(target: GLenum, access: GLenum): void {.stdcall.}](glGetProc("glMakeBufferResidentNV"))
  glMakeBufferNonResidentNV = cast[proc(target: GLenum): void {.stdcall.}](glGetProc("glMakeBufferNonResidentNV"))
  glIsBufferResidentNV = cast[proc(target: GLenum): GLboolean {.stdcall.}](glGetProc("glIsBufferResidentNV"))
  glMakeNamedBufferResidentNV = cast[proc(buffer: GLuint, access: GLenum): void {.stdcall.}](glGetProc("glMakeNamedBufferResidentNV"))
  glMakeNamedBufferNonResidentNV = cast[proc(buffer: GLuint): void {.stdcall.}](glGetProc("glMakeNamedBufferNonResidentNV"))
  glIsNamedBufferResidentNV = cast[proc(buffer: GLuint): GLboolean {.stdcall.}](glGetProc("glIsNamedBufferResidentNV"))
  glGetBufferParameterui64vNV = cast[proc(target: GLenum, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetBufferParameterui64vNV"))
  glGetNamedBufferParameterui64vNV = cast[proc(buffer: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetNamedBufferParameterui64vNV"))
  glGetIntegerui64vNV = cast[proc(value: GLenum, result: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetIntegerui64vNV"))
  glUniformui64NV = cast[proc(location: GLint, value: GLuint64EXT): void {.stdcall.}](glGetProc("glUniformui64NV"))
  glUniformui64vNV = cast[proc(location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glUniformui64vNV"))
  glGetUniformui64vNV = cast[proc(program: GLuint, location: GLint, params: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetUniformui64vNV"))
  glProgramUniformui64NV = cast[proc(program: GLuint, location: GLint, value: GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniformui64NV"))
  glProgramUniformui64vNV = cast[proc(program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glProgramUniformui64vNV"))

# Load GL_NV_shading_rate_image
proc loadGL_NV_shading_rate_image*() =
  glBindShadingRateImageNV = cast[proc(texture: GLuint): void {.stdcall.}](glGetProc("glBindShadingRateImageNV"))
  glGetShadingRateImagePaletteNV = cast[proc(viewport: GLuint, entry: GLuint, rate: ptr GLenum): void {.stdcall.}](glGetProc("glGetShadingRateImagePaletteNV"))
  glGetShadingRateSampleLocationivNV = cast[proc(rate: GLenum, samples: GLuint, index: GLuint, location: ptr GLint): void {.stdcall.}](glGetProc("glGetShadingRateSampleLocationivNV"))
  glShadingRateImageBarrierNV = cast[proc(synchronize: GLboolean): void {.stdcall.}](glGetProc("glShadingRateImageBarrierNV"))
  glShadingRateImageBarrierNV = cast[proc(synchronize: GLboolean): void {.stdcall.}](glGetProc("glShadingRateImageBarrierNV"))
  glShadingRateImagePaletteNV = cast[proc(viewport: GLuint, first: GLuint, count: GLsizei, rates: ptr GLenum): void {.stdcall.}](glGetProc("glShadingRateImagePaletteNV"))
  glShadingRateSampleOrderNV = cast[proc(order: GLenum): void {.stdcall.}](glGetProc("glShadingRateSampleOrderNV"))
  glShadingRateSampleOrderCustomNV = cast[proc(rate: GLenum, samples: GLuint, locations: ptr GLint): void {.stdcall.}](glGetProc("glShadingRateSampleOrderCustomNV"))

# Load GL_NV_texture_barrier
proc loadGL_NV_texture_barrier*() =
  glTextureBarrierNV = cast[proc(): void {.stdcall.}](glGetProc("glTextureBarrierNV"))

# Load GL_NV_texture_multisample
proc loadGL_NV_texture_multisample*() =
  glTexImage2DMultisampleCoverageNV = cast[proc(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}](glGetProc("glTexImage2DMultisampleCoverageNV"))
  glTexImage3DMultisampleCoverageNV = cast[proc(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}](glGetProc("glTexImage3DMultisampleCoverageNV"))
  glTextureImage2DMultisampleNV = cast[proc(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}](glGetProc("glTextureImage2DMultisampleNV"))
  glTextureImage3DMultisampleNV = cast[proc(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}](glGetProc("glTextureImage3DMultisampleNV"))
  glTextureImage2DMultisampleCoverageNV = cast[proc(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}](glGetProc("glTextureImage2DMultisampleCoverageNV"))
  glTextureImage3DMultisampleCoverageNV = cast[proc(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean): void {.stdcall.}](glGetProc("glTextureImage3DMultisampleCoverageNV"))

# Load GL_NV_transform_feedback
proc loadGL_NV_transform_feedback*() =
  glBeginTransformFeedbackNV = cast[proc(primitiveMode: GLenum): void {.stdcall.}](glGetProc("glBeginTransformFeedbackNV"))
  glEndTransformFeedbackNV = cast[proc(): void {.stdcall.}](glGetProc("glEndTransformFeedbackNV"))
  glTransformFeedbackAttribsNV = cast[proc(count: GLsizei, attribs: ptr GLint, bufferMode: GLenum): void {.stdcall.}](glGetProc("glTransformFeedbackAttribsNV"))
  glBindBufferRangeNV = cast[proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void {.stdcall.}](glGetProc("glBindBufferRangeNV"))
  glBindBufferOffsetNV = cast[proc(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr): void {.stdcall.}](glGetProc("glBindBufferOffsetNV"))
  glBindBufferBaseNV = cast[proc(target: GLenum, index: GLuint, buffer: GLuint): void {.stdcall.}](glGetProc("glBindBufferBaseNV"))
  glTransformFeedbackVaryingsNV = cast[proc(program: GLuint, count: GLsizei, locations: ptr GLint, bufferMode: GLenum): void {.stdcall.}](glGetProc("glTransformFeedbackVaryingsNV"))
  glActiveVaryingNV = cast[proc(program: GLuint, name: cstring): void {.stdcall.}](glGetProc("glActiveVaryingNV"))
  glGetVaryingLocationNV = cast[proc(program: GLuint, name: cstring): GLint {.stdcall.}](glGetProc("glGetVaryingLocationNV"))
  glGetActiveVaryingNV = cast[proc(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring): void {.stdcall.}](glGetProc("glGetActiveVaryingNV"))
  glGetTransformFeedbackVaryingNV = cast[proc(program: GLuint, index: GLuint, location: ptr GLint): void {.stdcall.}](glGetProc("glGetTransformFeedbackVaryingNV"))
  glTransformFeedbackStreamAttribsNV = cast[proc(count: GLsizei, attribs: ptr GLint, nbuffers: GLsizei, bufstreams: ptr GLint, bufferMode: GLenum): void {.stdcall.}](glGetProc("glTransformFeedbackStreamAttribsNV"))

# Load GL_NV_transform_feedback2
proc loadGL_NV_transform_feedback2*() =
  glBindTransformFeedbackNV = cast[proc(target: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glBindTransformFeedbackNV"))
  glDeleteTransformFeedbacksNV = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteTransformFeedbacksNV"))
  glGenTransformFeedbacksNV = cast[proc(n: GLsizei, ids: ptr GLuint): void {.stdcall.}](glGetProc("glGenTransformFeedbacksNV"))
  glIsTransformFeedbackNV = cast[proc(id: GLuint): GLboolean {.stdcall.}](glGetProc("glIsTransformFeedbackNV"))
  glPauseTransformFeedbackNV = cast[proc(): void {.stdcall.}](glGetProc("glPauseTransformFeedbackNV"))
  glResumeTransformFeedbackNV = cast[proc(): void {.stdcall.}](glGetProc("glResumeTransformFeedbackNV"))
  glDrawTransformFeedbackNV = cast[proc(mode: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glDrawTransformFeedbackNV"))

# Load GL_NV_vdpau_interop
proc loadGL_NV_vdpau_interop*() =
  glVDPAUInitNV = cast[proc(vdpDevice: pointer, getProcAddress: pointer): void {.stdcall.}](glGetProc("glVDPAUInitNV"))
  glVDPAUFiniNV = cast[proc(): void {.stdcall.}](glGetProc("glVDPAUFiniNV"))
  glVDPAURegisterVideoSurfaceNV = cast[proc(vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}](glGetProc("glVDPAURegisterVideoSurfaceNV"))
  glVDPAURegisterOutputSurfaceNV = cast[proc(vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}](glGetProc("glVDPAURegisterOutputSurfaceNV"))
  glVDPAUIsSurfaceNV = cast[proc(surface: GLvdpauSurfaceNV): GLboolean {.stdcall.}](glGetProc("glVDPAUIsSurfaceNV"))
  glVDPAUUnregisterSurfaceNV = cast[proc(surface: GLvdpauSurfaceNV): void {.stdcall.}](glGetProc("glVDPAUUnregisterSurfaceNV"))
  glVDPAUGetSurfaceivNV = cast[proc(surface: GLvdpauSurfaceNV, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint): void {.stdcall.}](glGetProc("glVDPAUGetSurfaceivNV"))
  glVDPAUSurfaceAccessNV = cast[proc(surface: GLvdpauSurfaceNV, access: GLenum): void {.stdcall.}](glGetProc("glVDPAUSurfaceAccessNV"))
  glVDPAUMapSurfacesNV = cast[proc(numSurfaces: GLsizei, surfaces: ptr GLvdpauSurfaceNV): void {.stdcall.}](glGetProc("glVDPAUMapSurfacesNV"))
  glVDPAUUnmapSurfacesNV = cast[proc(numSurface: GLsizei, surfaces: ptr GLvdpauSurfaceNV): void {.stdcall.}](glGetProc("glVDPAUUnmapSurfacesNV"))

# Load GL_NV_vdpau_interop2
proc loadGL_NV_vdpau_interop2*() =
  glVDPAURegisterVideoSurfaceWithPictureStructureNV = cast[proc(vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint, isFrameStructure: GLboolean): GLvdpauSurfaceNV {.stdcall.}](glGetProc("glVDPAURegisterVideoSurfaceWithPictureStructureNV"))

# Load GL_NV_vertex_array_range
proc loadGL_NV_vertex_array_range*() =
  glFlushVertexArrayRangeNV = cast[proc(): void {.stdcall.}](glGetProc("glFlushVertexArrayRangeNV"))
  glVertexArrayRangeNV = cast[proc(length: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexArrayRangeNV"))

# Load GL_NV_vertex_attrib_integer_64bit
proc loadGL_NV_vertex_attrib_integer_64bit*() =
  glVertexAttribL1i64NV = cast[proc(index: GLuint, x: GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL1i64NV"))
  glVertexAttribL2i64NV = cast[proc(index: GLuint, x: GLint64EXT, y: GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL2i64NV"))
  glVertexAttribL3i64NV = cast[proc(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL3i64NV"))
  glVertexAttribL4i64NV = cast[proc(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL4i64NV"))
  glVertexAttribL1i64vNV = cast[proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL1i64vNV"))
  glVertexAttribL2i64vNV = cast[proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL2i64vNV"))
  glVertexAttribL3i64vNV = cast[proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL3i64vNV"))
  glVertexAttribL4i64vNV = cast[proc(index: GLuint, v: ptr GLint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL4i64vNV"))
  glVertexAttribL1ui64NV = cast[proc(index: GLuint, x: GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL1ui64NV"))
  glVertexAttribL2ui64NV = cast[proc(index: GLuint, x: GLuint64EXT, y: GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL2ui64NV"))
  glVertexAttribL3ui64NV = cast[proc(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL3ui64NV"))
  glVertexAttribL4ui64NV = cast[proc(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL4ui64NV"))
  glVertexAttribL1ui64vNV = cast[proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL1ui64vNV"))
  glVertexAttribL2ui64vNV = cast[proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL2ui64vNV"))
  glVertexAttribL3ui64vNV = cast[proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL3ui64vNV"))
  glVertexAttribL4ui64vNV = cast[proc(index: GLuint, v: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glVertexAttribL4ui64vNV"))
  glGetVertexAttribLi64vNV = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint64EXT): void {.stdcall.}](glGetProc("glGetVertexAttribLi64vNV"))
  glGetVertexAttribLui64vNV = cast[proc(index: GLuint, pname: GLenum, params: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetVertexAttribLui64vNV"))
  glVertexAttribLFormatNV = cast[proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glVertexAttribLFormatNV"))

# Load GL_NV_vertex_buffer_unified_memory
proc loadGL_NV_vertex_buffer_unified_memory*() =
  glBufferAddressRangeNV = cast[proc(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr): void {.stdcall.}](glGetProc("glBufferAddressRangeNV"))
  glVertexFormatNV = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glVertexFormatNV"))
  glNormalFormatNV = cast[proc(`type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glNormalFormatNV"))
  glColorFormatNV = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glColorFormatNV"))
  glIndexFormatNV = cast[proc(`type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glIndexFormatNV"))
  glTexCoordFormatNV = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glTexCoordFormatNV"))
  glEdgeFlagFormatNV = cast[proc(stride: GLsizei): void {.stdcall.}](glGetProc("glEdgeFlagFormatNV"))
  glSecondaryColorFormatNV = cast[proc(size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glSecondaryColorFormatNV"))
  glFogCoordFormatNV = cast[proc(`type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glFogCoordFormatNV"))
  glVertexAttribFormatNV = cast[proc(index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei): void {.stdcall.}](glGetProc("glVertexAttribFormatNV"))
  glVertexAttribIFormatNV = cast[proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei): void {.stdcall.}](glGetProc("glVertexAttribIFormatNV"))
  glGetIntegerui64i_vNV = cast[proc(value: GLenum, index: GLuint, result: ptr GLuint64EXT): void {.stdcall.}](glGetProc("glGetIntegerui64i_vNV"))

# Load GL_NV_vertex_program
proc loadGL_NV_vertex_program*() =
  glAreProgramsResidentNV = cast[proc(n: GLsizei, programs: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}](glGetProc("glAreProgramsResidentNV"))
  glBindProgramNV = cast[proc(target: GLenum, id: GLuint): void {.stdcall.}](glGetProc("glBindProgramNV"))
  glDeleteProgramsNV = cast[proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}](glGetProc("glDeleteProgramsNV"))
  glExecuteProgramNV = cast[proc(target: GLenum, id: GLuint, params: ptr GLfloat): void {.stdcall.}](glGetProc("glExecuteProgramNV"))
  glGenProgramsNV = cast[proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}](glGetProc("glGenProgramsNV"))
  glGetProgramParameterdvNV = cast[proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetProgramParameterdvNV"))
  glGetProgramParameterfvNV = cast[proc(target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetProgramParameterfvNV"))
  glGetProgramivNV = cast[proc(id: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetProgramivNV"))
  glGetProgramStringNV = cast[proc(id: GLuint, pname: GLenum, program: ptr GLubyte): void {.stdcall.}](glGetProc("glGetProgramStringNV"))
  glGetTrackMatrixivNV = cast[proc(target: GLenum, address: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetTrackMatrixivNV"))
  glGetVertexAttribdvNV = cast[proc(index: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVertexAttribdvNV"))
  glGetVertexAttribfvNV = cast[proc(index: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVertexAttribfvNV"))
  glGetVertexAttribivNV = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexAttribivNV"))
  glGetVertexAttribPointervNV = cast[proc(index: GLuint, pname: GLenum, pointer: ptr pointer): void {.stdcall.}](glGetProc("glGetVertexAttribPointervNV"))
  glIsProgramNV = cast[proc(id: GLuint): GLboolean {.stdcall.}](glGetProc("glIsProgramNV"))
  glLoadProgramNV = cast[proc(target: GLenum, id: GLuint, len: GLsizei, program: ptr GLubyte): void {.stdcall.}](glGetProc("glLoadProgramNV"))
  glProgramParameter4dNV = cast[proc(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glProgramParameter4dNV"))
  glProgramParameter4dvNV = cast[proc(target: GLenum, index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramParameter4dvNV"))
  glProgramParameter4fNV = cast[proc(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glProgramParameter4fNV"))
  glProgramParameter4fvNV = cast[proc(target: GLenum, index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramParameter4fvNV"))
  glProgramParameters4dvNV = cast[proc(target: GLenum, index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glProgramParameters4dvNV"))
  glProgramParameters4fvNV = cast[proc(target: GLenum, index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glProgramParameters4fvNV"))
  glRequestResidentProgramsNV = cast[proc(n: GLsizei, programs: ptr GLuint): void {.stdcall.}](glGetProc("glRequestResidentProgramsNV"))
  glTrackMatrixNV = cast[proc(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum): void {.stdcall.}](glGetProc("glTrackMatrixNV"))
  glVertexAttribPointerNV = cast[proc(index: GLuint, fsize: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribPointerNV"))
  glVertexAttrib1dNV = cast[proc(index: GLuint, x: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1dNV"))
  glVertexAttrib1dvNV = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib1dvNV"))
  glVertexAttrib1fNV = cast[proc(index: GLuint, x: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1fNV"))
  glVertexAttrib1fvNV = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib1fvNV"))
  glVertexAttrib1sNV = cast[proc(index: GLuint, x: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1sNV"))
  glVertexAttrib1svNV = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib1svNV"))
  glVertexAttrib2dNV = cast[proc(index: GLuint, x: GLdouble, y: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2dNV"))
  glVertexAttrib2dvNV = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib2dvNV"))
  glVertexAttrib2fNV = cast[proc(index: GLuint, x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2fNV"))
  glVertexAttrib2fvNV = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib2fvNV"))
  glVertexAttrib2sNV = cast[proc(index: GLuint, x: GLshort, y: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2sNV"))
  glVertexAttrib2svNV = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib2svNV"))
  glVertexAttrib3dNV = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3dNV"))
  glVertexAttrib3dvNV = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib3dvNV"))
  glVertexAttrib3fNV = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3fNV"))
  glVertexAttrib3fvNV = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib3fvNV"))
  glVertexAttrib3sNV = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3sNV"))
  glVertexAttrib3svNV = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib3svNV"))
  glVertexAttrib4dNV = cast[proc(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4dNV"))
  glVertexAttrib4dvNV = cast[proc(index: GLuint, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttrib4dvNV"))
  glVertexAttrib4fNV = cast[proc(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4fNV"))
  glVertexAttrib4fvNV = cast[proc(index: GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttrib4fvNV"))
  glVertexAttrib4sNV = cast[proc(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4sNV"))
  glVertexAttrib4svNV = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttrib4svNV"))
  glVertexAttrib4ubNV = cast[proc(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4ubNV"))
  glVertexAttrib4ubvNV = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttrib4ubvNV"))
  glVertexAttribs1dvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribs1dvNV"))
  glVertexAttribs1fvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttribs1fvNV"))
  glVertexAttribs1svNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttribs1svNV"))
  glVertexAttribs2dvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribs2dvNV"))
  glVertexAttribs2fvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttribs2fvNV"))
  glVertexAttribs2svNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttribs2svNV"))
  glVertexAttribs3dvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribs3dvNV"))
  glVertexAttribs3fvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttribs3fvNV"))
  glVertexAttribs3svNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttribs3svNV"))
  glVertexAttribs4dvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLdouble): void {.stdcall.}](glGetProc("glVertexAttribs4dvNV"))
  glVertexAttribs4fvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLfloat): void {.stdcall.}](glGetProc("glVertexAttribs4fvNV"))
  glVertexAttribs4svNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttribs4svNV"))
  glVertexAttribs4ubvNV = cast[proc(index: GLuint, count: GLsizei, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttribs4ubvNV"))

# Load GL_NV_vertex_program4
proc loadGL_NV_vertex_program4*() =
  glVertexAttribI1iEXT = cast[proc(index: GLuint, x: GLint): void {.stdcall.}](glGetProc("glVertexAttribI1iEXT"))
  glVertexAttribI2iEXT = cast[proc(index: GLuint, x: GLint, y: GLint): void {.stdcall.}](glGetProc("glVertexAttribI2iEXT"))
  glVertexAttribI3iEXT = cast[proc(index: GLuint, x: GLint, y: GLint, z: GLint): void {.stdcall.}](glGetProc("glVertexAttribI3iEXT"))
  glVertexAttribI4iEXT = cast[proc(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void {.stdcall.}](glGetProc("glVertexAttribI4iEXT"))
  glVertexAttribI1uiEXT = cast[proc(index: GLuint, x: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI1uiEXT"))
  glVertexAttribI2uiEXT = cast[proc(index: GLuint, x: GLuint, y: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI2uiEXT"))
  glVertexAttribI3uiEXT = cast[proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI3uiEXT"))
  glVertexAttribI4uiEXT = cast[proc(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void {.stdcall.}](glGetProc("glVertexAttribI4uiEXT"))
  glVertexAttribI1ivEXT = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI1ivEXT"))
  glVertexAttribI2ivEXT = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI2ivEXT"))
  glVertexAttribI3ivEXT = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI3ivEXT"))
  glVertexAttribI4ivEXT = cast[proc(index: GLuint, v: ptr GLint): void {.stdcall.}](glGetProc("glVertexAttribI4ivEXT"))
  glVertexAttribI1uivEXT = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI1uivEXT"))
  glVertexAttribI2uivEXT = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI2uivEXT"))
  glVertexAttribI3uivEXT = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI3uivEXT"))
  glVertexAttribI4uivEXT = cast[proc(index: GLuint, v: ptr GLuint): void {.stdcall.}](glGetProc("glVertexAttribI4uivEXT"))
  glVertexAttribI4bvEXT = cast[proc(index: GLuint, v: ptr GLbyte): void {.stdcall.}](glGetProc("glVertexAttribI4bvEXT"))
  glVertexAttribI4svEXT = cast[proc(index: GLuint, v: ptr GLshort): void {.stdcall.}](glGetProc("glVertexAttribI4svEXT"))
  glVertexAttribI4ubvEXT = cast[proc(index: GLuint, v: ptr GLubyte): void {.stdcall.}](glGetProc("glVertexAttribI4ubvEXT"))
  glVertexAttribI4usvEXT = cast[proc(index: GLuint, v: ptr GLushort): void {.stdcall.}](glGetProc("glVertexAttribI4usvEXT"))
  glVertexAttribIPointerEXT = cast[proc(index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer): void {.stdcall.}](glGetProc("glVertexAttribIPointerEXT"))
  glGetVertexAttribIivEXT = cast[proc(index: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVertexAttribIivEXT"))
  glGetVertexAttribIuivEXT = cast[proc(index: GLuint, pname: GLenum, params: ptr GLuint): void {.stdcall.}](glGetProc("glGetVertexAttribIuivEXT"))

# Load GL_NV_video_capture
proc loadGL_NV_video_capture*() =
  glBeginVideoCaptureNV = cast[proc(video_capture_slot: GLuint): void {.stdcall.}](glGetProc("glBeginVideoCaptureNV"))
  glBindVideoCaptureStreamBufferNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB): void {.stdcall.}](glGetProc("glBindVideoCaptureStreamBufferNV"))
  glBindVideoCaptureStreamTextureNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint): void {.stdcall.}](glGetProc("glBindVideoCaptureStreamTextureNV"))
  glEndVideoCaptureNV = cast[proc(video_capture_slot: GLuint): void {.stdcall.}](glGetProc("glEndVideoCaptureNV"))
  glGetVideoCaptureivNV = cast[proc(video_capture_slot: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVideoCaptureivNV"))
  glGetVideoCaptureStreamivNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetVideoCaptureStreamivNV"))
  glGetVideoCaptureStreamfvNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetVideoCaptureStreamfvNV"))
  glGetVideoCaptureStreamdvNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glGetVideoCaptureStreamdvNV"))
  glVideoCaptureNV = cast[proc(video_capture_slot: GLuint, sequence_num: ptr GLuint, capture_time: ptr GLuint64EXT): GLenum {.stdcall.}](glGetProc("glVideoCaptureNV"))
  glVideoCaptureStreamParameterivNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glVideoCaptureStreamParameterivNV"))
  glVideoCaptureStreamParameterfvNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glVideoCaptureStreamParameterfvNV"))
  glVideoCaptureStreamParameterdvNV = cast[proc(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble): void {.stdcall.}](glGetProc("glVideoCaptureStreamParameterdvNV"))

# Load GL_NV_viewport_swizzle
proc loadGL_NV_viewport_swizzle*() =
  glViewportSwizzleNV = cast[proc(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum): void {.stdcall.}](glGetProc("glViewportSwizzleNV"))

# Load GL_OES_byte_coordinates
proc loadGL_OES_byte_coordinates*() =
  glMultiTexCoord1bOES = cast[proc(texture: GLenum, s: GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord1bOES"))
  glMultiTexCoord1bvOES = cast[proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord1bvOES"))
  glMultiTexCoord2bOES = cast[proc(texture: GLenum, s: GLbyte, t: GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord2bOES"))
  glMultiTexCoord2bvOES = cast[proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord2bvOES"))
  glMultiTexCoord3bOES = cast[proc(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord3bOES"))
  glMultiTexCoord3bvOES = cast[proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord3bvOES"))
  glMultiTexCoord4bOES = cast[proc(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord4bOES"))
  glMultiTexCoord4bvOES = cast[proc(texture: GLenum, coords: ptr GLbyte): void {.stdcall.}](glGetProc("glMultiTexCoord4bvOES"))
  glTexCoord1bOES = cast[proc(s: GLbyte): void {.stdcall.}](glGetProc("glTexCoord1bOES"))
  glTexCoord1bvOES = cast[proc(coords: ptr GLbyte): void {.stdcall.}](glGetProc("glTexCoord1bvOES"))
  glTexCoord2bOES = cast[proc(s: GLbyte, t: GLbyte): void {.stdcall.}](glGetProc("glTexCoord2bOES"))
  glTexCoord2bvOES = cast[proc(coords: ptr GLbyte): void {.stdcall.}](glGetProc("glTexCoord2bvOES"))
  glTexCoord3bOES = cast[proc(s: GLbyte, t: GLbyte, r: GLbyte): void {.stdcall.}](glGetProc("glTexCoord3bOES"))
  glTexCoord3bvOES = cast[proc(coords: ptr GLbyte): void {.stdcall.}](glGetProc("glTexCoord3bvOES"))
  glTexCoord4bOES = cast[proc(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte): void {.stdcall.}](glGetProc("glTexCoord4bOES"))
  glTexCoord4bvOES = cast[proc(coords: ptr GLbyte): void {.stdcall.}](glGetProc("glTexCoord4bvOES"))
  glVertex2bOES = cast[proc(x: GLbyte, y: GLbyte): void {.stdcall.}](glGetProc("glVertex2bOES"))
  glVertex2bvOES = cast[proc(coords: ptr GLbyte): void {.stdcall.}](glGetProc("glVertex2bvOES"))
  glVertex3bOES = cast[proc(x: GLbyte, y: GLbyte, z: GLbyte): void {.stdcall.}](glGetProc("glVertex3bOES"))
  glVertex3bvOES = cast[proc(coords: ptr GLbyte): void {.stdcall.}](glGetProc("glVertex3bvOES"))
  glVertex4bOES = cast[proc(x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte): void {.stdcall.}](glGetProc("glVertex4bOES"))
  glVertex4bvOES = cast[proc(coords: ptr GLbyte): void {.stdcall.}](glGetProc("glVertex4bvOES"))

# Load GL_OES_fixed_point
proc loadGL_OES_fixed_point*() =
  glAlphaFuncxOES = cast[proc(`func`: GLenum, `ref`: GLfixed): void {.stdcall.}](glGetProc("glAlphaFuncxOES"))
  glClearColorxOES = cast[proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}](glGetProc("glClearColorxOES"))
  glClearDepthxOES = cast[proc(depth: GLfixed): void {.stdcall.}](glGetProc("glClearDepthxOES"))
  glClipPlanexOES = cast[proc(plane: GLenum, equation: ptr GLfixed): void {.stdcall.}](glGetProc("glClipPlanexOES"))
  glColor4xOES = cast[proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}](glGetProc("glColor4xOES"))
  glDepthRangexOES = cast[proc(n: GLfixed, f: GLfixed): void {.stdcall.}](glGetProc("glDepthRangexOES"))
  glFogxOES = cast[proc(pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glFogxOES"))
  glFogxvOES = cast[proc(pname: GLenum, param: ptr GLfixed): void {.stdcall.}](glGetProc("glFogxvOES"))
  glFrustumxOES = cast[proc(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed): void {.stdcall.}](glGetProc("glFrustumxOES"))
  glGetClipPlanexOES = cast[proc(plane: GLenum, equation: ptr GLfixed): void {.stdcall.}](glGetProc("glGetClipPlanexOES"))
  glGetFixedvOES = cast[proc(pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetFixedvOES"))
  glGetTexEnvxvOES = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetTexEnvxvOES"))
  glGetTexParameterxvOES = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetTexParameterxvOES"))
  glLightModelxOES = cast[proc(pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glLightModelxOES"))
  glLightModelxvOES = cast[proc(pname: GLenum, param: ptr GLfixed): void {.stdcall.}](glGetProc("glLightModelxvOES"))
  glLightxOES = cast[proc(light: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glLightxOES"))
  glLightxvOES = cast[proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glLightxvOES"))
  glLineWidthxOES = cast[proc(width: GLfixed): void {.stdcall.}](glGetProc("glLineWidthxOES"))
  glLoadMatrixxOES = cast[proc(m: ptr GLfixed): void {.stdcall.}](glGetProc("glLoadMatrixxOES"))
  glMaterialxOES = cast[proc(face: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glMaterialxOES"))
  glMaterialxvOES = cast[proc(face: GLenum, pname: GLenum, param: ptr GLfixed): void {.stdcall.}](glGetProc("glMaterialxvOES"))
  glMultMatrixxOES = cast[proc(m: ptr GLfixed): void {.stdcall.}](glGetProc("glMultMatrixxOES"))
  glMultiTexCoord4xOES = cast[proc(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord4xOES"))
  glNormal3xOES = cast[proc(nx: GLfixed, ny: GLfixed, nz: GLfixed): void {.stdcall.}](glGetProc("glNormal3xOES"))
  glOrthoxOES = cast[proc(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed): void {.stdcall.}](glGetProc("glOrthoxOES"))
  glPointParameterxvOES = cast[proc(pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glPointParameterxvOES"))
  glPointSizexOES = cast[proc(size: GLfixed): void {.stdcall.}](glGetProc("glPointSizexOES"))
  glPolygonOffsetxOES = cast[proc(factor: GLfixed, units: GLfixed): void {.stdcall.}](glGetProc("glPolygonOffsetxOES"))
  glRotatexOES = cast[proc(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}](glGetProc("glRotatexOES"))
  glScalexOES = cast[proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}](glGetProc("glScalexOES"))
  glTexEnvxOES = cast[proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glTexEnvxOES"))
  glTexEnvxvOES = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glTexEnvxvOES"))
  glTexParameterxOES = cast[proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glTexParameterxOES"))
  glTexParameterxvOES = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glTexParameterxvOES"))
  glTranslatexOES = cast[proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}](glGetProc("glTranslatexOES"))
  glGetLightxvOES = cast[proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetLightxvOES"))
  glGetMaterialxvOES = cast[proc(face: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetMaterialxvOES"))
  glPointParameterxOES = cast[proc(pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glPointParameterxOES"))
  glSampleCoveragexOES = cast[proc(value: GLclampx, invert: GLboolean): void {.stdcall.}](glGetProc("glSampleCoveragexOES"))
  glAccumxOES = cast[proc(op: GLenum, value: GLfixed): void {.stdcall.}](glGetProc("glAccumxOES"))
  glBitmapxOES = cast[proc(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: ptr GLubyte): void {.stdcall.}](glGetProc("glBitmapxOES"))
  glBlendColorxOES = cast[proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}](glGetProc("glBlendColorxOES"))
  glClearAccumxOES = cast[proc(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed): void {.stdcall.}](glGetProc("glClearAccumxOES"))
  glColor3xOES = cast[proc(red: GLfixed, green: GLfixed, blue: GLfixed): void {.stdcall.}](glGetProc("glColor3xOES"))
  glColor3xvOES = cast[proc(components: ptr GLfixed): void {.stdcall.}](glGetProc("glColor3xvOES"))
  glColor4xvOES = cast[proc(components: ptr GLfixed): void {.stdcall.}](glGetProc("glColor4xvOES"))
  glConvolutionParameterxOES = cast[proc(target: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glConvolutionParameterxOES"))
  glConvolutionParameterxvOES = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glConvolutionParameterxvOES"))
  glEvalCoord1xOES = cast[proc(u: GLfixed): void {.stdcall.}](glGetProc("glEvalCoord1xOES"))
  glEvalCoord1xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glEvalCoord1xvOES"))
  glEvalCoord2xOES = cast[proc(u: GLfixed, v: GLfixed): void {.stdcall.}](glGetProc("glEvalCoord2xOES"))
  glEvalCoord2xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glEvalCoord2xvOES"))
  glFeedbackBufferxOES = cast[proc(n: GLsizei, `type`: GLenum, buffer: ptr GLfixed): void {.stdcall.}](glGetProc("glFeedbackBufferxOES"))
  glGetConvolutionParameterxvOES = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetConvolutionParameterxvOES"))
  glGetHistogramParameterxvOES = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetHistogramParameterxvOES"))
  glGetLightxOES = cast[proc(light: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetLightxOES"))
  glGetMapxvOES = cast[proc(target: GLenum, query: GLenum, v: ptr GLfixed): void {.stdcall.}](glGetProc("glGetMapxvOES"))
  glGetMaterialxOES = cast[proc(face: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glGetMaterialxOES"))
  glGetPixelMapxv = cast[proc(map: GLenum, size: GLint, values: ptr GLfixed): void {.stdcall.}](glGetProc("glGetPixelMapxv"))
  glGetTexGenxvOES = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetTexGenxvOES"))
  glGetTexLevelParameterxvOES = cast[proc(target: GLenum, level: GLint, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glGetTexLevelParameterxvOES"))
  glIndexxOES = cast[proc(component: GLfixed): void {.stdcall.}](glGetProc("glIndexxOES"))
  glIndexxvOES = cast[proc(component: ptr GLfixed): void {.stdcall.}](glGetProc("glIndexxvOES"))
  glLoadTransposeMatrixxOES = cast[proc(m: ptr GLfixed): void {.stdcall.}](glGetProc("glLoadTransposeMatrixxOES"))
  glMap1xOES = cast[proc(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed): void {.stdcall.}](glGetProc("glMap1xOES"))
  glMap2xOES = cast[proc(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed): void {.stdcall.}](glGetProc("glMap2xOES"))
  glMapGrid1xOES = cast[proc(n: GLint, u1: GLfixed, u2: GLfixed): void {.stdcall.}](glGetProc("glMapGrid1xOES"))
  glMapGrid2xOES = cast[proc(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed): void {.stdcall.}](glGetProc("glMapGrid2xOES"))
  glMultTransposeMatrixxOES = cast[proc(m: ptr GLfixed): void {.stdcall.}](glGetProc("glMultTransposeMatrixxOES"))
  glMultiTexCoord1xOES = cast[proc(texture: GLenum, s: GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord1xOES"))
  glMultiTexCoord1xvOES = cast[proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord1xvOES"))
  glMultiTexCoord2xOES = cast[proc(texture: GLenum, s: GLfixed, t: GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord2xOES"))
  glMultiTexCoord2xvOES = cast[proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord2xvOES"))
  glMultiTexCoord3xOES = cast[proc(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord3xOES"))
  glMultiTexCoord3xvOES = cast[proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord3xvOES"))
  glMultiTexCoord4xvOES = cast[proc(texture: GLenum, coords: ptr GLfixed): void {.stdcall.}](glGetProc("glMultiTexCoord4xvOES"))
  glNormal3xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glNormal3xvOES"))
  glPassThroughxOES = cast[proc(token: GLfixed): void {.stdcall.}](glGetProc("glPassThroughxOES"))
  glPixelMapx = cast[proc(map: GLenum, size: GLint, values: ptr GLfixed): void {.stdcall.}](glGetProc("glPixelMapx"))
  glPixelStorex = cast[proc(pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glPixelStorex"))
  glPixelTransferxOES = cast[proc(pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glPixelTransferxOES"))
  glPixelZoomxOES = cast[proc(xfactor: GLfixed, yfactor: GLfixed): void {.stdcall.}](glGetProc("glPixelZoomxOES"))
  glPrioritizeTexturesxOES = cast[proc(n: GLsizei, textures: ptr GLuint, priorities: ptr GLfixed): void {.stdcall.}](glGetProc("glPrioritizeTexturesxOES"))
  glRasterPos2xOES = cast[proc(x: GLfixed, y: GLfixed): void {.stdcall.}](glGetProc("glRasterPos2xOES"))
  glRasterPos2xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glRasterPos2xvOES"))
  glRasterPos3xOES = cast[proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}](glGetProc("glRasterPos3xOES"))
  glRasterPos3xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glRasterPos3xvOES"))
  glRasterPos4xOES = cast[proc(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed): void {.stdcall.}](glGetProc("glRasterPos4xOES"))
  glRasterPos4xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glRasterPos4xvOES"))
  glRectxOES = cast[proc(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed): void {.stdcall.}](glGetProc("glRectxOES"))
  glRectxvOES = cast[proc(v1: ptr GLfixed, v2: ptr GLfixed): void {.stdcall.}](glGetProc("glRectxvOES"))
  glTexCoord1xOES = cast[proc(s: GLfixed): void {.stdcall.}](glGetProc("glTexCoord1xOES"))
  glTexCoord1xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glTexCoord1xvOES"))
  glTexCoord2xOES = cast[proc(s: GLfixed, t: GLfixed): void {.stdcall.}](glGetProc("glTexCoord2xOES"))
  glTexCoord2xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glTexCoord2xvOES"))
  glTexCoord3xOES = cast[proc(s: GLfixed, t: GLfixed, r: GLfixed): void {.stdcall.}](glGetProc("glTexCoord3xOES"))
  glTexCoord3xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glTexCoord3xvOES"))
  glTexCoord4xOES = cast[proc(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed): void {.stdcall.}](glGetProc("glTexCoord4xOES"))
  glTexCoord4xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glTexCoord4xvOES"))
  glTexGenxOES = cast[proc(coord: GLenum, pname: GLenum, param: GLfixed): void {.stdcall.}](glGetProc("glTexGenxOES"))
  glTexGenxvOES = cast[proc(coord: GLenum, pname: GLenum, params: ptr GLfixed): void {.stdcall.}](glGetProc("glTexGenxvOES"))
  glVertex2xOES = cast[proc(x: GLfixed): void {.stdcall.}](glGetProc("glVertex2xOES"))
  glVertex2xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glVertex2xvOES"))
  glVertex3xOES = cast[proc(x: GLfixed, y: GLfixed): void {.stdcall.}](glGetProc("glVertex3xOES"))
  glVertex3xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glVertex3xvOES"))
  glVertex4xOES = cast[proc(x: GLfixed, y: GLfixed, z: GLfixed): void {.stdcall.}](glGetProc("glVertex4xOES"))
  glVertex4xvOES = cast[proc(coords: ptr GLfixed): void {.stdcall.}](glGetProc("glVertex4xvOES"))

# Load GL_OES_query_matrix
proc loadGL_OES_query_matrix*() =
  glQueryMatrixxOES = cast[proc(mantissa: ptr GLfixed, exponent: ptr GLint): GLbitfield {.stdcall.}](glGetProc("glQueryMatrixxOES"))

# Load GL_OES_single_precision
proc loadGL_OES_single_precision*() =
  glClearDepthfOES = cast[proc(depth: GLclampf): void {.stdcall.}](glGetProc("glClearDepthfOES"))
  glClipPlanefOES = cast[proc(plane: GLenum, equation: ptr GLfloat): void {.stdcall.}](glGetProc("glClipPlanefOES"))
  glDepthRangefOES = cast[proc(n: GLclampf, f: GLclampf): void {.stdcall.}](glGetProc("glDepthRangefOES"))
  glFrustumfOES = cast[proc(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat): void {.stdcall.}](glGetProc("glFrustumfOES"))
  glGetClipPlanefOES = cast[proc(plane: GLenum, equation: ptr GLfloat): void {.stdcall.}](glGetProc("glGetClipPlanefOES"))
  glOrthofOES = cast[proc(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat): void {.stdcall.}](glGetProc("glOrthofOES"))

# Load GL_OVR_multiview
proc loadGL_OVR_multiview*() =
  glFramebufferTextureMultiviewOVR = cast[proc(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei): void {.stdcall.}](glGetProc("glFramebufferTextureMultiviewOVR"))

# Load GL_PGI_misc_hints
proc loadGL_PGI_misc_hints*() =
  glHintPGI = cast[proc(target: GLenum, mode: GLint): void {.stdcall.}](glGetProc("glHintPGI"))

# Load GL_SGIS_detail_texture
proc loadGL_SGIS_detail_texture*() =
  glDetailTexFuncSGIS = cast[proc(target: GLenum, n: GLsizei, points: ptr GLfloat): void {.stdcall.}](glGetProc("glDetailTexFuncSGIS"))
  glGetDetailTexFuncSGIS = cast[proc(target: GLenum, points: ptr GLfloat): void {.stdcall.}](glGetProc("glGetDetailTexFuncSGIS"))

# Load GL_SGIS_fog_function
proc loadGL_SGIS_fog_function*() =
  glFogFuncSGIS = cast[proc(n: GLsizei, points: ptr GLfloat): void {.stdcall.}](glGetProc("glFogFuncSGIS"))
  glGetFogFuncSGIS = cast[proc(points: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFogFuncSGIS"))

# Load GL_SGIS_multisample
proc loadGL_SGIS_multisample*() =
  glSampleMaskSGIS = cast[proc(value: GLclampf, invert: GLboolean): void {.stdcall.}](glGetProc("glSampleMaskSGIS"))
  glSamplePatternSGIS = cast[proc(pattern: GLenum): void {.stdcall.}](glGetProc("glSamplePatternSGIS"))

# Load GL_SGIS_pixel_texture
proc loadGL_SGIS_pixel_texture*() =
  glPixelTexGenParameteriSGIS = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glPixelTexGenParameteriSGIS"))
  glPixelTexGenParameterivSGIS = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glPixelTexGenParameterivSGIS"))
  glPixelTexGenParameterfSGIS = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPixelTexGenParameterfSGIS"))
  glPixelTexGenParameterfvSGIS = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glPixelTexGenParameterfvSGIS"))
  glGetPixelTexGenParameterivSGIS = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetPixelTexGenParameterivSGIS"))
  glGetPixelTexGenParameterfvSGIS = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetPixelTexGenParameterfvSGIS"))

# Load GL_SGIS_point_parameters
proc loadGL_SGIS_point_parameters*() =
  glPointParameterfSGIS = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glPointParameterfSGIS"))
  glPointParameterfvSGIS = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glPointParameterfvSGIS"))

# Load GL_SGIS_sharpen_texture
proc loadGL_SGIS_sharpen_texture*() =
  glSharpenTexFuncSGIS = cast[proc(target: GLenum, n: GLsizei, points: ptr GLfloat): void {.stdcall.}](glGetProc("glSharpenTexFuncSGIS"))
  glGetSharpenTexFuncSGIS = cast[proc(target: GLenum, points: ptr GLfloat): void {.stdcall.}](glGetProc("glGetSharpenTexFuncSGIS"))

# Load GL_SGIS_texture4D
proc loadGL_SGIS_texture4D*() =
  glTexImage4DSGIS = cast[proc(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexImage4DSGIS"))
  glTexSubImage4DSGIS = cast[proc(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer): void {.stdcall.}](glGetProc("glTexSubImage4DSGIS"))

# Load GL_SGIS_texture_color_mask
proc loadGL_SGIS_texture_color_mask*() =
  glTextureColorMaskSGIS = cast[proc(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void {.stdcall.}](glGetProc("glTextureColorMaskSGIS"))

# Load GL_SGIS_texture_filter4
proc loadGL_SGIS_texture_filter4*() =
  glGetTexFilterFuncSGIS = cast[proc(target: GLenum, filter: GLenum, weights: ptr GLfloat): void {.stdcall.}](glGetProc("glGetTexFilterFuncSGIS"))
  glTexFilterFuncSGIS = cast[proc(target: GLenum, filter: GLenum, n: GLsizei, weights: ptr GLfloat): void {.stdcall.}](glGetProc("glTexFilterFuncSGIS"))

# Load GL_SGIX_async
proc loadGL_SGIX_async*() =
  glAsyncMarkerSGIX = cast[proc(marker: GLuint): void {.stdcall.}](glGetProc("glAsyncMarkerSGIX"))
  glFinishAsyncSGIX = cast[proc(markerp: ptr GLuint): GLint {.stdcall.}](glGetProc("glFinishAsyncSGIX"))
  glPollAsyncSGIX = cast[proc(markerp: ptr GLuint): GLint {.stdcall.}](glGetProc("glPollAsyncSGIX"))
  glGenAsyncMarkersSGIX = cast[proc(range: GLsizei): GLuint {.stdcall.}](glGetProc("glGenAsyncMarkersSGIX"))
  glDeleteAsyncMarkersSGIX = cast[proc(marker: GLuint, range: GLsizei): void {.stdcall.}](glGetProc("glDeleteAsyncMarkersSGIX"))
  glIsAsyncMarkerSGIX = cast[proc(marker: GLuint): GLboolean {.stdcall.}](glGetProc("glIsAsyncMarkerSGIX"))

# Load GL_SGIX_flush_raster
proc loadGL_SGIX_flush_raster*() =
  glFlushRasterSGIX = cast[proc(): void {.stdcall.}](glGetProc("glFlushRasterSGIX"))

# Load GL_SGIX_fragment_lighting
proc loadGL_SGIX_fragment_lighting*() =
  glFragmentColorMaterialSGIX = cast[proc(face: GLenum, mode: GLenum): void {.stdcall.}](glGetProc("glFragmentColorMaterialSGIX"))
  glFragmentLightfSGIX = cast[proc(light: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glFragmentLightfSGIX"))
  glFragmentLightfvSGIX = cast[proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glFragmentLightfvSGIX"))
  glFragmentLightiSGIX = cast[proc(light: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glFragmentLightiSGIX"))
  glFragmentLightivSGIX = cast[proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glFragmentLightivSGIX"))
  glFragmentLightModelfSGIX = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glFragmentLightModelfSGIX"))
  glFragmentLightModelfvSGIX = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glFragmentLightModelfvSGIX"))
  glFragmentLightModeliSGIX = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glFragmentLightModeliSGIX"))
  glFragmentLightModelivSGIX = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glFragmentLightModelivSGIX"))
  glFragmentMaterialfSGIX = cast[proc(face: GLenum, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glFragmentMaterialfSGIX"))
  glFragmentMaterialfvSGIX = cast[proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glFragmentMaterialfvSGIX"))
  glFragmentMaterialiSGIX = cast[proc(face: GLenum, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glFragmentMaterialiSGIX"))
  glFragmentMaterialivSGIX = cast[proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glFragmentMaterialivSGIX"))
  glGetFragmentLightfvSGIX = cast[proc(light: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFragmentLightfvSGIX"))
  glGetFragmentLightivSGIX = cast[proc(light: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFragmentLightivSGIX"))
  glGetFragmentMaterialfvSGIX = cast[proc(face: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetFragmentMaterialfvSGIX"))
  glGetFragmentMaterialivSGIX = cast[proc(face: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetFragmentMaterialivSGIX"))
  glLightEnviSGIX = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glLightEnviSGIX"))

# Load GL_SGIX_framezoom
proc loadGL_SGIX_framezoom*() =
  glFrameZoomSGIX = cast[proc(factor: GLint): void {.stdcall.}](glGetProc("glFrameZoomSGIX"))

# Load GL_SGIX_igloo_interface
proc loadGL_SGIX_igloo_interface*() =
  glIglooInterfaceSGIX = cast[proc(pname: GLenum, params: pointer): void {.stdcall.}](glGetProc("glIglooInterfaceSGIX"))

# Load GL_SGIX_instruments
proc loadGL_SGIX_instruments*() =
  glGetInstrumentsSGIX = cast[proc(): GLint {.stdcall.}](glGetProc("glGetInstrumentsSGIX"))
  glInstrumentsBufferSGIX = cast[proc(size: GLsizei, buffer: ptr GLint): void {.stdcall.}](glGetProc("glInstrumentsBufferSGIX"))
  glPollInstrumentsSGIX = cast[proc(marker_p: ptr GLint): GLint {.stdcall.}](glGetProc("glPollInstrumentsSGIX"))
  glReadInstrumentsSGIX = cast[proc(marker: GLint): void {.stdcall.}](glGetProc("glReadInstrumentsSGIX"))
  glStartInstrumentsSGIX = cast[proc(): void {.stdcall.}](glGetProc("glStartInstrumentsSGIX"))
  glStopInstrumentsSGIX = cast[proc(marker: GLint): void {.stdcall.}](glGetProc("glStopInstrumentsSGIX"))

# Load GL_SGIX_list_priority
proc loadGL_SGIX_list_priority*() =
  glGetListParameterfvSGIX = cast[proc(list: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetListParameterfvSGIX"))
  glGetListParameterivSGIX = cast[proc(list: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetListParameterivSGIX"))
  glListParameterfSGIX = cast[proc(list: GLuint, pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glListParameterfSGIX"))
  glListParameterfvSGIX = cast[proc(list: GLuint, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glListParameterfvSGIX"))
  glListParameteriSGIX = cast[proc(list: GLuint, pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glListParameteriSGIX"))
  glListParameterivSGIX = cast[proc(list: GLuint, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glListParameterivSGIX"))

# Load GL_SGIX_pixel_texture
proc loadGL_SGIX_pixel_texture*() =
  glPixelTexGenSGIX = cast[proc(mode: GLenum): void {.stdcall.}](glGetProc("glPixelTexGenSGIX"))

# Load GL_SGIX_polynomial_ffd
proc loadGL_SGIX_polynomial_ffd*() =
  glDeformationMap3dSGIX = cast[proc(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: ptr GLdouble): void {.stdcall.}](glGetProc("glDeformationMap3dSGIX"))
  glDeformationMap3fSGIX = cast[proc(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: ptr GLfloat): void {.stdcall.}](glGetProc("glDeformationMap3fSGIX"))
  glDeformSGIX = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glDeformSGIX"))
  glLoadIdentityDeformationMapSGIX = cast[proc(mask: GLbitfield): void {.stdcall.}](glGetProc("glLoadIdentityDeformationMapSGIX"))

# Load GL_SGIX_reference_plane
proc loadGL_SGIX_reference_plane*() =
  glReferencePlaneSGIX = cast[proc(equation: ptr GLdouble): void {.stdcall.}](glGetProc("glReferencePlaneSGIX"))

# Load GL_SGIX_sprite
proc loadGL_SGIX_sprite*() =
  glSpriteParameterfSGIX = cast[proc(pname: GLenum, param: GLfloat): void {.stdcall.}](glGetProc("glSpriteParameterfSGIX"))
  glSpriteParameterfvSGIX = cast[proc(pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glSpriteParameterfvSGIX"))
  glSpriteParameteriSGIX = cast[proc(pname: GLenum, param: GLint): void {.stdcall.}](glGetProc("glSpriteParameteriSGIX"))
  glSpriteParameterivSGIX = cast[proc(pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glSpriteParameterivSGIX"))

# Load GL_SGIX_tag_sample_buffer
proc loadGL_SGIX_tag_sample_buffer*() =
  glTagSampleBufferSGIX = cast[proc(): void {.stdcall.}](glGetProc("glTagSampleBufferSGIX"))

# Load GL_SGI_color_table
proc loadGL_SGI_color_table*() =
  glColorTableSGI = cast[proc(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}](glGetProc("glColorTableSGI"))
  glColorTableParameterfvSGI = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glColorTableParameterfvSGI"))
  glColorTableParameterivSGI = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glColorTableParameterivSGI"))
  glCopyColorTableSGI = cast[proc(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei): void {.stdcall.}](glGetProc("glCopyColorTableSGI"))
  glGetColorTableSGI = cast[proc(target: GLenum, format: GLenum, `type`: GLenum, table: pointer): void {.stdcall.}](glGetProc("glGetColorTableSGI"))
  glGetColorTableParameterfvSGI = cast[proc(target: GLenum, pname: GLenum, params: ptr GLfloat): void {.stdcall.}](glGetProc("glGetColorTableParameterfvSGI"))
  glGetColorTableParameterivSGI = cast[proc(target: GLenum, pname: GLenum, params: ptr GLint): void {.stdcall.}](glGetProc("glGetColorTableParameterivSGI"))

# Load GL_SUNX_constant_data
proc loadGL_SUNX_constant_data*() =
  glFinishTextureSUNX = cast[proc(): void {.stdcall.}](glGetProc("glFinishTextureSUNX"))

# Load GL_SUN_global_alpha
proc loadGL_SUN_global_alpha*() =
  glGlobalAlphaFactorbSUN = cast[proc(factor: GLbyte): void {.stdcall.}](glGetProc("glGlobalAlphaFactorbSUN"))
  glGlobalAlphaFactorsSUN = cast[proc(factor: GLshort): void {.stdcall.}](glGetProc("glGlobalAlphaFactorsSUN"))
  glGlobalAlphaFactoriSUN = cast[proc(factor: GLint): void {.stdcall.}](glGetProc("glGlobalAlphaFactoriSUN"))
  glGlobalAlphaFactorfSUN = cast[proc(factor: GLfloat): void {.stdcall.}](glGetProc("glGlobalAlphaFactorfSUN"))
  glGlobalAlphaFactordSUN = cast[proc(factor: GLdouble): void {.stdcall.}](glGetProc("glGlobalAlphaFactordSUN"))
  glGlobalAlphaFactorubSUN = cast[proc(factor: GLubyte): void {.stdcall.}](glGetProc("glGlobalAlphaFactorubSUN"))
  glGlobalAlphaFactorusSUN = cast[proc(factor: GLushort): void {.stdcall.}](glGetProc("glGlobalAlphaFactorusSUN"))
  glGlobalAlphaFactoruiSUN = cast[proc(factor: GLuint): void {.stdcall.}](glGetProc("glGlobalAlphaFactoruiSUN"))

# Load GL_SUN_mesh_array
proc loadGL_SUN_mesh_array*() =
  glDrawMeshArraysSUN = cast[proc(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei): void {.stdcall.}](glGetProc("glDrawMeshArraysSUN"))

# Load GL_SUN_triangle_list
proc loadGL_SUN_triangle_list*() =
  glReplacementCodeuiSUN = cast[proc(code: GLuint): void {.stdcall.}](glGetProc("glReplacementCodeuiSUN"))
  glReplacementCodeusSUN = cast[proc(code: GLushort): void {.stdcall.}](glGetProc("glReplacementCodeusSUN"))
  glReplacementCodeubSUN = cast[proc(code: GLubyte): void {.stdcall.}](glGetProc("glReplacementCodeubSUN"))
  glReplacementCodeuivSUN = cast[proc(code: ptr GLuint): void {.stdcall.}](glGetProc("glReplacementCodeuivSUN"))
  glReplacementCodeusvSUN = cast[proc(code: ptr GLushort): void {.stdcall.}](glGetProc("glReplacementCodeusvSUN"))
  glReplacementCodeubvSUN = cast[proc(code: ptr GLubyte): void {.stdcall.}](glGetProc("glReplacementCodeubvSUN"))
  glReplacementCodePointerSUN = cast[proc(`type`: GLenum, stride: GLsizei, pointer: ptr pointer): void {.stdcall.}](glGetProc("glReplacementCodePointerSUN"))

# Load GL_SUN_vertex
proc loadGL_SUN_vertex*() =
  glColor4ubVertex2fSUN = cast[proc(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat): void {.stdcall.}](glGetProc("glColor4ubVertex2fSUN"))
  glColor4ubVertex2fvSUN = cast[proc(c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}](glGetProc("glColor4ubVertex2fvSUN"))
  glColor4ubVertex3fSUN = cast[proc(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glColor4ubVertex3fSUN"))
  glColor4ubVertex3fvSUN = cast[proc(c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}](glGetProc("glColor4ubVertex3fvSUN"))
  glColor3fVertex3fSUN = cast[proc(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glColor3fVertex3fSUN"))
  glColor3fVertex3fvSUN = cast[proc(c: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glColor3fVertex3fvSUN"))
  glNormal3fVertex3fSUN = cast[proc(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glNormal3fVertex3fSUN"))
  glNormal3fVertex3fvSUN = cast[proc(n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glNormal3fVertex3fvSUN"))
  glColor4fNormal3fVertex3fSUN = cast[proc(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glColor4fNormal3fVertex3fSUN"))
  glColor4fNormal3fVertex3fvSUN = cast[proc(c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glColor4fNormal3fVertex3fvSUN"))
  glTexCoord2fVertex3fSUN = cast[proc(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fVertex3fSUN"))
  glTexCoord2fVertex3fvSUN = cast[proc(tc: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fVertex3fvSUN"))
  glTexCoord4fVertex4fSUN = cast[proc(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glTexCoord4fVertex4fSUN"))
  glTexCoord4fVertex4fvSUN = cast[proc(tc: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord4fVertex4fvSUN"))
  glTexCoord2fColor4ubVertex3fSUN = cast[proc(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fColor4ubVertex3fSUN"))
  glTexCoord2fColor4ubVertex3fvSUN = cast[proc(tc: ptr GLfloat, c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fColor4ubVertex3fvSUN"))
  glTexCoord2fColor3fVertex3fSUN = cast[proc(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fColor3fVertex3fSUN"))
  glTexCoord2fColor3fVertex3fvSUN = cast[proc(tc: ptr GLfloat, c: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fColor3fVertex3fvSUN"))
  glTexCoord2fNormal3fVertex3fSUN = cast[proc(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fNormal3fVertex3fSUN"))
  glTexCoord2fNormal3fVertex3fvSUN = cast[proc(tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fNormal3fVertex3fvSUN"))
  glTexCoord2fColor4fNormal3fVertex3fSUN = cast[proc(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fColor4fNormal3fVertex3fSUN"))
  glTexCoord2fColor4fNormal3fVertex3fvSUN = cast[proc(tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord2fColor4fNormal3fVertex3fvSUN"))
  glTexCoord4fColor4fNormal3fVertex4fSUN = cast[proc(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void {.stdcall.}](glGetProc("glTexCoord4fColor4fNormal3fVertex4fSUN"))
  glTexCoord4fColor4fNormal3fVertex4fvSUN = cast[proc(tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glTexCoord4fColor4fNormal3fVertex4fvSUN"))
  glReplacementCodeuiVertex3fSUN = cast[proc(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiVertex3fSUN"))
  glReplacementCodeuiVertex3fvSUN = cast[proc(rc: ptr GLuint, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiVertex3fvSUN"))
  glReplacementCodeuiColor4ubVertex3fSUN = cast[proc(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiColor4ubVertex3fSUN"))
  glReplacementCodeuiColor4ubVertex3fvSUN = cast[proc(rc: ptr GLuint, c: ptr GLubyte, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiColor4ubVertex3fvSUN"))
  glReplacementCodeuiColor3fVertex3fSUN = cast[proc(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiColor3fVertex3fSUN"))
  glReplacementCodeuiColor3fVertex3fvSUN = cast[proc(rc: ptr GLuint, c: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiColor3fVertex3fvSUN"))
  glReplacementCodeuiNormal3fVertex3fSUN = cast[proc(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiNormal3fVertex3fSUN"))
  glReplacementCodeuiNormal3fVertex3fvSUN = cast[proc(rc: ptr GLuint, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiNormal3fVertex3fvSUN"))
  glReplacementCodeuiColor4fNormal3fVertex3fSUN = cast[proc(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiColor4fNormal3fVertex3fSUN"))
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN = cast[proc(rc: ptr GLuint, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"))
  glReplacementCodeuiTexCoord2fVertex3fSUN = cast[proc(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiTexCoord2fVertex3fSUN"))
  glReplacementCodeuiTexCoord2fVertex3fvSUN = cast[proc(rc: ptr GLuint, tc: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiTexCoord2fVertex3fvSUN"))
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = cast[proc(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"))
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = cast[proc(rc: ptr GLuint, tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"))
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = cast[proc(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"))
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = cast[proc(rc: ptr GLuint, tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat): void {.stdcall.}](glGetProc("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"))
